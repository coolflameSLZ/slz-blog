{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/img/home_banner.png","path":"img/home_banner.png","modified":0,"renderable":0},{"_id":"source/img/other_banner.png","path":"img/other_banner.png","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"c72e2b37a792c600a11ac5de227116801220c84c","modified":1627613034754},{"_id":"source/about/index.md","hash":"dfe6e6e5065fdea76d7e472bc354b6907b78d81b","modified":1627568393246},{"_id":"source/_posts/mysql/innodb存储实现.md","hash":"d73a7e7872982ae6c2cf99ce970bd019985ae1fa","modified":1627743421690},{"_id":"source/_posts/mysql/innodb索引优化.md","hash":"3240eea04a5a29d219d0cd53dd342fd4d65c6ae1","modified":1627743424976},{"_id":"source/_posts/mysql/分布式事务解决方案.md","hash":"825047bb76126df5159d63623fbd2f8585d919a6","modified":1627745741732},{"_id":"source/_posts/mysql/分库分表策略概述.md","hash":"f593d76dcf45f484f5ada8cf782bca3ca1e8053f","modified":1627743415593},{"_id":"source/_posts/技术规范/API设计规范.md","hash":"f67220d4097452339d36458721e38890c4b587f2","modified":1627629936495},{"_id":"source/_posts/技术规范/mysql开发规范.md","hash":"25446ccd4442d6f43831137b95b6dc07d3a069ef","modified":1627718255241},{"_id":"source/_posts/技术规范/分支规范.md","hash":"5ab9389385bfbf760ea4742eb10cbd8543be3836","modified":1627629966349},{"_id":"source/_posts/技术规范/生产就绪备忘清单.md","hash":"f11574043b551e4eac529fb76a244ebcafa2c615","modified":1627723857785},{"_id":"source/_posts/技术规范/监控规范.md","hash":"0a89137c786285422b5a5ea7e2b225dfd0a0d88a","modified":1627639207675},{"_id":"source/_posts/注册中心/注册中心的选型与设计.md","hash":"953d07cd3316a38f4ff014ca77789f7a385ba743","modified":1627752948672},{"_id":"source/img/home_banner.png","hash":"8a9101638183360cef533ef0d0f32d65860d0293","modified":1627587234995},{"_id":"source/img/other_banner.png","hash":"ce4d76c8c04723bfe171903d3c1650513a3d8e5d","modified":1627587616837},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"523b9db3801ca892124502c17d72864457cc4b21","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"dac9d10d95b9e179e8cd7c439300b450db51f0c2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/gulpfile.js","hash":"a7c87a83becf7080bddd14e81a6f09ce8c3df109","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"45b68110fcaf5819452f45ecd77282f97d1386f5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"6cbd88a2ef9dd2198d72ccc1899c4966ac5f49f9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"a154785aef120988d29409847977f24069d3a3d5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"9d6ff8772bf54d7458ae4e846e5a2d1f2921b8a7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"19c6db0ccebc8f59fa4ef9567a066b33223eccd6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/lint.yaml","hash":"64d521c9c5b61d3a4852c74894fb574082dc7009","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"606131cb807846bf43776a9073fcc1473d359ec9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/archive-list.ejs","hash":"8723aa57f61134a2c1dc84cc7ea88ea366f4fda3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/beian.ejs","hash":"6ec30a9dd56341590af07f4227324f619025c109","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/css.ejs","hash":"cdcb607f1104543a42beda647f3c9cf0f3d11623","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/footer.ejs","hash":"39e63b3e1502803c9e8ea0c44ea662a7bbe15744","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/head.ejs","hash":"248ecd01aead6e07ac1904a7b7c45395a922bcc7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/nav.ejs","hash":"245f49aad0e4124b52aa82d981281ad9c871f1f8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/post-meta.ejs","hash":"3e0fa1731b6e54dbcf52ccf8e200e83dc4549bfa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/scripts.ejs","hash":"b3d93135d9ae74f006da31ec54343308bbd77cb5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"a2d08e3b9f98b6371b2e64d664f079c99571494b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/changyan.ejs","hash":"725a1fe23c672fca87edc57739b748c3adf705da","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/disqus.ejs","hash":"fb4502fc9204284f8b4e8dabde8477d478e826e5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/twikoo.ejs","hash":"ffe08e76c9ebd4fc27715b8a60f385b3f10d0348","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/valine.ejs","hash":"9238063c5e2928bb6fce2b99cd25ad85e78c4d1c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/waline.ejs","hash":"5b61661fbc65752f54f99402077dbb03044149a1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/typed.ejs","hash":"ab71df2e56b60e8e193ff827e81704e5b358a977","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"26d29403d8ecb0b533e63bde3ca73b2c91f171ff","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"dabd87267d60240c0daea0f35a46f30ee1b2337a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl","hash":"4c6fffc6d4a3b8830931800ee7da99dccf1be36e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"ad7dcc8a060d94d3c44ca5e0788a24ca38be0f79","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/tag_plugin.styl","hash":"766fcf017deb4c8b0c260ac4c8d2e3489407ad89","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"35539a1ce8476e75515015a06d01ec66e4af6834","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"461d609a802a4f9aa9f492411ed8074813a956b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":499162500000},{"_id":"public/local-search.xml","hash":"4b99555a1575182f0c281e88b4847f38eeedaac0","modified":1627753459907},{"_id":"public/search.xml","hash":"aee97955265e35bda504ffab5f78e74beffc9720","modified":1627753459907},{"_id":"public/about/index.html","hash":"420ef7bcfbbefc4f1f8abddceda4c77f2faac77f","modified":1627753459907},{"_id":"public/2021/07/31/mysql/分布式事务解决方案/index.html","hash":"5ead7d8a36c4e16aefca386186ca3b44bc9fb42b","modified":1627753459907},{"_id":"public/2021/07/31/mysql/分库分表策略概述/index.html","hash":"23a0aad9e8d0c67a44cbd4434feedd12a9b2fc30","modified":1627753459907},{"_id":"public/2021/07/30/技术规范/生产就绪备忘清单/index.html","hash":"53f9d922487ffc4ae857ad9d5b668d4713c3391e","modified":1627753459907},{"_id":"public/2021/07/30/技术规范/分支规范/index.html","hash":"aef05eeda4643c97cfe908256a204b3444334dfa","modified":1627753459907},{"_id":"public/archives/index.html","hash":"72f591b247215d90c87611d66fcf7574e9853770","modified":1627753459907},{"_id":"public/archives/2021/index.html","hash":"72f591b247215d90c87611d66fcf7574e9853770","modified":1627753459907},{"_id":"public/archives/2021/07/index.html","hash":"72f591b247215d90c87611d66fcf7574e9853770","modified":1627753459907},{"_id":"public/categories/数据库/index.html","hash":"e801c43796d63b4f30de0e9ee004554e5a412e29","modified":1627753459907},{"_id":"public/categories/数据库/mysql/index.html","hash":"618a90159b330b3f7847272159944f13240b37c9","modified":1627753459907},{"_id":"public/categories/后端/index.html","hash":"b4bb196d6f60ba2982ec7db5c219e559707c0d5b","modified":1627753459907},{"_id":"public/tags/innodb/index.html","hash":"4ebcb42b8e3f1a0d0b79379169cbe89c401f4050","modified":1627753459907},{"_id":"public/tags/分库分表/index.html","hash":"c8d28227670f6df22b8bac3cc5eb1f56514f9919","modified":1627753459907},{"_id":"public/tags/分布式事务/index.html","hash":"2e27ff679202d21cca618975401b2355c04e1a96","modified":1627753459907},{"_id":"public/tags/设计/index.html","hash":"15d70725677923e140c0e1ab75c18a9ec7af6023","modified":1627753459907},{"_id":"public/tags/技术规范/index.html","hash":"b31b15c214b5d46aaf1bf1864638eb5ab42ee154","modified":1627753459907},{"_id":"public/tags/mysql/index.html","hash":"c0cf36a212449710c387881fdd2a5765cc515fbf","modified":1627753459907},{"_id":"public/tags/devOps/index.html","hash":"28d7f253abafc1118525778b20c6b16bf13907c5","modified":1627753459907},{"_id":"public/tags/注册中心/index.html","hash":"215b951a2bae755a794b5d76738f13ac9047719b","modified":1627753459907},{"_id":"public/404.html","hash":"ececca47ee82dfc840859fbe83790373f86af7c1","modified":1627753459907},{"_id":"public/tags/index.html","hash":"f20587ba08144dd6338811d4588c85eb85f3748a","modified":1627753459907},{"_id":"public/categories/index.html","hash":"cee0701b7bfb0c404a31372cb5253053d7612d4a","modified":1627753459907},{"_id":"public/links/index.html","hash":"a2b7e6ded0e367a2824e219560e2bf62fe538fe7","modified":1627753459907},{"_id":"public/2021/07/31/注册中心/注册中心的选型与设计/index.html","hash":"c2662a7e9857afe44aeabd584bc8a0b7bd659961","modified":1627753459907},{"_id":"public/2021/07/31/mysql/innodb索引优化/index.html","hash":"a5c6b9666388545a9d522eaf2dce2b8db42bf419","modified":1627753459907},{"_id":"public/2021/07/30/mysql/innodb存储实现/index.html","hash":"39b46467b20d916cb2f7f29edc336302823d32a8","modified":1627753459907},{"_id":"public/2021/07/30/技术规范/监控规范/index.html","hash":"e4e62486aa901682bdf34ac0f44f4bc49a0e38d5","modified":1627753459907},{"_id":"public/2021/07/30/技术规范/API设计规范/index.html","hash":"03adce099fbd9fa26efdf8400cc0e6a7b989e091","modified":1627753459907},{"_id":"public/2021/07/27/技术规范/mysql开发规范/index.html","hash":"8a7bbdf2b04a59064aa694a0d72f6cd46cdfe796","modified":1627753459907},{"_id":"public/index.html","hash":"ad92838a2758b4e1cf6e5c7356b30f51e1506fb6","modified":1627753459907},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1627753459907},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1627753459907},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1627753459907},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1627753459907},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1627753459907},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1627753459907},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1627753459907},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1627753459907},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1627753459907},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1627753459907},{"_id":"public/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":1627753459907},{"_id":"public/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":1627753459907},{"_id":"public/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":1627753459907},{"_id":"public/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":1627753459907},{"_id":"public/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":1627753459907},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1627753459907},{"_id":"public/css/main.css","hash":"03119a9e68966f190a3f2b30b99553423267ad30","modified":1627753459907},{"_id":"public/img/home_banner.png","hash":"8a9101638183360cef533ef0d0f32d65860d0293","modified":1627753459907},{"_id":"public/img/other_banner.png","hash":"ce4d76c8c04723bfe171903d3c1650513a3d8e5d","modified":1627753459907}],"Category":[{"name":"数据库","_id":"ckrs2dsds0003hufy6sot4hs4"},{"name":"mysql","parent":"ckrs2dsds0003hufy6sot4hs4","_id":"ckrs2dse2000ihufyf2l3buq7"},{"name":"后端","_id":"ckrs2dse5000ohufy7bh576s5"}],"Data":[],"Page":[{"title":"about","date":"2021-07-29T05:45:33.000Z","_content":"\nheihei\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-07-29 13:45:33\n---\n\nheihei\n\n","updated":"2021-07-29T05:45:33.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckrs2dsdl0000hufybv5a6ev7","content":"<p>heihei</p>\n","site":{"data":{}},"excerpt":"","more":"<p>heihei</p>\n"}],"Post":[{"title":"innodb存储实现","toc":true,"hide":false,"date":"2021-07-30T14:15:07.000Z","sortn":10,"_content":"\n\n\n本章主要介绍 innodb 引擎的存储实现\n\n<!-- more -->\n\n------\n\n\n\n## mysql innodb 存储磁盘存储结构\n\n\n\ninnodb 的存储结构分为 5 级：**表空间、段、簇、页、行。**\n\n\n\n###  簇（B+树，聚簇索引）\n\n![img](https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731010412.png)\n\n- 整个树有序，结构类似于跳表。\n- 分为非叶子节点、叶子节点\n- 非叶子节点，存主键+下一级指针。叶子节点存主键+数据\n- 行是有序的，根据主键排序，所以支持2分查找\n- 数据有冗余，有未分配空间，有已删除空间。所以数据主键要保递增，减少碎片化。\n\n\n\n### 页(Page)\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210730224756.png\" alt=\"image-20210730224756023\" style=\"zoom:40%;\" />\n\n\n\n- 默认1页为16kb\n- 页头，本页基本信息\n- 虚记录，本页最小主键，本页最大主键。\n- 【行】记录堆，行记录存储区，分为有效记录和已删除记录\n- 未分配空间，页中未使用的空间\n- 页尾，占8字节，主键存页面的校验信息\n\n\n\n## mysql innodb 内存管理\n\n\n\ntodo\n\n\n\n\n\n\n\n## mysql innodb 事务实现原理\n\n\n\n### 事务特性：\n\n- A（atomicity 原子性）：全部成功，全部失败。不允许中间状态\n- I （isolation 隔离性）：并行事务不干扰\n- D（Durability 持久性）：提交事务后，数据不能丢\n- C（consistency 一致性）：凑数的\n\n\n\n### 并发问题：\n\n- 脏读（dirty read）： 读取到其他事务，没有提交的数据\n- 不可重复读（non-repeatable read）：查询同一条数据两次，有可能结果不一样\n- 幻读（phantom read）：select 出来的结果，可能是不存在的。<br>被其他事务插入后又删了，但中间存在期间，本事务恰好扫描到他了\n\n\n\n### 隔离级别：\n\n- Read Uncommitted（读取未提交内容）: 最低隔离级别，会读取到其他事务未提交的数据，\n\n  出现的问题：**脏读**\n\n- Read Committed（读取提交内容）: 事务过程中可以读取到其他事务已提交的数据，\n\n  出现的问：**不可重复读**\n\n- Repeatable Read（可重复读）: 每次读取相同结果集，不管其他事务是否提交，\n\n  出现的问题：**幻读**\n\n- Serializable （串行化）: 事务排队，隔离级别最高，性能最差;\n\n  出现的问题：**性能差**\n\n- 总结：\n\n  1. 一般使用 RR （可重复读），但写事务的时候，尽量避免 select 范围修改。<br>如果有范围修改，则思考一下，有没有可能出现幻读，如果出现了是否有影响。\n  2. 对于innodb，mvcc 并没有完全解决幻读问题。\n\n\n\n## innodb - mvcc\n\n\n\n### 两种查询模式\n\n- 当前读：永远查询某一行数据的最新的版本\n- 读快照：假设当前事务为A，根据事务A的 trx id（事务id）总能查到，A事务开启的那一刻， <br>数据的历史版本快照。这个快照是永远不会发生改变的。\n\n\n\n### 可见性逻辑\n\n- trx id 指的是事务id，是一个自增的序列。id 大，证明事务发生的时间靠后\n- innodb 维护一个事务活跃列表，即 select * from information_schema.INNODB_TRX 查出来的数据。\n- 可见性逻辑：\n  1. 事务开始的那一刻，查询所有当前事务。tmp_trx = [当前所有事务id]\n  2. tmp_trx_max = [时间轴最靠后的事务]，tmp_trx_min = [时间轴最靠前的事务]\n  3. 搜索出来的数据，需要满足2个条件其中之一即可。\n     - 事务id，比tmp_trx_min 的id要小（查出来的记录，在事务创建之前，就提交了）\n     - 不在事务活跃列表里面。（这个事务跑得快，已经先一步提交）\n  4. 如果不满足，则通过历史版本指针，找到该行数据的历史快照，正常使用即可\n\n\n\n## mysql 锁实现原理\n\n\n\n### **需要加锁的语句**\n\nselect for update 、update、delete ，其他语句不用加锁。\n\n\n\n### **分析锁的几个重要前提**\n\n- 索引：唯一索引 、 非唯一索引\n- 事务隔离级别：RC 、 RR\n\n\n\n### **根据颗粒度划分**\n\n- 行级，锁1行\n\n  - RC下，唯一索引，非唯一索引，使用该级别锁。\n\n    RR下，唯一索引，使用该级别\n\n  - 作用在索引上\n\n  - 聚簇索引 & 二级索引\n\n    \n\n- 间隙，锁一部分\n\n  - RR下，唯一索引，才使用这个锁类型\n\n  - 索引是有序的，新的记录插入，只能插入到GAP区间内；<br>GAP锁，是计算出两条记录之间的GAP；<br>一旦锁住这个GAP。就封住了新纪录插入的可能性；<br>就能保证2次当前读返回的数据是一致的。\n\n  - GAP锁的问题：查询where条件没有索引的时候，没法加GAP锁，很容易锁升级为表锁。\n\n    \n\n- 表级，锁1个表\n\n  - **没有命中索引的时候，有概率锁表，概率还不小。**\n  - 所以，事务中，加锁的语句中的where条件一定要加索引。\n  - 一般来说，分两个步骤实现修改\n    1. 范围查询，返回主键id\n    2. 根据主键id list 进行 update。\n\n  \n\n### **根据类型划分**\n\n- 共享锁\n  - 读锁，可以被多个事务获取，阻止其他事务对记录的修改\n- 排他锁\n  - 写锁，只能被1个事务获取，只允许获得锁的事务修改数据\n","source":"_posts/mysql/innodb存储实现.md","raw":"---\ntitle: 'innodb存储实现'\ntoc: true\ncategories:\n  - 数据库\n  - mysql\ntags:\n  - innodb\nhide: false\ndate: 2021-07-30 22:15:07\nsortn: 10\n---\n\n\n\n本章主要介绍 innodb 引擎的存储实现\n\n<!-- more -->\n\n------\n\n\n\n## mysql innodb 存储磁盘存储结构\n\n\n\ninnodb 的存储结构分为 5 级：**表空间、段、簇、页、行。**\n\n\n\n###  簇（B+树，聚簇索引）\n\n![img](https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731010412.png)\n\n- 整个树有序，结构类似于跳表。\n- 分为非叶子节点、叶子节点\n- 非叶子节点，存主键+下一级指针。叶子节点存主键+数据\n- 行是有序的，根据主键排序，所以支持2分查找\n- 数据有冗余，有未分配空间，有已删除空间。所以数据主键要保递增，减少碎片化。\n\n\n\n### 页(Page)\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210730224756.png\" alt=\"image-20210730224756023\" style=\"zoom:40%;\" />\n\n\n\n- 默认1页为16kb\n- 页头，本页基本信息\n- 虚记录，本页最小主键，本页最大主键。\n- 【行】记录堆，行记录存储区，分为有效记录和已删除记录\n- 未分配空间，页中未使用的空间\n- 页尾，占8字节，主键存页面的校验信息\n\n\n\n## mysql innodb 内存管理\n\n\n\ntodo\n\n\n\n\n\n\n\n## mysql innodb 事务实现原理\n\n\n\n### 事务特性：\n\n- A（atomicity 原子性）：全部成功，全部失败。不允许中间状态\n- I （isolation 隔离性）：并行事务不干扰\n- D（Durability 持久性）：提交事务后，数据不能丢\n- C（consistency 一致性）：凑数的\n\n\n\n### 并发问题：\n\n- 脏读（dirty read）： 读取到其他事务，没有提交的数据\n- 不可重复读（non-repeatable read）：查询同一条数据两次，有可能结果不一样\n- 幻读（phantom read）：select 出来的结果，可能是不存在的。<br>被其他事务插入后又删了，但中间存在期间，本事务恰好扫描到他了\n\n\n\n### 隔离级别：\n\n- Read Uncommitted（读取未提交内容）: 最低隔离级别，会读取到其他事务未提交的数据，\n\n  出现的问题：**脏读**\n\n- Read Committed（读取提交内容）: 事务过程中可以读取到其他事务已提交的数据，\n\n  出现的问：**不可重复读**\n\n- Repeatable Read（可重复读）: 每次读取相同结果集，不管其他事务是否提交，\n\n  出现的问题：**幻读**\n\n- Serializable （串行化）: 事务排队，隔离级别最高，性能最差;\n\n  出现的问题：**性能差**\n\n- 总结：\n\n  1. 一般使用 RR （可重复读），但写事务的时候，尽量避免 select 范围修改。<br>如果有范围修改，则思考一下，有没有可能出现幻读，如果出现了是否有影响。\n  2. 对于innodb，mvcc 并没有完全解决幻读问题。\n\n\n\n## innodb - mvcc\n\n\n\n### 两种查询模式\n\n- 当前读：永远查询某一行数据的最新的版本\n- 读快照：假设当前事务为A，根据事务A的 trx id（事务id）总能查到，A事务开启的那一刻， <br>数据的历史版本快照。这个快照是永远不会发生改变的。\n\n\n\n### 可见性逻辑\n\n- trx id 指的是事务id，是一个自增的序列。id 大，证明事务发生的时间靠后\n- innodb 维护一个事务活跃列表，即 select * from information_schema.INNODB_TRX 查出来的数据。\n- 可见性逻辑：\n  1. 事务开始的那一刻，查询所有当前事务。tmp_trx = [当前所有事务id]\n  2. tmp_trx_max = [时间轴最靠后的事务]，tmp_trx_min = [时间轴最靠前的事务]\n  3. 搜索出来的数据，需要满足2个条件其中之一即可。\n     - 事务id，比tmp_trx_min 的id要小（查出来的记录，在事务创建之前，就提交了）\n     - 不在事务活跃列表里面。（这个事务跑得快，已经先一步提交）\n  4. 如果不满足，则通过历史版本指针，找到该行数据的历史快照，正常使用即可\n\n\n\n## mysql 锁实现原理\n\n\n\n### **需要加锁的语句**\n\nselect for update 、update、delete ，其他语句不用加锁。\n\n\n\n### **分析锁的几个重要前提**\n\n- 索引：唯一索引 、 非唯一索引\n- 事务隔离级别：RC 、 RR\n\n\n\n### **根据颗粒度划分**\n\n- 行级，锁1行\n\n  - RC下，唯一索引，非唯一索引，使用该级别锁。\n\n    RR下，唯一索引，使用该级别\n\n  - 作用在索引上\n\n  - 聚簇索引 & 二级索引\n\n    \n\n- 间隙，锁一部分\n\n  - RR下，唯一索引，才使用这个锁类型\n\n  - 索引是有序的，新的记录插入，只能插入到GAP区间内；<br>GAP锁，是计算出两条记录之间的GAP；<br>一旦锁住这个GAP。就封住了新纪录插入的可能性；<br>就能保证2次当前读返回的数据是一致的。\n\n  - GAP锁的问题：查询where条件没有索引的时候，没法加GAP锁，很容易锁升级为表锁。\n\n    \n\n- 表级，锁1个表\n\n  - **没有命中索引的时候，有概率锁表，概率还不小。**\n  - 所以，事务中，加锁的语句中的where条件一定要加索引。\n  - 一般来说，分两个步骤实现修改\n    1. 范围查询，返回主键id\n    2. 根据主键id list 进行 update。\n\n  \n\n### **根据类型划分**\n\n- 共享锁\n  - 读锁，可以被多个事务获取，阻止其他事务对记录的修改\n- 排他锁\n  - 写锁，只能被1个事务获取，只允许获得锁的事务修改数据\n","slug":"mysql/innodb存储实现","published":1,"updated":"2021-07-30T14:15:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrs2dsdo0001hufy5izb8k1m","content":"<p>本章主要介绍 innodb 引擎的存储实现</p>\n<span id=\"more\"></span>\n<hr>\n<h2><span id=\"mysql-innodb-存储磁盘存储结构\"> mysql innodb 存储磁盘存储结构</span></h2>\n<p>innodb 的存储结构分为 5 级：<strong>表空间、段、簇、页、行。</strong></p>\n<h3><span id=\"簇b树聚簇索引\"> 簇（B+树，聚簇索引）</span></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731010412.png\" alt=\"img\"></p>\n<ul>\n<li>整个树有序，结构类似于跳表。</li>\n<li>分为非叶子节点、叶子节点</li>\n<li>非叶子节点，存主键+下一级指针。叶子节点存主键+数据</li>\n<li>行是有序的，根据主键排序，所以支持2分查找</li>\n<li>数据有冗余，有未分配空间，有已删除空间。所以数据主键要保递增，减少碎片化。</li>\n</ul>\n<h3><span id=\"页page\"> 页(Page)</span></h3>\n<img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210730224756.png\" alt=\"image-20210730224756023\" style=\"zoom:40%;\">\n<ul>\n<li>默认1页为16kb</li>\n<li>页头，本页基本信息</li>\n<li>虚记录，本页最小主键，本页最大主键。</li>\n<li>【行】记录堆，行记录存储区，分为有效记录和已删除记录</li>\n<li>未分配空间，页中未使用的空间</li>\n<li>页尾，占8字节，主键存页面的校验信息</li>\n</ul>\n<h2><span id=\"mysql-innodb-内存管理\"> mysql innodb 内存管理</span></h2>\n<p>todo</p>\n<h2><span id=\"mysql-innodb-事务实现原理\"> mysql innodb 事务实现原理</span></h2>\n<h3><span id=\"事务特性\"> 事务特性：</span></h3>\n<ul>\n<li>A（atomicity 原子性）：全部成功，全部失败。不允许中间状态</li>\n<li>I （isolation 隔离性）：并行事务不干扰</li>\n<li>D（Durability 持久性）：提交事务后，数据不能丢</li>\n<li>C（consistency 一致性）：凑数的</li>\n</ul>\n<h3><span id=\"并发问题\"> 并发问题：</span></h3>\n<ul>\n<li>脏读（dirty read）： 读取到其他事务，没有提交的数据</li>\n<li>不可重复读（non-repeatable read）：查询同一条数据两次，有可能结果不一样</li>\n<li>幻读（phantom read）：select 出来的结果，可能是不存在的。<br>被其他事务插入后又删了，但中间存在期间，本事务恰好扫描到他了</li>\n</ul>\n<h3><span id=\"隔离级别\"> 隔离级别：</span></h3>\n<ul>\n<li>\n<p>Read Uncommitted（读取未提交内容）: 最低隔离级别，会读取到其他事务未提交的数据，</p>\n<p>出现的问题：<strong>脏读</strong></p>\n</li>\n<li>\n<p>Read Committed（读取提交内容）: 事务过程中可以读取到其他事务已提交的数据，</p>\n<p>出现的问：<strong>不可重复读</strong></p>\n</li>\n<li>\n<p>Repeatable Read（可重复读）: 每次读取相同结果集，不管其他事务是否提交，</p>\n<p>出现的问题：<strong>幻读</strong></p>\n</li>\n<li>\n<p>Serializable （串行化）: 事务排队，隔离级别最高，性能最差;</p>\n<p>出现的问题：<strong>性能差</strong></p>\n</li>\n<li>\n<p>总结：</p>\n<ol>\n<li>一般使用 RR （可重复读），但写事务的时候，尽量避免 select 范围修改。<br>如果有范围修改，则思考一下，有没有可能出现幻读，如果出现了是否有影响。</li>\n<li>对于innodb，mvcc 并没有完全解决幻读问题。</li>\n</ol>\n</li>\n</ul>\n<h2><span id=\"innodb-mvcc\"> innodb - mvcc</span></h2>\n<h3><span id=\"两种查询模式\"> 两种查询模式</span></h3>\n<ul>\n<li>当前读：永远查询某一行数据的最新的版本</li>\n<li>读快照：假设当前事务为A，根据事务A的 trx id（事务id）总能查到，A事务开启的那一刻， <br>数据的历史版本快照。这个快照是永远不会发生改变的。</li>\n</ul>\n<h3><span id=\"可见性逻辑\"> 可见性逻辑</span></h3>\n<ul>\n<li>trx id 指的是事务id，是一个自增的序列。id 大，证明事务发生的时间靠后</li>\n<li>innodb 维护一个事务活跃列表，即 select * from information_schema.INNODB_TRX 查出来的数据。</li>\n<li>可见性逻辑：\n<ol>\n<li>事务开始的那一刻，查询所有当前事务。tmp_trx = [当前所有事务id]</li>\n<li>tmp_trx_max = [时间轴最靠后的事务]，tmp_trx_min = [时间轴最靠前的事务]</li>\n<li>搜索出来的数据，需要满足2个条件其中之一即可。\n<ul>\n<li>事务id，比tmp_trx_min 的id要小（查出来的记录，在事务创建之前，就提交了）</li>\n<li>不在事务活跃列表里面。（这个事务跑得快，已经先一步提交）</li>\n</ul>\n</li>\n<li>如果不满足，则通过历史版本指针，找到该行数据的历史快照，正常使用即可</li>\n</ol>\n</li>\n</ul>\n<h2><span id=\"mysql-锁实现原理\"> mysql 锁实现原理</span></h2>\n<h3><span id=\"需要加锁的语句\"> <strong>需要加锁的语句</strong></span></h3>\n<p>select for update 、update、delete ，其他语句不用加锁。</p>\n<h3><span id=\"分析锁的几个重要前提\"> <strong>分析锁的几个重要前提</strong></span></h3>\n<ul>\n<li>索引：唯一索引 、 非唯一索引</li>\n<li>事务隔离级别：RC 、 RR</li>\n</ul>\n<h3><span id=\"根据颗粒度划分\"> <strong>根据颗粒度划分</strong></span></h3>\n<ul>\n<li>\n<p>行级，锁1行</p>\n<ul>\n<li>\n<p>RC下，唯一索引，非唯一索引，使用该级别锁。</p>\n<p>RR下，唯一索引，使用该级别</p>\n</li>\n<li>\n<p>作用在索引上</p>\n</li>\n<li>\n<p>聚簇索引 &amp; 二级索引</p>\n</li>\n</ul>\n</li>\n<li>\n<p>间隙，锁一部分</p>\n<ul>\n<li>\n<p>RR下，唯一索引，才使用这个锁类型</p>\n</li>\n<li>\n<p>索引是有序的，新的记录插入，只能插入到GAP区间内；<br>GAP锁，是计算出两条记录之间的GAP；<br>一旦锁住这个GAP。就封住了新纪录插入的可能性；<br>就能保证2次当前读返回的数据是一致的。</p>\n</li>\n<li>\n<p>GAP锁的问题：查询where条件没有索引的时候，没法加GAP锁，很容易锁升级为表锁。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>表级，锁1个表</p>\n<ul>\n<li><strong>没有命中索引的时候，有概率锁表，概率还不小。</strong></li>\n<li>所以，事务中，加锁的语句中的where条件一定要加索引。</li>\n<li>一般来说，分两个步骤实现修改\n<ol>\n<li>范围查询，返回主键id</li>\n<li>根据主键id list 进行 update。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"根据类型划分\"> <strong>根据类型划分</strong></span></h3>\n<ul>\n<li>共享锁\n<ul>\n<li>读锁，可以被多个事务获取，阻止其他事务对记录的修改</li>\n</ul>\n</li>\n<li>排他锁\n<ul>\n<li>写锁，只能被1个事务获取，只允许获得锁的事务修改数据</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本章主要介绍 innodb 引擎的存储实现</p>","more":"<hr />\n<h2 id=\"mysql-innodb-存储磁盘存储结构\"><a class=\"markdownIt-Anchor\" href=\"#mysql-innodb-存储磁盘存储结构\"></a> mysql innodb 存储磁盘存储结构</h2>\n<p>innodb 的存储结构分为 5 级：<strong>表空间、段、簇、页、行。</strong></p>\n<h3 id=\"簇b树聚簇索引\"><a class=\"markdownIt-Anchor\" href=\"#簇b树聚簇索引\"></a> 簇（B+树，聚簇索引）</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731010412.png\" alt=\"img\" /></p>\n<ul>\n<li>整个树有序，结构类似于跳表。</li>\n<li>分为非叶子节点、叶子节点</li>\n<li>非叶子节点，存主键+下一级指针。叶子节点存主键+数据</li>\n<li>行是有序的，根据主键排序，所以支持2分查找</li>\n<li>数据有冗余，有未分配空间，有已删除空间。所以数据主键要保递增，减少碎片化。</li>\n</ul>\n<h3 id=\"页page\"><a class=\"markdownIt-Anchor\" href=\"#页page\"></a> 页(Page)</h3>\n<img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210730224756.png\" alt=\"image-20210730224756023\" style=\"zoom:40%;\" />\n<ul>\n<li>默认1页为16kb</li>\n<li>页头，本页基本信息</li>\n<li>虚记录，本页最小主键，本页最大主键。</li>\n<li>【行】记录堆，行记录存储区，分为有效记录和已删除记录</li>\n<li>未分配空间，页中未使用的空间</li>\n<li>页尾，占8字节，主键存页面的校验信息</li>\n</ul>\n<h2 id=\"mysql-innodb-内存管理\"><a class=\"markdownIt-Anchor\" href=\"#mysql-innodb-内存管理\"></a> mysql innodb 内存管理</h2>\n<p>todo</p>\n<h2 id=\"mysql-innodb-事务实现原理\"><a class=\"markdownIt-Anchor\" href=\"#mysql-innodb-事务实现原理\"></a> mysql innodb 事务实现原理</h2>\n<h3 id=\"事务特性\"><a class=\"markdownIt-Anchor\" href=\"#事务特性\"></a> 事务特性：</h3>\n<ul>\n<li>A（atomicity 原子性）：全部成功，全部失败。不允许中间状态</li>\n<li>I （isolation 隔离性）：并行事务不干扰</li>\n<li>D（Durability 持久性）：提交事务后，数据不能丢</li>\n<li>C（consistency 一致性）：凑数的</li>\n</ul>\n<h3 id=\"并发问题\"><a class=\"markdownIt-Anchor\" href=\"#并发问题\"></a> 并发问题：</h3>\n<ul>\n<li>脏读（dirty read）： 读取到其他事务，没有提交的数据</li>\n<li>不可重复读（non-repeatable read）：查询同一条数据两次，有可能结果不一样</li>\n<li>幻读（phantom read）：select 出来的结果，可能是不存在的。<br>被其他事务插入后又删了，但中间存在期间，本事务恰好扫描到他了</li>\n</ul>\n<h3 id=\"隔离级别\"><a class=\"markdownIt-Anchor\" href=\"#隔离级别\"></a> 隔离级别：</h3>\n<ul>\n<li>\n<p>Read Uncommitted（读取未提交内容）: 最低隔离级别，会读取到其他事务未提交的数据，</p>\n<p>出现的问题：<strong>脏读</strong></p>\n</li>\n<li>\n<p>Read Committed（读取提交内容）: 事务过程中可以读取到其他事务已提交的数据，</p>\n<p>出现的问：<strong>不可重复读</strong></p>\n</li>\n<li>\n<p>Repeatable Read（可重复读）: 每次读取相同结果集，不管其他事务是否提交，</p>\n<p>出现的问题：<strong>幻读</strong></p>\n</li>\n<li>\n<p>Serializable （串行化）: 事务排队，隔离级别最高，性能最差;</p>\n<p>出现的问题：<strong>性能差</strong></p>\n</li>\n<li>\n<p>总结：</p>\n<ol>\n<li>一般使用 RR （可重复读），但写事务的时候，尽量避免 select 范围修改。<br>如果有范围修改，则思考一下，有没有可能出现幻读，如果出现了是否有影响。</li>\n<li>对于innodb，mvcc 并没有完全解决幻读问题。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"innodb-mvcc\"><a class=\"markdownIt-Anchor\" href=\"#innodb-mvcc\"></a> innodb - mvcc</h2>\n<h3 id=\"两种查询模式\"><a class=\"markdownIt-Anchor\" href=\"#两种查询模式\"></a> 两种查询模式</h3>\n<ul>\n<li>当前读：永远查询某一行数据的最新的版本</li>\n<li>读快照：假设当前事务为A，根据事务A的 trx id（事务id）总能查到，A事务开启的那一刻， <br>数据的历史版本快照。这个快照是永远不会发生改变的。</li>\n</ul>\n<h3 id=\"可见性逻辑\"><a class=\"markdownIt-Anchor\" href=\"#可见性逻辑\"></a> 可见性逻辑</h3>\n<ul>\n<li>trx id 指的是事务id，是一个自增的序列。id 大，证明事务发生的时间靠后</li>\n<li>innodb 维护一个事务活跃列表，即 select * from information_schema.INNODB_TRX 查出来的数据。</li>\n<li>可见性逻辑：\n<ol>\n<li>事务开始的那一刻，查询所有当前事务。tmp_trx = [当前所有事务id]</li>\n<li>tmp_trx_max = [时间轴最靠后的事务]，tmp_trx_min = [时间轴最靠前的事务]</li>\n<li>搜索出来的数据，需要满足2个条件其中之一即可。\n<ul>\n<li>事务id，比tmp_trx_min 的id要小（查出来的记录，在事务创建之前，就提交了）</li>\n<li>不在事务活跃列表里面。（这个事务跑得快，已经先一步提交）</li>\n</ul>\n</li>\n<li>如果不满足，则通过历史版本指针，找到该行数据的历史快照，正常使用即可</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"mysql-锁实现原理\"><a class=\"markdownIt-Anchor\" href=\"#mysql-锁实现原理\"></a> mysql 锁实现原理</h2>\n<h3 id=\"需要加锁的语句\"><a class=\"markdownIt-Anchor\" href=\"#需要加锁的语句\"></a> <strong>需要加锁的语句</strong></h3>\n<p>select for update 、update、delete ，其他语句不用加锁。</p>\n<h3 id=\"分析锁的几个重要前提\"><a class=\"markdownIt-Anchor\" href=\"#分析锁的几个重要前提\"></a> <strong>分析锁的几个重要前提</strong></h3>\n<ul>\n<li>索引：唯一索引 、 非唯一索引</li>\n<li>事务隔离级别：RC 、 RR</li>\n</ul>\n<h3 id=\"根据颗粒度划分\"><a class=\"markdownIt-Anchor\" href=\"#根据颗粒度划分\"></a> <strong>根据颗粒度划分</strong></h3>\n<ul>\n<li>\n<p>行级，锁1行</p>\n<ul>\n<li>\n<p>RC下，唯一索引，非唯一索引，使用该级别锁。</p>\n<p>RR下，唯一索引，使用该级别</p>\n</li>\n<li>\n<p>作用在索引上</p>\n</li>\n<li>\n<p>聚簇索引 &amp; 二级索引</p>\n</li>\n</ul>\n</li>\n<li>\n<p>间隙，锁一部分</p>\n<ul>\n<li>\n<p>RR下，唯一索引，才使用这个锁类型</p>\n</li>\n<li>\n<p>索引是有序的，新的记录插入，只能插入到GAP区间内；<br>GAP锁，是计算出两条记录之间的GAP；<br>一旦锁住这个GAP。就封住了新纪录插入的可能性；<br>就能保证2次当前读返回的数据是一致的。</p>\n</li>\n<li>\n<p>GAP锁的问题：查询where条件没有索引的时候，没法加GAP锁，很容易锁升级为表锁。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>表级，锁1个表</p>\n<ul>\n<li><strong>没有命中索引的时候，有概率锁表，概率还不小。</strong></li>\n<li>所以，事务中，加锁的语句中的where条件一定要加索引。</li>\n<li>一般来说，分两个步骤实现修改\n<ol>\n<li>范围查询，返回主键id</li>\n<li>根据主键id list 进行 update。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"根据类型划分\"><a class=\"markdownIt-Anchor\" href=\"#根据类型划分\"></a> <strong>根据类型划分</strong></h3>\n<ul>\n<li>共享锁\n<ul>\n<li>读锁，可以被多个事务获取，阻止其他事务对记录的修改</li>\n</ul>\n</li>\n<li>排他锁\n<ul>\n<li>写锁，只能被1个事务获取，只允许获得锁的事务修改数据</li>\n</ul>\n</li>\n</ul>"},{"title":"innodb索引优化","toc":true,"hide":false,"date":"2021-07-31T06:34:09.000Z","sortn":20,"_content":"\n本章主要介绍 innodb 引擎的大量数据索引优化\n\n<!-- more -->\n\n------\n\n\n\n## 索引原理\n\n\n\n### 聚簇索引\n\n![img](https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731010412.png)\n\n- 数据存储在主键索引中 \n- 数据按主键顺序存储\n\n\n\n### 二级索引\n\n![image-20210731151934246](https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731151934.png)\n\n- 除了主键索引以外的所有，都是二级索引\n\n- 叶子中，存的是主键的值\n\n- 一次查询，需要经过2次的查询操作，2logN 复杂度。\n\n- 主键的大小，会影响索引的大小。\n\n- 对于叶子节点，存【主键值】，还是存【数据地址】的取舍：\n\n  innodb可能需要回表查询，即在聚簇索引中进一步查找对应的数据行。这样可以避免在行移动或者插入新数据时出现的页分裂问题。\n\n  MyISAM中无论是主键索引还是二级索引，索引的叶子节点存放的都是指向数据行的指针，保证可以通过索引进而查找到对应的数据行，只需要对索引进行一遍查找。但这样会存在页分裂问题。\n\n  \n\n### 联合索引\n\n![image-20210731153830652](https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731153830.png)\n\n- 一个索引只创造1课树\n- 假设有2列，就把量列拼接起来，(A:B) 形成一个长的组合索引\n- 先通过A查找，找到后再通过B查找\n- **总结：**\n  - 如果不是按照最左开始查找，则无法使用索引，比如本例无法直接通过B查找\n  - 如果是范围查找，则后面的列，无法使用索引。\n\n\n\n## 索引优化分析\n\n\n\n### 存储空间 （数据量与B+树的层高关系）\n\n- 每个 page 都有一个 level，leaf page 的 level 是 0，root page 的 level 取决于整个 B+Tree 的高度。\n- 因为页存储有 「空洞」 现象，所以不是非常固定的\n- 一般来说 当数据为理论值的 2/3 时， 树就开始加一层了。\n\n已知：\n\n- Int 类型主键，每页可以存 1203 个子节点指针。\n\n- bigint 类型主键，每页可以存 900 个子节点指针。\n\n- 对于最下面一层的叶子节点：\n\n  - 单行数据为 n byte ，每个page存 (16000  / n ) 条记录<br> 假如 1 行数据 300 byte，每个page 存 (16000  / n = 50）行数据。\n\n  \n\n**层高计算公式 ：**\n\n**总行数 = （每页指针数） ^（几层）* 每页行数** \n\n\n\n当主键为 int (4 byte) 类型时，极限值为\n\n| 高度     | 多少个<br/>索引页<br/>（非叶子） | 多少个<br/>数据页<br/>（叶子） | 每页能存<br>几个记录 | 得到的行数 | 数据大小大小 |\n| -------- | -------------------------------- | ------------------------------ | -------------------- | ---------- | ------------ |\n| 1（0+1） | 0                                | 1                              | 50                   | 50         | 16k          |\n| 2（1+1） | 1                                | 1203                           | 50                   | 6万        | 18MB         |\n| 3（2+1） | 1204                             | 1,447,209                      | 50                   | 7亿        | 22G          |\n| 4（3+1） | 1,447,209                        | 17亿                           | 50                   | 850亿      | 25T          |\n\n\n\n当主键为 bigint (8 byte) 类型时，极限值为\n\n| 高度     | 多少个<br/>索引页<br/>（非叶子） | 多少个<br/>数据页<br/>（叶子） | 每页能存<br/>几个记录 | 得到的行数 | 数据大小大小 |\n| -------- | -------------------------------- | ------------------------------ | --------------------- | ---------- | ------------ |\n| 1（0+1） | 0                                | 1                              | 50                    | 50         | 16k          |\n| 2（1+1） | 1                                | 928                            | 50                    | 46400      | 18MB         |\n| 3（2+1） | 928                              | 861,184                        | 50                    | 4000万     | 22G          |\n| 4（3+1） | 861,184                          | 8亿                            | 50                    | 40亿       | 25T          |\n\n参考：https://blog.jcole.us/2013/01/10/btree-index-structures-in-innodb/\n\n\n\n### 主键选择\n\n\n\n- 自增主键\n\n  - 顺序写入，效率高\n  - 每次查询都走2级索引\n\n- 随机主键\n\n  - 节点分裂，数据移动，效率比较低\n  - 有可能查询走2级索引\n\n- 业务主键，比如订单号，用户id，商品id，等\n\n  - 需要保证值是递增，一般情况下使用雪花算法即可\n  - 写入，查询磁盘利用率都高，可以使用一级索引\n\n- 联合主键\n\n  - 影响索引列大小，不容易维护，不建议使用\n\n  \n\n### 联合索引使用\n\n\n\n- 按索引区分度排序，区分度越高的放在前面。<br>比如主键，时间，外键，手机号，身份证号等。<br>索引区分度低的有，类型，状态等\n- 覆盖索引，我们要查询的数据，正好在索引中，那么就不用回表了<br>比如一个索引 （id,phone,addr），在执行 `select phone，addr from user where id = 8;` 时<br>可以不用回表，直接返回结果集，又称三星索引。 \n- 索引下推，mysql 5.6推出的性能改进，减少回表的次数，本该如此，不必细聊。\n\n\n\n### 索引避坑指南\n\n\n\n- 设置合理的长度\n\n  - 前10个字符建索引就行，如果前10个字符都体现不出区分度，那么这个数据本身也有点问题<br>\n\n  - 解决方案，对于区分度不大的列，再建立一个 hash 值列，通过索引（hash(addr),addr）查找就快了\n\n    \n\n- 索引失效的情况\n\n  - A = XX or B=xx 索引会失效么？<br>不会失效，<br> mysql 5.1 引入了Index merge 技术，已经可以同时对 1个表使用多个索引分别扫描，1次出结果\n\n    \n\n  - 在联合索引中使用第二列，比如（phone，id_card_num）<br>使用`select * from user where id_card_num= 3701xxxxxx` 就不走索引\n\n  \n\n  - 隐式类型转换，不走索引<br>\n\n    ```mysql\n    -- type moblie Long\n    -- 就不走索引\n    select * from user where moblie= '186123232222'\n    ```\n\n    类型转换的时候，不使用索引。<br>上线前跑一遍查询计划，看看有没有这事，这个事很容易发生，但不容易发现。\n\n    \n\n  -  索引列包含计算，不走索引\n\n    ```mysql\n    select * from user where age-20 = 30;\n    -- 没有人会这么干，如果有人这么干，必须请大家吃饭\n    ```\n\n    \n\n  - 索引区分度低，有时候也不走索引<br>当索引的区分度过低，比如 sex ，if_old , sell_status 列，使用sql语句<br>`select * from user where sex=1 and phone=18678922342`<br>通过 sex 索引查询，要频繁的回表，这时候使用索引查询，还不如直接使用全表扫描更快。<br>\n\n    \n\n  - 查询条件，覆盖所有的索引值。也不会走本列索引<br>比如，有个 age 字段，使用sql语句，`select * from user where age < 200`<br>的时候，因为查询语句中的条件已经全部覆盖了整个数据集。<br>所以mysql也不会使用该索引。\n\n\n\n### column类型最佳实践\n\n- 数据库字符集使用 utf8mb4\n- VARCHAR 按实际需要分配长度 ，255以上，需要更多的而空间描述长度，浪费空间\n- 文本字段建议使用 VARCHAR\n- 时间 字段使用 long，兼容性好，要不然迁移的时候，time类型有时区概念，容易出现bug\n- bool字段使用tinyint\n- 枚举字段建议使用 tinyint\n- 交易金额 建议使用 long，存成分已足够，￥1.01存成 101\n- 禁止使用 “%” 前导的查询\n- 禁止在索引列进行数学运算，会导致索引失效\n\n\n\n### 索引类型最佳实践\n\n- 表必须有主键，建议使用业务主键，使用雪花算法保证自增。\n- 单张表中索引数量不超过5个\n- 单个索引字段数不超过5个\n- 字符串索引使用前缀索引，前缀长度不超过10个字符\n\n\n\n","source":"_posts/mysql/innodb索引优化.md","raw":"---\ntitle: 'innodb索引优化'\ntoc: true\ncategories:\n  - 数据库\n  - mysql\ntags:\n  - innodb\nhide: false\ndate: 2021-07-31 14:34:09\nsortn: 20\n---\n\n本章主要介绍 innodb 引擎的大量数据索引优化\n\n<!-- more -->\n\n------\n\n\n\n## 索引原理\n\n\n\n### 聚簇索引\n\n![img](https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731010412.png)\n\n- 数据存储在主键索引中 \n- 数据按主键顺序存储\n\n\n\n### 二级索引\n\n![image-20210731151934246](https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731151934.png)\n\n- 除了主键索引以外的所有，都是二级索引\n\n- 叶子中，存的是主键的值\n\n- 一次查询，需要经过2次的查询操作，2logN 复杂度。\n\n- 主键的大小，会影响索引的大小。\n\n- 对于叶子节点，存【主键值】，还是存【数据地址】的取舍：\n\n  innodb可能需要回表查询，即在聚簇索引中进一步查找对应的数据行。这样可以避免在行移动或者插入新数据时出现的页分裂问题。\n\n  MyISAM中无论是主键索引还是二级索引，索引的叶子节点存放的都是指向数据行的指针，保证可以通过索引进而查找到对应的数据行，只需要对索引进行一遍查找。但这样会存在页分裂问题。\n\n  \n\n### 联合索引\n\n![image-20210731153830652](https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731153830.png)\n\n- 一个索引只创造1课树\n- 假设有2列，就把量列拼接起来，(A:B) 形成一个长的组合索引\n- 先通过A查找，找到后再通过B查找\n- **总结：**\n  - 如果不是按照最左开始查找，则无法使用索引，比如本例无法直接通过B查找\n  - 如果是范围查找，则后面的列，无法使用索引。\n\n\n\n## 索引优化分析\n\n\n\n### 存储空间 （数据量与B+树的层高关系）\n\n- 每个 page 都有一个 level，leaf page 的 level 是 0，root page 的 level 取决于整个 B+Tree 的高度。\n- 因为页存储有 「空洞」 现象，所以不是非常固定的\n- 一般来说 当数据为理论值的 2/3 时， 树就开始加一层了。\n\n已知：\n\n- Int 类型主键，每页可以存 1203 个子节点指针。\n\n- bigint 类型主键，每页可以存 900 个子节点指针。\n\n- 对于最下面一层的叶子节点：\n\n  - 单行数据为 n byte ，每个page存 (16000  / n ) 条记录<br> 假如 1 行数据 300 byte，每个page 存 (16000  / n = 50）行数据。\n\n  \n\n**层高计算公式 ：**\n\n**总行数 = （每页指针数） ^（几层）* 每页行数** \n\n\n\n当主键为 int (4 byte) 类型时，极限值为\n\n| 高度     | 多少个<br/>索引页<br/>（非叶子） | 多少个<br/>数据页<br/>（叶子） | 每页能存<br>几个记录 | 得到的行数 | 数据大小大小 |\n| -------- | -------------------------------- | ------------------------------ | -------------------- | ---------- | ------------ |\n| 1（0+1） | 0                                | 1                              | 50                   | 50         | 16k          |\n| 2（1+1） | 1                                | 1203                           | 50                   | 6万        | 18MB         |\n| 3（2+1） | 1204                             | 1,447,209                      | 50                   | 7亿        | 22G          |\n| 4（3+1） | 1,447,209                        | 17亿                           | 50                   | 850亿      | 25T          |\n\n\n\n当主键为 bigint (8 byte) 类型时，极限值为\n\n| 高度     | 多少个<br/>索引页<br/>（非叶子） | 多少个<br/>数据页<br/>（叶子） | 每页能存<br/>几个记录 | 得到的行数 | 数据大小大小 |\n| -------- | -------------------------------- | ------------------------------ | --------------------- | ---------- | ------------ |\n| 1（0+1） | 0                                | 1                              | 50                    | 50         | 16k          |\n| 2（1+1） | 1                                | 928                            | 50                    | 46400      | 18MB         |\n| 3（2+1） | 928                              | 861,184                        | 50                    | 4000万     | 22G          |\n| 4（3+1） | 861,184                          | 8亿                            | 50                    | 40亿       | 25T          |\n\n参考：https://blog.jcole.us/2013/01/10/btree-index-structures-in-innodb/\n\n\n\n### 主键选择\n\n\n\n- 自增主键\n\n  - 顺序写入，效率高\n  - 每次查询都走2级索引\n\n- 随机主键\n\n  - 节点分裂，数据移动，效率比较低\n  - 有可能查询走2级索引\n\n- 业务主键，比如订单号，用户id，商品id，等\n\n  - 需要保证值是递增，一般情况下使用雪花算法即可\n  - 写入，查询磁盘利用率都高，可以使用一级索引\n\n- 联合主键\n\n  - 影响索引列大小，不容易维护，不建议使用\n\n  \n\n### 联合索引使用\n\n\n\n- 按索引区分度排序，区分度越高的放在前面。<br>比如主键，时间，外键，手机号，身份证号等。<br>索引区分度低的有，类型，状态等\n- 覆盖索引，我们要查询的数据，正好在索引中，那么就不用回表了<br>比如一个索引 （id,phone,addr），在执行 `select phone，addr from user where id = 8;` 时<br>可以不用回表，直接返回结果集，又称三星索引。 \n- 索引下推，mysql 5.6推出的性能改进，减少回表的次数，本该如此，不必细聊。\n\n\n\n### 索引避坑指南\n\n\n\n- 设置合理的长度\n\n  - 前10个字符建索引就行，如果前10个字符都体现不出区分度，那么这个数据本身也有点问题<br>\n\n  - 解决方案，对于区分度不大的列，再建立一个 hash 值列，通过索引（hash(addr),addr）查找就快了\n\n    \n\n- 索引失效的情况\n\n  - A = XX or B=xx 索引会失效么？<br>不会失效，<br> mysql 5.1 引入了Index merge 技术，已经可以同时对 1个表使用多个索引分别扫描，1次出结果\n\n    \n\n  - 在联合索引中使用第二列，比如（phone，id_card_num）<br>使用`select * from user where id_card_num= 3701xxxxxx` 就不走索引\n\n  \n\n  - 隐式类型转换，不走索引<br>\n\n    ```mysql\n    -- type moblie Long\n    -- 就不走索引\n    select * from user where moblie= '186123232222'\n    ```\n\n    类型转换的时候，不使用索引。<br>上线前跑一遍查询计划，看看有没有这事，这个事很容易发生，但不容易发现。\n\n    \n\n  -  索引列包含计算，不走索引\n\n    ```mysql\n    select * from user where age-20 = 30;\n    -- 没有人会这么干，如果有人这么干，必须请大家吃饭\n    ```\n\n    \n\n  - 索引区分度低，有时候也不走索引<br>当索引的区分度过低，比如 sex ，if_old , sell_status 列，使用sql语句<br>`select * from user where sex=1 and phone=18678922342`<br>通过 sex 索引查询，要频繁的回表，这时候使用索引查询，还不如直接使用全表扫描更快。<br>\n\n    \n\n  - 查询条件，覆盖所有的索引值。也不会走本列索引<br>比如，有个 age 字段，使用sql语句，`select * from user where age < 200`<br>的时候，因为查询语句中的条件已经全部覆盖了整个数据集。<br>所以mysql也不会使用该索引。\n\n\n\n### column类型最佳实践\n\n- 数据库字符集使用 utf8mb4\n- VARCHAR 按实际需要分配长度 ，255以上，需要更多的而空间描述长度，浪费空间\n- 文本字段建议使用 VARCHAR\n- 时间 字段使用 long，兼容性好，要不然迁移的时候，time类型有时区概念，容易出现bug\n- bool字段使用tinyint\n- 枚举字段建议使用 tinyint\n- 交易金额 建议使用 long，存成分已足够，￥1.01存成 101\n- 禁止使用 “%” 前导的查询\n- 禁止在索引列进行数学运算，会导致索引失效\n\n\n\n### 索引类型最佳实践\n\n- 表必须有主键，建议使用业务主键，使用雪花算法保证自增。\n- 单张表中索引数量不超过5个\n- 单个索引字段数不超过5个\n- 字符串索引使用前缀索引，前缀长度不超过10个字符\n\n\n\n","slug":"mysql/innodb索引优化","published":1,"updated":"2021-07-31T06:34:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrs2dsdq0002hufy81l77epo","content":"<p>本章主要介绍 innodb 引擎的大量数据索引优化</p>\n<span id=\"more\"></span>\n<hr>\n<h2><span id=\"索引原理\"> 索引原理</span></h2>\n<h3><span id=\"聚簇索引\"> 聚簇索引</span></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731010412.png\" alt=\"img\"></p>\n<ul>\n<li>数据存储在主键索引中</li>\n<li>数据按主键顺序存储</li>\n</ul>\n<h3><span id=\"二级索引\"> 二级索引</span></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731151934.png\" alt=\"image-20210731151934246\"></p>\n<ul>\n<li>\n<p>除了主键索引以外的所有，都是二级索引</p>\n</li>\n<li>\n<p>叶子中，存的是主键的值</p>\n</li>\n<li>\n<p>一次查询，需要经过2次的查询操作，2logN 复杂度。</p>\n</li>\n<li>\n<p>主键的大小，会影响索引的大小。</p>\n</li>\n<li>\n<p>对于叶子节点，存【主键值】，还是存【数据地址】的取舍：</p>\n<p>innodb可能需要回表查询，即在聚簇索引中进一步查找对应的数据行。这样可以避免在行移动或者插入新数据时出现的页分裂问题。</p>\n<p>MyISAM中无论是主键索引还是二级索引，索引的叶子节点存放的都是指向数据行的指针，保证可以通过索引进而查找到对应的数据行，只需要对索引进行一遍查找。但这样会存在页分裂问题。</p>\n</li>\n</ul>\n<h3><span id=\"联合索引\"> 联合索引</span></h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731153830.png\" alt=\"image-20210731153830652\"></p>\n<ul>\n<li>一个索引只创造1课树</li>\n<li>假设有2列，就把量列拼接起来，(A:B) 形成一个长的组合索引</li>\n<li>先通过A查找，找到后再通过B查找</li>\n<li><strong>总结：</strong>\n<ul>\n<li>如果不是按照最左开始查找，则无法使用索引，比如本例无法直接通过B查找</li>\n<li>如果是范围查找，则后面的列，无法使用索引。</li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"索引优化分析\"> 索引优化分析</span></h2>\n<h3><span id=\"存储空间-数据量与b树的层高关系\"> 存储空间 （数据量与B+树的层高关系）</span></h3>\n<ul>\n<li>每个 page 都有一个 level，leaf page 的 level 是 0，root page 的 level 取决于整个 B+Tree 的高度。</li>\n<li>因为页存储有 「空洞」 现象，所以不是非常固定的</li>\n<li>一般来说 当数据为理论值的 2/3 时， 树就开始加一层了。</li>\n</ul>\n<p>已知：</p>\n<ul>\n<li>\n<p>Int 类型主键，每页可以存 1203 个子节点指针。</p>\n</li>\n<li>\n<p>bigint 类型主键，每页可以存 900 个子节点指针。</p>\n</li>\n<li>\n<p>对于最下面一层的叶子节点：</p>\n<ul>\n<li>单行数据为 n byte ，每个page存 (16000  / n ) 条记录<br> 假如 1 行数据 300 byte，每个page 存 (16000  / n = 50）行数据。</li>\n</ul>\n</li>\n</ul>\n<p><strong>层高计算公式 ：</strong></p>\n<p><em><em>总行数 = （每页指针数） ^（几层）</em> 每页行数</em>*</p>\n<p>当主键为 int (4 byte) 类型时，极限值为</p>\n<table>\n<thead>\n<tr>\n<th>高度</th>\n<th>多少个<br>索引页<br>（非叶子）</th>\n<th>多少个<br>数据页<br>（叶子）</th>\n<th>每页能存<br>几个记录</th>\n<th>得到的行数</th>\n<th>数据大小大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1（0+1）</td>\n<td>0</td>\n<td>1</td>\n<td>50</td>\n<td>50</td>\n<td>16k</td>\n</tr>\n<tr>\n<td>2（1+1）</td>\n<td>1</td>\n<td>1203</td>\n<td>50</td>\n<td>6万</td>\n<td>18MB</td>\n</tr>\n<tr>\n<td>3（2+1）</td>\n<td>1204</td>\n<td>1,447,209</td>\n<td>50</td>\n<td>7亿</td>\n<td>22G</td>\n</tr>\n<tr>\n<td>4（3+1）</td>\n<td>1,447,209</td>\n<td>17亿</td>\n<td>50</td>\n<td>850亿</td>\n<td>25T</td>\n</tr>\n</tbody>\n</table>\n<p>当主键为 bigint (8 byte) 类型时，极限值为</p>\n<table>\n<thead>\n<tr>\n<th>高度</th>\n<th>多少个<br>索引页<br>（非叶子）</th>\n<th>多少个<br>数据页<br>（叶子）</th>\n<th>每页能存<br>几个记录</th>\n<th>得到的行数</th>\n<th>数据大小大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1（0+1）</td>\n<td>0</td>\n<td>1</td>\n<td>50</td>\n<td>50</td>\n<td>16k</td>\n</tr>\n<tr>\n<td>2（1+1）</td>\n<td>1</td>\n<td>928</td>\n<td>50</td>\n<td>46400</td>\n<td>18MB</td>\n</tr>\n<tr>\n<td>3（2+1）</td>\n<td>928</td>\n<td>861,184</td>\n<td>50</td>\n<td>4000万</td>\n<td>22G</td>\n</tr>\n<tr>\n<td>4（3+1）</td>\n<td>861,184</td>\n<td>8亿</td>\n<td>50</td>\n<td>40亿</td>\n<td>25T</td>\n</tr>\n</tbody>\n</table>\n<p>参考：<a href=\"https://blog.jcole.us/2013/01/10/btree-index-structures-in-innodb/\">https://blog.jcole.us/2013/01/10/btree-index-structures-in-innodb/</a></p>\n<h3><span id=\"主键选择\"> 主键选择</span></h3>\n<ul>\n<li>\n<p>自增主键</p>\n<ul>\n<li>顺序写入，效率高</li>\n<li>每次查询都走2级索引</li>\n</ul>\n</li>\n<li>\n<p>随机主键</p>\n<ul>\n<li>节点分裂，数据移动，效率比较低</li>\n<li>有可能查询走2级索引</li>\n</ul>\n</li>\n<li>\n<p>业务主键，比如订单号，用户id，商品id，等</p>\n<ul>\n<li>需要保证值是递增，一般情况下使用雪花算法即可</li>\n<li>写入，查询磁盘利用率都高，可以使用一级索引</li>\n</ul>\n</li>\n<li>\n<p>联合主键</p>\n<ul>\n<li>影响索引列大小，不容易维护，不建议使用</li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"联合索引使用\"> 联合索引使用</span></h3>\n<ul>\n<li>按索引区分度排序，区分度越高的放在前面。<br>比如主键，时间，外键，手机号，身份证号等。<br>索引区分度低的有，类型，状态等</li>\n<li>覆盖索引，我们要查询的数据，正好在索引中，那么就不用回表了<br>比如一个索引 （id,phone,addr），在执行 <code>select phone，addr from user where id = 8;</code> 时<br>可以不用回表，直接返回结果集，又称三星索引。</li>\n<li>索引下推，mysql 5.6推出的性能改进，减少回表的次数，本该如此，不必细聊。</li>\n</ul>\n<h3><span id=\"索引避坑指南\"> 索引避坑指南</span></h3>\n<ul>\n<li>\n<p>设置合理的长度</p>\n<ul>\n<li>\n<p>前10个字符建索引就行，如果前10个字符都体现不出区分度，那么这个数据本身也有点问题<br></p>\n</li>\n<li>\n<p>解决方案，对于区分度不大的列，再建立一个 hash 值列，通过索引（hash(addr),addr）查找就快了</p>\n</li>\n</ul>\n</li>\n<li>\n<p>索引失效的情况</p>\n<ul>\n<li>\n<p>A = XX or B=xx 索引会失效么？<br>不会失效，<br> mysql 5.1 引入了Index merge 技术，已经可以同时对 1个表使用多个索引分别扫描，1次出结果</p>\n</li>\n<li>\n<p>在联合索引中使用第二列，比如（phone，id_card_num）<br>使用<code>select * from user where id_card_num= 3701xxxxxx</code> 就不走索引</p>\n</li>\n<li>\n<p>隐式类型转换，不走索引<br></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs mysql\">-- type moblie Long<br>-- 就不走索引<br>select * from user where moblie= &#x27;186123232222&#x27;<br></code></pre></div></td></tr></table></figure>\n<p>类型转换的时候，不使用索引。<br>上线前跑一遍查询计划，看看有没有这事，这个事很容易发生，但不容易发现。</p>\n</li>\n<li>\n<p>索引列包含计算，不走索引</p>\n</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs mysql\">select * from user where age-20 = 30;<br>-- 没有人会这么干，如果有人这么干，必须请大家吃饭<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>\n<p>索引区分度低，有时候也不走索引<br>当索引的区分度过低，比如 sex ，if_old , sell_status 列，使用sql语句<br><code>select * from user where sex=1 and phone=18678922342</code><br>通过 sex 索引查询，要频繁的回表，这时候使用索引查询，还不如直接使用全表扫描更快。<br></p>\n</li>\n<li>\n<p>查询条件，覆盖所有的索引值。也不会走本列索引<br>比如，有个 age 字段，使用sql语句，<code>select * from user where age &lt; 200</code><br>的时候，因为查询语句中的条件已经全部覆盖了整个数据集。<br>所以mysql也不会使用该索引。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"column类型最佳实践\"> column类型最佳实践</span></h3>\n<ul>\n<li>数据库字符集使用 utf8mb4</li>\n<li>VARCHAR 按实际需要分配长度 ，255以上，需要更多的而空间描述长度，浪费空间</li>\n<li>文本字段建议使用 VARCHAR</li>\n<li>时间 字段使用 long，兼容性好，要不然迁移的时候，time类型有时区概念，容易出现bug</li>\n<li>bool字段使用tinyint</li>\n<li>枚举字段建议使用 tinyint</li>\n<li>交易金额 建议使用 long，存成分已足够，￥1.01存成 101</li>\n<li>禁止使用 “%” 前导的查询</li>\n<li>禁止在索引列进行数学运算，会导致索引失效</li>\n</ul>\n<h3><span id=\"索引类型最佳实践\"> 索引类型最佳实践</span></h3>\n<ul>\n<li>表必须有主键，建议使用业务主键，使用雪花算法保证自增。</li>\n<li>单张表中索引数量不超过5个</li>\n<li>单个索引字段数不超过5个</li>\n<li>字符串索引使用前缀索引，前缀长度不超过10个字符</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本章主要介绍 innodb 引擎的大量数据索引优化</p>","more":"<hr />\n<h2 id=\"索引原理\"><a class=\"markdownIt-Anchor\" href=\"#索引原理\"></a> 索引原理</h2>\n<h3 id=\"聚簇索引\"><a class=\"markdownIt-Anchor\" href=\"#聚簇索引\"></a> 聚簇索引</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731010412.png\" alt=\"img\" /></p>\n<ul>\n<li>数据存储在主键索引中</li>\n<li>数据按主键顺序存储</li>\n</ul>\n<h3 id=\"二级索引\"><a class=\"markdownIt-Anchor\" href=\"#二级索引\"></a> 二级索引</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731151934.png\" alt=\"image-20210731151934246\" /></p>\n<ul>\n<li>\n<p>除了主键索引以外的所有，都是二级索引</p>\n</li>\n<li>\n<p>叶子中，存的是主键的值</p>\n</li>\n<li>\n<p>一次查询，需要经过2次的查询操作，2logN 复杂度。</p>\n</li>\n<li>\n<p>主键的大小，会影响索引的大小。</p>\n</li>\n<li>\n<p>对于叶子节点，存【主键值】，还是存【数据地址】的取舍：</p>\n<p>innodb可能需要回表查询，即在聚簇索引中进一步查找对应的数据行。这样可以避免在行移动或者插入新数据时出现的页分裂问题。</p>\n<p>MyISAM中无论是主键索引还是二级索引，索引的叶子节点存放的都是指向数据行的指针，保证可以通过索引进而查找到对应的数据行，只需要对索引进行一遍查找。但这样会存在页分裂问题。</p>\n</li>\n</ul>\n<h3 id=\"联合索引\"><a class=\"markdownIt-Anchor\" href=\"#联合索引\"></a> 联合索引</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731153830.png\" alt=\"image-20210731153830652\" /></p>\n<ul>\n<li>一个索引只创造1课树</li>\n<li>假设有2列，就把量列拼接起来，(A:B) 形成一个长的组合索引</li>\n<li>先通过A查找，找到后再通过B查找</li>\n<li><strong>总结：</strong>\n<ul>\n<li>如果不是按照最左开始查找，则无法使用索引，比如本例无法直接通过B查找</li>\n<li>如果是范围查找，则后面的列，无法使用索引。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"索引优化分析\"><a class=\"markdownIt-Anchor\" href=\"#索引优化分析\"></a> 索引优化分析</h2>\n<h3 id=\"存储空间-数据量与b树的层高关系\"><a class=\"markdownIt-Anchor\" href=\"#存储空间-数据量与b树的层高关系\"></a> 存储空间 （数据量与B+树的层高关系）</h3>\n<ul>\n<li>每个 page 都有一个 level，leaf page 的 level 是 0，root page 的 level 取决于整个 B+Tree 的高度。</li>\n<li>因为页存储有 「空洞」 现象，所以不是非常固定的</li>\n<li>一般来说 当数据为理论值的 2/3 时， 树就开始加一层了。</li>\n</ul>\n<p>已知：</p>\n<ul>\n<li>\n<p>Int 类型主键，每页可以存 1203 个子节点指针。</p>\n</li>\n<li>\n<p>bigint 类型主键，每页可以存 900 个子节点指针。</p>\n</li>\n<li>\n<p>对于最下面一层的叶子节点：</p>\n<ul>\n<li>单行数据为 n byte ，每个page存 (16000  / n ) 条记录<br> 假如 1 行数据 300 byte，每个page 存 (16000  / n = 50）行数据。</li>\n</ul>\n</li>\n</ul>\n<p><strong>层高计算公式 ：</strong></p>\n<p><em><em>总行数 = （每页指针数） ^（几层）</em> 每页行数</em>*</p>\n<p>当主键为 int (4 byte) 类型时，极限值为</p>\n<table>\n<thead>\n<tr>\n<th>高度</th>\n<th>多少个<br/>索引页<br/>（非叶子）</th>\n<th>多少个<br/>数据页<br/>（叶子）</th>\n<th>每页能存<br>几个记录</th>\n<th>得到的行数</th>\n<th>数据大小大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1（0+1）</td>\n<td>0</td>\n<td>1</td>\n<td>50</td>\n<td>50</td>\n<td>16k</td>\n</tr>\n<tr>\n<td>2（1+1）</td>\n<td>1</td>\n<td>1203</td>\n<td>50</td>\n<td>6万</td>\n<td>18MB</td>\n</tr>\n<tr>\n<td>3（2+1）</td>\n<td>1204</td>\n<td>1,447,209</td>\n<td>50</td>\n<td>7亿</td>\n<td>22G</td>\n</tr>\n<tr>\n<td>4（3+1）</td>\n<td>1,447,209</td>\n<td>17亿</td>\n<td>50</td>\n<td>850亿</td>\n<td>25T</td>\n</tr>\n</tbody>\n</table>\n<p>当主键为 bigint (8 byte) 类型时，极限值为</p>\n<table>\n<thead>\n<tr>\n<th>高度</th>\n<th>多少个<br/>索引页<br/>（非叶子）</th>\n<th>多少个<br/>数据页<br/>（叶子）</th>\n<th>每页能存<br/>几个记录</th>\n<th>得到的行数</th>\n<th>数据大小大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1（0+1）</td>\n<td>0</td>\n<td>1</td>\n<td>50</td>\n<td>50</td>\n<td>16k</td>\n</tr>\n<tr>\n<td>2（1+1）</td>\n<td>1</td>\n<td>928</td>\n<td>50</td>\n<td>46400</td>\n<td>18MB</td>\n</tr>\n<tr>\n<td>3（2+1）</td>\n<td>928</td>\n<td>861,184</td>\n<td>50</td>\n<td>4000万</td>\n<td>22G</td>\n</tr>\n<tr>\n<td>4（3+1）</td>\n<td>861,184</td>\n<td>8亿</td>\n<td>50</td>\n<td>40亿</td>\n<td>25T</td>\n</tr>\n</tbody>\n</table>\n<p>参考：<a href=\"https://blog.jcole.us/2013/01/10/btree-index-structures-in-innodb/\">https://blog.jcole.us/2013/01/10/btree-index-structures-in-innodb/</a></p>\n<h3 id=\"主键选择\"><a class=\"markdownIt-Anchor\" href=\"#主键选择\"></a> 主键选择</h3>\n<ul>\n<li>\n<p>自增主键</p>\n<ul>\n<li>顺序写入，效率高</li>\n<li>每次查询都走2级索引</li>\n</ul>\n</li>\n<li>\n<p>随机主键</p>\n<ul>\n<li>节点分裂，数据移动，效率比较低</li>\n<li>有可能查询走2级索引</li>\n</ul>\n</li>\n<li>\n<p>业务主键，比如订单号，用户id，商品id，等</p>\n<ul>\n<li>需要保证值是递增，一般情况下使用雪花算法即可</li>\n<li>写入，查询磁盘利用率都高，可以使用一级索引</li>\n</ul>\n</li>\n<li>\n<p>联合主键</p>\n<ul>\n<li>影响索引列大小，不容易维护，不建议使用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"联合索引使用\"><a class=\"markdownIt-Anchor\" href=\"#联合索引使用\"></a> 联合索引使用</h3>\n<ul>\n<li>按索引区分度排序，区分度越高的放在前面。<br>比如主键，时间，外键，手机号，身份证号等。<br>索引区分度低的有，类型，状态等</li>\n<li>覆盖索引，我们要查询的数据，正好在索引中，那么就不用回表了<br>比如一个索引 （id,phone,addr），在执行 <code>select phone，addr from user where id = 8;</code> 时<br>可以不用回表，直接返回结果集，又称三星索引。</li>\n<li>索引下推，mysql 5.6推出的性能改进，减少回表的次数，本该如此，不必细聊。</li>\n</ul>\n<h3 id=\"索引避坑指南\"><a class=\"markdownIt-Anchor\" href=\"#索引避坑指南\"></a> 索引避坑指南</h3>\n<ul>\n<li>\n<p>设置合理的长度</p>\n<ul>\n<li>\n<p>前10个字符建索引就行，如果前10个字符都体现不出区分度，那么这个数据本身也有点问题<br></p>\n</li>\n<li>\n<p>解决方案，对于区分度不大的列，再建立一个 hash 值列，通过索引（hash(addr),addr）查找就快了</p>\n</li>\n</ul>\n</li>\n<li>\n<p>索引失效的情况</p>\n<ul>\n<li>\n<p>A = XX or B=xx 索引会失效么？<br>不会失效，<br> mysql 5.1 引入了Index merge 技术，已经可以同时对 1个表使用多个索引分别扫描，1次出结果</p>\n</li>\n<li>\n<p>在联合索引中使用第二列，比如（phone，id_card_num）<br>使用<code>select * from user where id_card_num= 3701xxxxxx</code> 就不走索引</p>\n</li>\n<li>\n<p>隐式类型转换，不走索引<br></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">-- type moblie Long<br>-- 就不走索引<br>select * from user where moblie= &#x27;186123232222&#x27;<br></code></pre></td></tr></table></figure>\n<p>类型转换的时候，不使用索引。<br>上线前跑一遍查询计划，看看有没有这事，这个事很容易发生，但不容易发现。</p>\n</li>\n<li>\n<p>索引列包含计算，不走索引</p>\n</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from user where age-20 = 30;<br>-- 没有人会这么干，如果有人这么干，必须请大家吃饭<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>索引区分度低，有时候也不走索引<br>当索引的区分度过低，比如 sex ，if_old , sell_status 列，使用sql语句<br><code>select * from user where sex=1 and phone=18678922342</code><br>通过 sex 索引查询，要频繁的回表，这时候使用索引查询，还不如直接使用全表扫描更快。<br></p>\n</li>\n<li>\n<p>查询条件，覆盖所有的索引值。也不会走本列索引<br>比如，有个 age 字段，使用sql语句，<code>select * from user where age &lt; 200</code><br>的时候，因为查询语句中的条件已经全部覆盖了整个数据集。<br>所以mysql也不会使用该索引。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"column类型最佳实践\"><a class=\"markdownIt-Anchor\" href=\"#column类型最佳实践\"></a> column类型最佳实践</h3>\n<ul>\n<li>数据库字符集使用 utf8mb4</li>\n<li>VARCHAR 按实际需要分配长度 ，255以上，需要更多的而空间描述长度，浪费空间</li>\n<li>文本字段建议使用 VARCHAR</li>\n<li>时间 字段使用 long，兼容性好，要不然迁移的时候，time类型有时区概念，容易出现bug</li>\n<li>bool字段使用tinyint</li>\n<li>枚举字段建议使用 tinyint</li>\n<li>交易金额 建议使用 long，存成分已足够，￥1.01存成 101</li>\n<li>禁止使用 “%” 前导的查询</li>\n<li>禁止在索引列进行数学运算，会导致索引失效</li>\n</ul>\n<h3 id=\"索引类型最佳实践\"><a class=\"markdownIt-Anchor\" href=\"#索引类型最佳实践\"></a> 索引类型最佳实践</h3>\n<ul>\n<li>表必须有主键，建议使用业务主键，使用雪花算法保证自增。</li>\n<li>单张表中索引数量不超过5个</li>\n<li>单个索引字段数不超过5个</li>\n<li>字符串索引使用前缀索引，前缀长度不超过10个字符</li>\n</ul>"},{"title":"分布式事务解决方案","toc":true,"hide":false,"date":"2021-07-31T14:02:41.000Z","sortn":40,"_content":"\n这是摘要\n<!-- more -->\n\n------\n\n\n\n## 分布式事务常见解决方案\n\n\n\n### 强一致协议\n\n- 两阶段提交 2PC、三阶段提交 3PC\n\n  <img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731230311.png\" style=\"zoom:33%;\" />\n\n- 落地方案：\n\n  - XA规范，是对两阶段提交的实现方案<br>资源管理器 - 事务参与者<br>事务管理器 - 事务协调者\n\n  - XA规范，有十倍的性能衰减。\n\n    - 有写锁，提交周期比较长\n\n    - 要求事务管理器，需要本地记录事务状态，机器挂了后，就不支持异地恢复。\n\n      \n\n### 柔性事务\n\n\n\n- TCC 规范 （Try - Confirm - Cancel）\n  - 尝试执行业务，预留资源<br>确认执行业务，使用Try阶段资源<br>取消执行业务，释放Try阶段预留的资源\n  - 缺点：\n    - 业务逻辑复杂，新手不会写，老人写出来不能保证没bug。\n    - 这种东西，测试也不太好测试，线上风险太大。\n    - 业务逻辑写出bug的风险，比不同分布式事务，出问题的概率还要大得多\n  - TCC协议中，没有给出机器Try后，机器掉电的异常情况的处理方案，<br>本质上是个有缺陷的协议\n- SAGA模型\n  - 一个分布式事务拆分为多个本地事务<br>本地事务都有相应的执行模块和补偿模块<br>事务管理器负责在事务失败时调度执行补偿逻辑;\n  - 缺点：\n    - 一个业务及要写正向业务逻辑，也要写出现异常的业务逻辑，工作量翻倍\n    - 即使有事务协调器，不能保证异常恢复逻辑，被精确一次执行，比如事务管理器，收到的异常执行结果为超时。\n    - 需要保证反向业务的幂等性，工作量也翻倍。\n    - 当异常回滚逻辑，第一次执行失败后，依然免不了人工介入。\n\n\n\n### 事务消息\n\n- 简化了分布式事务的模型，对业务友好\n\n- rocketMQ就有事务消息，可以拿来即用。\n\n  \n\n### Seata 分布式事务流程\n\n- **Seata 2PC模型**\n\n![image-20210731232847753](https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731232847.png)\n\n\n\n- **seata AT模型**\n\n  - 介绍\n    - 一种无侵入的分布式事务解决方案，2PC的广义实现。 \n    - 源自阿里云GTS AT模式的开源版。\n  - 核心价值\n    - 低成本 : 编程模型不变，轻依赖不需要为分布式事务场景做特定设计。\n    - 高性能 : 一阶段提交，不阻塞;连接释放，保证整个系统的吞吐。\n    - 高可用 : 极端的异常情况下，可以暂时跳过异常事务，保证系统可用。\n  - 实现方案\n\n  <img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731233319.png\" alt=\"image-20210731233319236\" style=\"zoom:50%;\" />\n\n![image-20210731233418204](https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731233418.png)\n\n","source":"_posts/mysql/分布式事务解决方案.md","raw":"---\ntitle: '分布式事务解决方案'\ntoc: true\ncategories:\n  - 数据库\n  - mysql\ntags:\n  - 分库分表\n  - 分布式事务\nhide: false\ndate: 2021-07-31 22:02:41\nsortn: 40\n---\n\n这是摘要\n<!-- more -->\n\n------\n\n\n\n## 分布式事务常见解决方案\n\n\n\n### 强一致协议\n\n- 两阶段提交 2PC、三阶段提交 3PC\n\n  <img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731230311.png\" style=\"zoom:33%;\" />\n\n- 落地方案：\n\n  - XA规范，是对两阶段提交的实现方案<br>资源管理器 - 事务参与者<br>事务管理器 - 事务协调者\n\n  - XA规范，有十倍的性能衰减。\n\n    - 有写锁，提交周期比较长\n\n    - 要求事务管理器，需要本地记录事务状态，机器挂了后，就不支持异地恢复。\n\n      \n\n### 柔性事务\n\n\n\n- TCC 规范 （Try - Confirm - Cancel）\n  - 尝试执行业务，预留资源<br>确认执行业务，使用Try阶段资源<br>取消执行业务，释放Try阶段预留的资源\n  - 缺点：\n    - 业务逻辑复杂，新手不会写，老人写出来不能保证没bug。\n    - 这种东西，测试也不太好测试，线上风险太大。\n    - 业务逻辑写出bug的风险，比不同分布式事务，出问题的概率还要大得多\n  - TCC协议中，没有给出机器Try后，机器掉电的异常情况的处理方案，<br>本质上是个有缺陷的协议\n- SAGA模型\n  - 一个分布式事务拆分为多个本地事务<br>本地事务都有相应的执行模块和补偿模块<br>事务管理器负责在事务失败时调度执行补偿逻辑;\n  - 缺点：\n    - 一个业务及要写正向业务逻辑，也要写出现异常的业务逻辑，工作量翻倍\n    - 即使有事务协调器，不能保证异常恢复逻辑，被精确一次执行，比如事务管理器，收到的异常执行结果为超时。\n    - 需要保证反向业务的幂等性，工作量也翻倍。\n    - 当异常回滚逻辑，第一次执行失败后，依然免不了人工介入。\n\n\n\n### 事务消息\n\n- 简化了分布式事务的模型，对业务友好\n\n- rocketMQ就有事务消息，可以拿来即用。\n\n  \n\n### Seata 分布式事务流程\n\n- **Seata 2PC模型**\n\n![image-20210731232847753](https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731232847.png)\n\n\n\n- **seata AT模型**\n\n  - 介绍\n    - 一种无侵入的分布式事务解决方案，2PC的广义实现。 \n    - 源自阿里云GTS AT模式的开源版。\n  - 核心价值\n    - 低成本 : 编程模型不变，轻依赖不需要为分布式事务场景做特定设计。\n    - 高性能 : 一阶段提交，不阻塞;连接释放，保证整个系统的吞吐。\n    - 高可用 : 极端的异常情况下，可以暂时跳过异常事务，保证系统可用。\n  - 实现方案\n\n  <img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731233319.png\" alt=\"image-20210731233319236\" style=\"zoom:50%;\" />\n\n![image-20210731233418204](https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731233418.png)\n\n","slug":"mysql/分布式事务解决方案","published":1,"updated":"2021-07-31T14:02:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrs2dsdu0005hufy2qne757q","content":"<p>这是摘要</p>\n<span id=\"more\"></span>\n<hr>\n<h2><span id=\"分布式事务常见解决方案\"> 分布式事务常见解决方案</span></h2>\n<h3><span id=\"强一致协议\"> 强一致协议</span></h3>\n<ul>\n<li>\n<p>两阶段提交 2PC、三阶段提交 3PC</p>\n<img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731230311.png\" style=\"zoom:33%;\">\n</li>\n<li>\n<p>落地方案：</p>\n<ul>\n<li>\n<p>XA规范，是对两阶段提交的实现方案<br>资源管理器 - 事务参与者<br>事务管理器 - 事务协调者</p>\n</li>\n<li>\n<p>XA规范，有十倍的性能衰减。</p>\n<ul>\n<li>\n<p>有写锁，提交周期比较长</p>\n</li>\n<li>\n<p>要求事务管理器，需要本地记录事务状态，机器挂了后，就不支持异地恢复。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"柔性事务\"> 柔性事务</span></h3>\n<ul>\n<li>TCC 规范 （Try - Confirm - Cancel）\n<ul>\n<li>尝试执行业务，预留资源<br>确认执行业务，使用Try阶段资源<br>取消执行业务，释放Try阶段预留的资源</li>\n<li>缺点：\n<ul>\n<li>业务逻辑复杂，新手不会写，老人写出来不能保证没bug。</li>\n<li>这种东西，测试也不太好测试，线上风险太大。</li>\n<li>业务逻辑写出bug的风险，比不同分布式事务，出问题的概率还要大得多</li>\n</ul>\n</li>\n<li>TCC协议中，没有给出机器Try后，机器掉电的异常情况的处理方案，<br>本质上是个有缺陷的协议</li>\n</ul>\n</li>\n<li>SAGA模型\n<ul>\n<li>一个分布式事务拆分为多个本地事务<br>本地事务都有相应的执行模块和补偿模块<br>事务管理器负责在事务失败时调度执行补偿逻辑;</li>\n<li>缺点：\n<ul>\n<li>一个业务及要写正向业务逻辑，也要写出现异常的业务逻辑，工作量翻倍</li>\n<li>即使有事务协调器，不能保证异常恢复逻辑，被精确一次执行，比如事务管理器，收到的异常执行结果为超时。</li>\n<li>需要保证反向业务的幂等性，工作量也翻倍。</li>\n<li>当异常回滚逻辑，第一次执行失败后，依然免不了人工介入。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"事务消息\"> 事务消息</span></h3>\n<ul>\n<li>\n<p>简化了分布式事务的模型，对业务友好</p>\n</li>\n<li>\n<p>rocketMQ就有事务消息，可以拿来即用。</p>\n</li>\n</ul>\n<h3><span id=\"seata-分布式事务流程\"> Seata 分布式事务流程</span></h3>\n<ul>\n<li><strong>Seata 2PC模型</strong></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731232847.png\" alt=\"image-20210731232847753\"></p>\n<ul>\n<li>\n<p><strong>seata AT模型</strong></p>\n<ul>\n<li>介绍\n<ul>\n<li>一种无侵入的分布式事务解决方案，2PC的广义实现。</li>\n<li>源自阿里云GTS AT模式的开源版。</li>\n</ul>\n</li>\n<li>核心价值\n<ul>\n<li>低成本 : 编程模型不变，轻依赖不需要为分布式事务场景做特定设计。</li>\n<li>高性能 : 一阶段提交，不阻塞;连接释放，保证整个系统的吞吐。</li>\n<li>高可用 : 极端的异常情况下，可以暂时跳过异常事务，保证系统可用。</li>\n</ul>\n</li>\n<li>实现方案</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731233319.png\" alt=\"image-20210731233319236\" style=\"zoom:50%;\">\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731233418.png\" alt=\"image-20210731233418204\"></p>\n","site":{"data":{}},"excerpt":"<p>这是摘要</p>","more":"<hr />\n<h2 id=\"分布式事务常见解决方案\"><a class=\"markdownIt-Anchor\" href=\"#分布式事务常见解决方案\"></a> 分布式事务常见解决方案</h2>\n<h3 id=\"强一致协议\"><a class=\"markdownIt-Anchor\" href=\"#强一致协议\"></a> 强一致协议</h3>\n<ul>\n<li>\n<p>两阶段提交 2PC、三阶段提交 3PC</p>\n<img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731230311.png\" style=\"zoom:33%;\" />\n</li>\n<li>\n<p>落地方案：</p>\n<ul>\n<li>\n<p>XA规范，是对两阶段提交的实现方案<br>资源管理器 - 事务参与者<br>事务管理器 - 事务协调者</p>\n</li>\n<li>\n<p>XA规范，有十倍的性能衰减。</p>\n<ul>\n<li>\n<p>有写锁，提交周期比较长</p>\n</li>\n<li>\n<p>要求事务管理器，需要本地记录事务状态，机器挂了后，就不支持异地恢复。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"柔性事务\"><a class=\"markdownIt-Anchor\" href=\"#柔性事务\"></a> 柔性事务</h3>\n<ul>\n<li>TCC 规范 （Try - Confirm - Cancel）\n<ul>\n<li>尝试执行业务，预留资源<br>确认执行业务，使用Try阶段资源<br>取消执行业务，释放Try阶段预留的资源</li>\n<li>缺点：\n<ul>\n<li>业务逻辑复杂，新手不会写，老人写出来不能保证没bug。</li>\n<li>这种东西，测试也不太好测试，线上风险太大。</li>\n<li>业务逻辑写出bug的风险，比不同分布式事务，出问题的概率还要大得多</li>\n</ul>\n</li>\n<li>TCC协议中，没有给出机器Try后，机器掉电的异常情况的处理方案，<br>本质上是个有缺陷的协议</li>\n</ul>\n</li>\n<li>SAGA模型\n<ul>\n<li>一个分布式事务拆分为多个本地事务<br>本地事务都有相应的执行模块和补偿模块<br>事务管理器负责在事务失败时调度执行补偿逻辑;</li>\n<li>缺点：\n<ul>\n<li>一个业务及要写正向业务逻辑，也要写出现异常的业务逻辑，工作量翻倍</li>\n<li>即使有事务协调器，不能保证异常恢复逻辑，被精确一次执行，比如事务管理器，收到的异常执行结果为超时。</li>\n<li>需要保证反向业务的幂等性，工作量也翻倍。</li>\n<li>当异常回滚逻辑，第一次执行失败后，依然免不了人工介入。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"事务消息\"><a class=\"markdownIt-Anchor\" href=\"#事务消息\"></a> 事务消息</h3>\n<ul>\n<li>\n<p>简化了分布式事务的模型，对业务友好</p>\n</li>\n<li>\n<p>rocketMQ就有事务消息，可以拿来即用。</p>\n</li>\n</ul>\n<h3 id=\"seata-分布式事务流程\"><a class=\"markdownIt-Anchor\" href=\"#seata-分布式事务流程\"></a> Seata 分布式事务流程</h3>\n<ul>\n<li><strong>Seata 2PC模型</strong></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731232847.png\" alt=\"image-20210731232847753\" /></p>\n<ul>\n<li>\n<p><strong>seata AT模型</strong></p>\n<ul>\n<li>介绍\n<ul>\n<li>一种无侵入的分布式事务解决方案，2PC的广义实现。</li>\n<li>源自阿里云GTS AT模式的开源版。</li>\n</ul>\n</li>\n<li>核心价值\n<ul>\n<li>低成本 : 编程模型不变，轻依赖不需要为分布式事务场景做特定设计。</li>\n<li>高性能 : 一阶段提交，不阻塞;连接释放，保证整个系统的吞吐。</li>\n<li>高可用 : 极端的异常情况下，可以暂时跳过异常事务，保证系统可用。</li>\n</ul>\n</li>\n<li>实现方案</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731233319.png\" alt=\"image-20210731233319236\" style=\"zoom:50%;\" />\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731233418.png\" alt=\"image-20210731233418204\" /></p>"},{"title":"分库分表策略概述","toc":true,"hide":false,"date":"2021-07-31T13:36:16.000Z","sortn":30,"_content":"\n本章主要讲大量数据的分库分表\n<!-- more -->\n\n------\n\n\n\n## 什么时候考虑分表\n\n- 在线服务，单表超过1000万，考虑分表 \n\n\n\n## 分库分表的方式\n\n\n\n### 分表方式\n\n- 取模：存储相对均匀，访问也均匀，用户数据一般这样分，\n\n- 宽表拆成窄表，假如有一个宽表，有的列需要频繁改动，则拆出去。<br>比如 user `uid , nickname, img_url, userswitch` 其中userswitch 是一个64位Long类型，<br>描述了用户的很多开关，比如是否允许被加好友，是否允许被搜索到，是否允许xxx等<br>可以拆成 user_extra 来单拎出来，进行查询 or 修改\n\n- 按时间：冷热库拆分，订单场景。\n\n  \n\n### 分库的方式\n\n- 按业务垂直分，用户库，商品库，订单库。防止某个业务把整个数据库压垮\n- 水平分成多个库，一般伴随着分表进行，<br>比如一个表分成128个表，再分成4个库进行存储。\n\n\n\n## 分表最佳实践\n\n\n\n### 用户库分表\n\n- 选择合适的分片键， 一般通过uid分片\n\n\n\n### 商品库分表\n\n- 基因注入法 【todo】\n\n \n\n### 系统消息分表\n\n- 冷热数据分表<br>假如系统消息有效期为30天，按月分库。msg_1901，msg_1902，msg_1903。。。。<br>如果查询的时候30天的数据，则需要查询2个表，不舒服。<br>可用用双写的方案，当月数据也写到下月的数据表中。<br>查询的时候，则查询本月数据表，本月数据表中，自然携带上月的数据。\n\n\n\n## Sharding Sphere应用实践\n\n### 分库分表带来的问题\n\n- 查询路由问题\n\n  - 分表规则\n  - 写入路由\n  - 查询路由\n  - 分页查询方案\n\n  \n\n- Sharding Sphere 选型\n\n  - sharding sphere ，从业务进程内，对sql进行改写。\n\n  - sharding proxy，代理访问数据库，使得访问变得透明。\n\n    | 对比项                      | sharding-jdbc                         | sharding-proxy |\n    | --------------------------- | ------------------------------------- | -------------- |\n    | 数据库                      | 任意<br>只要JDBC支持的库<br/>他都支持 | 仅mysql        |\n    | 异构语言                    | 仅支持java                            | 任意语言       |\n    | 连接数                      | 高                                    | 低             |\n    | 性能                        | 损耗低                                | 损耗略高       |\n    | 去中心化                    | 是                                    | 否             |\n    | 静态入口<br>Navicat直接访问 | 无                                    | 有             |\n\n  \n\n- 最终选型，全家桶方案\n\n  <img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731215348.png\" style=\"zoom:50%;\" />\n","source":"_posts/mysql/分库分表策略概述.md","raw":"---\ntitle: '分库分表策略概述'\ntoc: true\ncategories:\n  - 数据库\n  - mysql\ntags:\n  - 分库分表\nhide: false\ndate: 2021-07-31 21:36:16\nsortn: 30\n---\n\n本章主要讲大量数据的分库分表\n<!-- more -->\n\n------\n\n\n\n## 什么时候考虑分表\n\n- 在线服务，单表超过1000万，考虑分表 \n\n\n\n## 分库分表的方式\n\n\n\n### 分表方式\n\n- 取模：存储相对均匀，访问也均匀，用户数据一般这样分，\n\n- 宽表拆成窄表，假如有一个宽表，有的列需要频繁改动，则拆出去。<br>比如 user `uid , nickname, img_url, userswitch` 其中userswitch 是一个64位Long类型，<br>描述了用户的很多开关，比如是否允许被加好友，是否允许被搜索到，是否允许xxx等<br>可以拆成 user_extra 来单拎出来，进行查询 or 修改\n\n- 按时间：冷热库拆分，订单场景。\n\n  \n\n### 分库的方式\n\n- 按业务垂直分，用户库，商品库，订单库。防止某个业务把整个数据库压垮\n- 水平分成多个库，一般伴随着分表进行，<br>比如一个表分成128个表，再分成4个库进行存储。\n\n\n\n## 分表最佳实践\n\n\n\n### 用户库分表\n\n- 选择合适的分片键， 一般通过uid分片\n\n\n\n### 商品库分表\n\n- 基因注入法 【todo】\n\n \n\n### 系统消息分表\n\n- 冷热数据分表<br>假如系统消息有效期为30天，按月分库。msg_1901，msg_1902，msg_1903。。。。<br>如果查询的时候30天的数据，则需要查询2个表，不舒服。<br>可用用双写的方案，当月数据也写到下月的数据表中。<br>查询的时候，则查询本月数据表，本月数据表中，自然携带上月的数据。\n\n\n\n## Sharding Sphere应用实践\n\n### 分库分表带来的问题\n\n- 查询路由问题\n\n  - 分表规则\n  - 写入路由\n  - 查询路由\n  - 分页查询方案\n\n  \n\n- Sharding Sphere 选型\n\n  - sharding sphere ，从业务进程内，对sql进行改写。\n\n  - sharding proxy，代理访问数据库，使得访问变得透明。\n\n    | 对比项                      | sharding-jdbc                         | sharding-proxy |\n    | --------------------------- | ------------------------------------- | -------------- |\n    | 数据库                      | 任意<br>只要JDBC支持的库<br/>他都支持 | 仅mysql        |\n    | 异构语言                    | 仅支持java                            | 任意语言       |\n    | 连接数                      | 高                                    | 低             |\n    | 性能                        | 损耗低                                | 损耗略高       |\n    | 去中心化                    | 是                                    | 否             |\n    | 静态入口<br>Navicat直接访问 | 无                                    | 有             |\n\n  \n\n- 最终选型，全家桶方案\n\n  <img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731215348.png\" style=\"zoom:50%;\" />\n","slug":"mysql/分库分表策略概述","published":1,"updated":"2021-07-31T13:36:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrs2dsdu0006hufyc6d0ecox","content":"<p>本章主要讲大量数据的分库分表</p>\n<span id=\"more\"></span>\n<hr>\n<h2><span id=\"什么时候考虑分表\"> 什么时候考虑分表</span></h2>\n<ul>\n<li>在线服务，单表超过1000万，考虑分表</li>\n</ul>\n<h2><span id=\"分库分表的方式\"> 分库分表的方式</span></h2>\n<h3><span id=\"分表方式\"> 分表方式</span></h3>\n<ul>\n<li>\n<p>取模：存储相对均匀，访问也均匀，用户数据一般这样分，</p>\n</li>\n<li>\n<p>宽表拆成窄表，假如有一个宽表，有的列需要频繁改动，则拆出去。<br>比如 user <code>uid , nickname, img_url, userswitch</code> 其中userswitch 是一个64位Long类型，<br>描述了用户的很多开关，比如是否允许被加好友，是否允许被搜索到，是否允许xxx等<br>可以拆成 user_extra 来单拎出来，进行查询 or 修改</p>\n</li>\n<li>\n<p>按时间：冷热库拆分，订单场景。</p>\n</li>\n</ul>\n<h3><span id=\"分库的方式\"> 分库的方式</span></h3>\n<ul>\n<li>按业务垂直分，用户库，商品库，订单库。防止某个业务把整个数据库压垮</li>\n<li>水平分成多个库，一般伴随着分表进行，<br>比如一个表分成128个表，再分成4个库进行存储。</li>\n</ul>\n<h2><span id=\"分表最佳实践\"> 分表最佳实践</span></h2>\n<h3><span id=\"用户库分表\"> 用户库分表</span></h3>\n<ul>\n<li>选择合适的分片键， 一般通过uid分片</li>\n</ul>\n<h3><span id=\"商品库分表\"> 商品库分表</span></h3>\n<ul>\n<li>基因注入法 【todo】</li>\n</ul>\n<h3><span id=\"系统消息分表\"> 系统消息分表</span></h3>\n<ul>\n<li>冷热数据分表<br>假如系统消息有效期为30天，按月分库。msg_1901，msg_1902，msg_1903。。。。<br>如果查询的时候30天的数据，则需要查询2个表，不舒服。<br>可用用双写的方案，当月数据也写到下月的数据表中。<br>查询的时候，则查询本月数据表，本月数据表中，自然携带上月的数据。</li>\n</ul>\n<h2><span id=\"sharding-sphere应用实践\"> Sharding Sphere应用实践</span></h2>\n<h3><span id=\"分库分表带来的问题\"> 分库分表带来的问题</span></h3>\n<ul>\n<li>\n<p>查询路由问题</p>\n<ul>\n<li>分表规则</li>\n<li>写入路由</li>\n<li>查询路由</li>\n<li>分页查询方案</li>\n</ul>\n</li>\n<li>\n<p>Sharding Sphere 选型</p>\n<ul>\n<li>\n<p>sharding sphere ，从业务进程内，对sql进行改写。</p>\n</li>\n<li>\n<p>sharding proxy，代理访问数据库，使得访问变得透明。</p>\n<table>\n<thead>\n<tr>\n<th>对比项</th>\n<th>sharding-jdbc</th>\n<th>sharding-proxy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据库</td>\n<td>任意<br>只要JDBC支持的库<br>他都支持</td>\n<td>仅mysql</td>\n</tr>\n<tr>\n<td>异构语言</td>\n<td>仅支持java</td>\n<td>任意语言</td>\n</tr>\n<tr>\n<td>连接数</td>\n<td>高</td>\n<td>低</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>损耗低</td>\n<td>损耗略高</td>\n</tr>\n<tr>\n<td>去中心化</td>\n<td>是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>静态入口<br>Navicat直接访问</td>\n<td>无</td>\n<td>有</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n<li>\n<p>最终选型，全家桶方案</p>\n<img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731215348.png\" style=\"zoom:50%;\">\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本章主要讲大量数据的分库分表</p>","more":"<hr />\n<h2 id=\"什么时候考虑分表\"><a class=\"markdownIt-Anchor\" href=\"#什么时候考虑分表\"></a> 什么时候考虑分表</h2>\n<ul>\n<li>在线服务，单表超过1000万，考虑分表</li>\n</ul>\n<h2 id=\"分库分表的方式\"><a class=\"markdownIt-Anchor\" href=\"#分库分表的方式\"></a> 分库分表的方式</h2>\n<h3 id=\"分表方式\"><a class=\"markdownIt-Anchor\" href=\"#分表方式\"></a> 分表方式</h3>\n<ul>\n<li>\n<p>取模：存储相对均匀，访问也均匀，用户数据一般这样分，</p>\n</li>\n<li>\n<p>宽表拆成窄表，假如有一个宽表，有的列需要频繁改动，则拆出去。<br>比如 user <code>uid , nickname, img_url, userswitch</code> 其中userswitch 是一个64位Long类型，<br>描述了用户的很多开关，比如是否允许被加好友，是否允许被搜索到，是否允许xxx等<br>可以拆成 user_extra 来单拎出来，进行查询 or 修改</p>\n</li>\n<li>\n<p>按时间：冷热库拆分，订单场景。</p>\n</li>\n</ul>\n<h3 id=\"分库的方式\"><a class=\"markdownIt-Anchor\" href=\"#分库的方式\"></a> 分库的方式</h3>\n<ul>\n<li>按业务垂直分，用户库，商品库，订单库。防止某个业务把整个数据库压垮</li>\n<li>水平分成多个库，一般伴随着分表进行，<br>比如一个表分成128个表，再分成4个库进行存储。</li>\n</ul>\n<h2 id=\"分表最佳实践\"><a class=\"markdownIt-Anchor\" href=\"#分表最佳实践\"></a> 分表最佳实践</h2>\n<h3 id=\"用户库分表\"><a class=\"markdownIt-Anchor\" href=\"#用户库分表\"></a> 用户库分表</h3>\n<ul>\n<li>选择合适的分片键， 一般通过uid分片</li>\n</ul>\n<h3 id=\"商品库分表\"><a class=\"markdownIt-Anchor\" href=\"#商品库分表\"></a> 商品库分表</h3>\n<ul>\n<li>基因注入法 【todo】</li>\n</ul>\n<h3 id=\"系统消息分表\"><a class=\"markdownIt-Anchor\" href=\"#系统消息分表\"></a> 系统消息分表</h3>\n<ul>\n<li>冷热数据分表<br>假如系统消息有效期为30天，按月分库。msg_1901，msg_1902，msg_1903。。。。<br>如果查询的时候30天的数据，则需要查询2个表，不舒服。<br>可用用双写的方案，当月数据也写到下月的数据表中。<br>查询的时候，则查询本月数据表，本月数据表中，自然携带上月的数据。</li>\n</ul>\n<h2 id=\"sharding-sphere应用实践\"><a class=\"markdownIt-Anchor\" href=\"#sharding-sphere应用实践\"></a> Sharding Sphere应用实践</h2>\n<h3 id=\"分库分表带来的问题\"><a class=\"markdownIt-Anchor\" href=\"#分库分表带来的问题\"></a> 分库分表带来的问题</h3>\n<ul>\n<li>\n<p>查询路由问题</p>\n<ul>\n<li>分表规则</li>\n<li>写入路由</li>\n<li>查询路由</li>\n<li>分页查询方案</li>\n</ul>\n</li>\n<li>\n<p>Sharding Sphere 选型</p>\n<ul>\n<li>\n<p>sharding sphere ，从业务进程内，对sql进行改写。</p>\n</li>\n<li>\n<p>sharding proxy，代理访问数据库，使得访问变得透明。</p>\n<table>\n<thead>\n<tr>\n<th>对比项</th>\n<th>sharding-jdbc</th>\n<th>sharding-proxy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据库</td>\n<td>任意<br>只要JDBC支持的库<br/>他都支持</td>\n<td>仅mysql</td>\n</tr>\n<tr>\n<td>异构语言</td>\n<td>仅支持java</td>\n<td>任意语言</td>\n</tr>\n<tr>\n<td>连接数</td>\n<td>高</td>\n<td>低</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>损耗低</td>\n<td>损耗略高</td>\n</tr>\n<tr>\n<td>去中心化</td>\n<td>是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>静态入口<br>Navicat直接访问</td>\n<td>无</td>\n<td>有</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n<li>\n<p>最终选型，全家桶方案</p>\n<img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210731215348.png\" style=\"zoom:50%;\" />\n</li>\n</ul>"},{"title":"API设计规范","date":"2021-07-29T19:05:15.000Z","toc":true,"hide":false,"_content":"\n\n\nhttp设计规范，设计接口后，可以对照自查表自省一下。\n\n<!-- more -->\n\n------\n\n\n\n## API设计自查表\n\n\n\n| 考虑点                                        | 结论 |\n| :-------------------------------------------- | ---- |\n| 接口命名                                      |      |\n| 入参                                          |      |\n| 出参                                          |      |\n| header                                        |      |\n| 包装结构体                                    |      |\n| 版本                                          |      |\n| 保障级别 （对内服务 or 对外服务 ｜ 使用人群） |      |\n| 是否需要黑白名单，哪个位置加                  |      |\n| 是否需要幂等，以及实现方案                    |      |\n| 是否需要异步，以及实现方案                    |      |\n\n\n\n\n\n------\n\n\n\n## 详细解释\n\n\n\n### 标准接口命名\n\n- 范例：<br>`xxx/user/p0/v1/getuserInfo`<br>业务线 / 所属服务 / 保护级别 / 版本 / getuserInfo\n\n- 禁止，PathVariable，不好管理，性能也有点问题<br>例如：/user/{user_id}\n\n- 禁止，除了 get、post 以外的method，网关不好管理\n\n- **保护级别**\n\n  - p0: 主流程接口，对外服务核心流程，一般此类接口挂了，用户就会发现系统有问题。<br>需要全力保障的接口\n  - p1: 非必要业务接口，一般是非核心查询接口，这类接口挂了，用户不容易察觉，<br>网关可以进行接口限流，根据user level 接口限流，也可以拿这类接口开刀。\n  - p2: 信息采集类接口，可以不用保证可用性，后端也永远返回成功，<br>服务资源不足时候，网关可以直接下掉他们。\n\n- 版本号\n\n  - 使用v1、v2即可\n\n  \n\n### header\n\n- jwt\n\n- 业务上下文，采集使用\n\n  如 user_id，client_id，client_type，biz，version，user_level，addr 等\n\n  按需添加\n\n- 调用链，trace_id，span_id，\n\n  一般由工具生成。\n\n\n\n### 入参\n\n- 对外服务公共参数\n\n  - 防篡改签名\n  - 加token\n\n  \n\n- 对内服务公共参数\n\n  - user_id\n  - biz_id\n  - service_id\n\n\n\n### 出参\n\n- 类型\n\n  强制使用 application/json 类型，尽量为字符串类型。\n\n  避免返回Long。\n\n  \n\n- 返回码\n\n  业务异常、系统异常要分开。<br>业务异常保证无歧义，系统异常返回码为99999，降级使用。<br>确保多重状态，有不同的返回码，<br>例如，有一个接口叫\"收单接口\"，其内部调用\"下单\"接口。<br>收单服务正常的时候，下单接口可能返回失败。<br>设计接口结构时，状态码不能有歧义，\"收单正常，下单失败\" 与 \"收单失败\"  返回不同的状态码\n\n  \n\n- 包装结构\n\n  错误返回：`{ code, msg, trace_id }`<br>正常返回：`{ code, msg, result: {} }` <br>分页返回：`{ code, msg, result: { recordList:[], page_info:{} } }`<br>**result 不允许为数组，默认为 空 {}，在java中使用 emptyMap 常量**\n\n  \n\n### 实现幂等的策略\n\n- 唯一id + 时间字段。通过时间过滤后，使用trans_id 避免重复 （最通用的实现）\n\n  可以加前置 缓存队列 ，进行专门的去重。\n\n- 新增类接口，加唯一索引。（低并发下，实现最简单）\n\n- 乐观锁字段。（效率最高，但大量并发时需要避免）\n\n- 服务端发放提交票据，（两次交互，费时费力，不推荐）\n\n- 状态机幂等， `set order_status = [done] ` 天生幂等 \n\n效率优先：乐观锁 > 唯一约束 > 唯一索引\n\n\n\n### 异步策略\n\n例如**上传接口**\n\n- 同步\n\n```java\npublic SyncUploadResponse syncUpload(SyncUploadRequest request) {\n  SyncUploadResponse response = new SyncUploadResponse();\n  response.setDownloadUrl(uploadFile(request.getFile()));\n  response.setThumbnailDownloadUrl(uploadThumbnailFile(request.getFile()));\n  return response;\n}\n```\n\n- 异步上传，立即返回一个任务id，客户端根据任务id轮询结果。\n\n  \n\n```java\n//在接口实现上，我们同样把上传任务提交到线程池处理，但是并不会同步等待任务完成，而是完成后把结果写入一个 HashMap，任务查询接口通过查询这个 HashMap 来获得文件 的 URL\npublic class asyncDemo {\n\n    //计数器，作为上传任务的ID\n    private AtomicInteger atomicInteger = new AtomicInteger(0);\n    //暂存上传操作的结果，生产代码需要考虑数据持久化\n    private ConcurrentHashMap<String, SyncQueryUploadTaskResponse> downloadUrl = new ConcurrentHashMap<>();\n\n    // 立即返回任务id\n    public AsyncUploadResponse asyncUpload(AsyncUploadRequest request) {\n        AsyncUploadResponse response = new AsyncUploadResponse();\n        //生成唯一的上传任务ID\n        String taskId = \"upload\" + atomicInteger.incrementAndGet\n        //异步上传操作只返回任务ID\n        response.setTaskId(taskId);\n        //提交上传原始文件操作到线程池异步处理\n        threadPool.execute(() -> {\n            String url = uploadFile(request.getFile());\n            //如果ConcurrentHashMap不包含Key，则初始化一个SyncQueryUploadTaskResponse\n            downloadUrl.computeIfAbsent(taskId,\n                    id -> new SyncQueryUploadTaskResponse(id)).setDownloadUrl(url);\n        });\n\n        //提交上传缩略图操作到线程池异步处理\n        threadPool.execute(() -> {\n            String url = uploadThumbnailFile(request.getFile());\n            downloadUrl.computeIfAbsent(taskId,\n                    id -> new SyncQueryUploadTaskResponse(id)).setThumbnailDownloadUrl(url);\n        });\n        return response;\n    }\n\n```\n\n","source":"_posts/技术规范/API设计规范.md","raw":"---\ntitle: API设计规范\ndate: 2021-07-30 03:05:15\ntoc: true\n\ncategories:\n  - 后端\n\ntags:\n  - 设计\n  - 技术规范\n\nhide: false\n\n---\n\n\n\nhttp设计规范，设计接口后，可以对照自查表自省一下。\n\n<!-- more -->\n\n------\n\n\n\n## API设计自查表\n\n\n\n| 考虑点                                        | 结论 |\n| :-------------------------------------------- | ---- |\n| 接口命名                                      |      |\n| 入参                                          |      |\n| 出参                                          |      |\n| header                                        |      |\n| 包装结构体                                    |      |\n| 版本                                          |      |\n| 保障级别 （对内服务 or 对外服务 ｜ 使用人群） |      |\n| 是否需要黑白名单，哪个位置加                  |      |\n| 是否需要幂等，以及实现方案                    |      |\n| 是否需要异步，以及实现方案                    |      |\n\n\n\n\n\n------\n\n\n\n## 详细解释\n\n\n\n### 标准接口命名\n\n- 范例：<br>`xxx/user/p0/v1/getuserInfo`<br>业务线 / 所属服务 / 保护级别 / 版本 / getuserInfo\n\n- 禁止，PathVariable，不好管理，性能也有点问题<br>例如：/user/{user_id}\n\n- 禁止，除了 get、post 以外的method，网关不好管理\n\n- **保护级别**\n\n  - p0: 主流程接口，对外服务核心流程，一般此类接口挂了，用户就会发现系统有问题。<br>需要全力保障的接口\n  - p1: 非必要业务接口，一般是非核心查询接口，这类接口挂了，用户不容易察觉，<br>网关可以进行接口限流，根据user level 接口限流，也可以拿这类接口开刀。\n  - p2: 信息采集类接口，可以不用保证可用性，后端也永远返回成功，<br>服务资源不足时候，网关可以直接下掉他们。\n\n- 版本号\n\n  - 使用v1、v2即可\n\n  \n\n### header\n\n- jwt\n\n- 业务上下文，采集使用\n\n  如 user_id，client_id，client_type，biz，version，user_level，addr 等\n\n  按需添加\n\n- 调用链，trace_id，span_id，\n\n  一般由工具生成。\n\n\n\n### 入参\n\n- 对外服务公共参数\n\n  - 防篡改签名\n  - 加token\n\n  \n\n- 对内服务公共参数\n\n  - user_id\n  - biz_id\n  - service_id\n\n\n\n### 出参\n\n- 类型\n\n  强制使用 application/json 类型，尽量为字符串类型。\n\n  避免返回Long。\n\n  \n\n- 返回码\n\n  业务异常、系统异常要分开。<br>业务异常保证无歧义，系统异常返回码为99999，降级使用。<br>确保多重状态，有不同的返回码，<br>例如，有一个接口叫\"收单接口\"，其内部调用\"下单\"接口。<br>收单服务正常的时候，下单接口可能返回失败。<br>设计接口结构时，状态码不能有歧义，\"收单正常，下单失败\" 与 \"收单失败\"  返回不同的状态码\n\n  \n\n- 包装结构\n\n  错误返回：`{ code, msg, trace_id }`<br>正常返回：`{ code, msg, result: {} }` <br>分页返回：`{ code, msg, result: { recordList:[], page_info:{} } }`<br>**result 不允许为数组，默认为 空 {}，在java中使用 emptyMap 常量**\n\n  \n\n### 实现幂等的策略\n\n- 唯一id + 时间字段。通过时间过滤后，使用trans_id 避免重复 （最通用的实现）\n\n  可以加前置 缓存队列 ，进行专门的去重。\n\n- 新增类接口，加唯一索引。（低并发下，实现最简单）\n\n- 乐观锁字段。（效率最高，但大量并发时需要避免）\n\n- 服务端发放提交票据，（两次交互，费时费力，不推荐）\n\n- 状态机幂等， `set order_status = [done] ` 天生幂等 \n\n效率优先：乐观锁 > 唯一约束 > 唯一索引\n\n\n\n### 异步策略\n\n例如**上传接口**\n\n- 同步\n\n```java\npublic SyncUploadResponse syncUpload(SyncUploadRequest request) {\n  SyncUploadResponse response = new SyncUploadResponse();\n  response.setDownloadUrl(uploadFile(request.getFile()));\n  response.setThumbnailDownloadUrl(uploadThumbnailFile(request.getFile()));\n  return response;\n}\n```\n\n- 异步上传，立即返回一个任务id，客户端根据任务id轮询结果。\n\n  \n\n```java\n//在接口实现上，我们同样把上传任务提交到线程池处理，但是并不会同步等待任务完成，而是完成后把结果写入一个 HashMap，任务查询接口通过查询这个 HashMap 来获得文件 的 URL\npublic class asyncDemo {\n\n    //计数器，作为上传任务的ID\n    private AtomicInteger atomicInteger = new AtomicInteger(0);\n    //暂存上传操作的结果，生产代码需要考虑数据持久化\n    private ConcurrentHashMap<String, SyncQueryUploadTaskResponse> downloadUrl = new ConcurrentHashMap<>();\n\n    // 立即返回任务id\n    public AsyncUploadResponse asyncUpload(AsyncUploadRequest request) {\n        AsyncUploadResponse response = new AsyncUploadResponse();\n        //生成唯一的上传任务ID\n        String taskId = \"upload\" + atomicInteger.incrementAndGet\n        //异步上传操作只返回任务ID\n        response.setTaskId(taskId);\n        //提交上传原始文件操作到线程池异步处理\n        threadPool.execute(() -> {\n            String url = uploadFile(request.getFile());\n            //如果ConcurrentHashMap不包含Key，则初始化一个SyncQueryUploadTaskResponse\n            downloadUrl.computeIfAbsent(taskId,\n                    id -> new SyncQueryUploadTaskResponse(id)).setDownloadUrl(url);\n        });\n\n        //提交上传缩略图操作到线程池异步处理\n        threadPool.execute(() -> {\n            String url = uploadThumbnailFile(request.getFile());\n            downloadUrl.computeIfAbsent(taskId,\n                    id -> new SyncQueryUploadTaskResponse(id)).setThumbnailDownloadUrl(url);\n        });\n        return response;\n    }\n\n```\n\n","slug":"技术规范/API设计规范","published":1,"updated":"2021-07-29T19:05:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrs2dsdv0007hufya3hmbv6h","content":"<p>http设计规范，设计接口后，可以对照自查表自省一下。</p>\n<span id=\"more\"></span>\n<hr>\n<h2><span id=\"api设计自查表\"> API设计自查表</span></h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">考虑点</th>\n<th>结论</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">接口命名</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">入参</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">出参</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">header</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">包装结构体</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">版本</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">保障级别 （对内服务 or 对外服务 ｜ 使用人群）</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">是否需要黑白名单，哪个位置加</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">是否需要幂等，以及实现方案</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">是否需要异步，以及实现方案</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2><span id=\"详细解释\"> 详细解释</span></h2>\n<h3><span id=\"标准接口命名\"> 标准接口命名</span></h3>\n<ul>\n<li>\n<p>范例：<br><code>xxx/user/p0/v1/getuserInfo</code><br>业务线 / 所属服务 / 保护级别 / 版本 / getuserInfo</p>\n</li>\n<li>\n<p>禁止，PathVariable，不好管理，性能也有点问题<br>例如：/user/{user_id}</p>\n</li>\n<li>\n<p>禁止，除了 get、post 以外的method，网关不好管理</p>\n</li>\n<li>\n<p><strong>保护级别</strong></p>\n<ul>\n<li>p0: 主流程接口，对外服务核心流程，一般此类接口挂了，用户就会发现系统有问题。<br>需要全力保障的接口</li>\n<li>p1: 非必要业务接口，一般是非核心查询接口，这类接口挂了，用户不容易察觉，<br>网关可以进行接口限流，根据user level 接口限流，也可以拿这类接口开刀。</li>\n<li>p2: 信息采集类接口，可以不用保证可用性，后端也永远返回成功，<br>服务资源不足时候，网关可以直接下掉他们。</li>\n</ul>\n</li>\n<li>\n<p>版本号</p>\n<ul>\n<li>使用v1、v2即可</li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"header\"> header</span></h3>\n<ul>\n<li>\n<p>jwt</p>\n</li>\n<li>\n<p>业务上下文，采集使用</p>\n<p>如 user_id，client_id，client_type，biz，version，user_level，addr 等</p>\n<p>按需添加</p>\n</li>\n<li>\n<p>调用链，trace_id，span_id，</p>\n<p>一般由工具生成。</p>\n</li>\n</ul>\n<h3><span id=\"入参\"> 入参</span></h3>\n<ul>\n<li>\n<p>对外服务公共参数</p>\n<ul>\n<li>防篡改签名</li>\n<li>加token</li>\n</ul>\n</li>\n<li>\n<p>对内服务公共参数</p>\n<ul>\n<li>user_id</li>\n<li>biz_id</li>\n<li>service_id</li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"出参\"> 出参</span></h3>\n<ul>\n<li>\n<p>类型</p>\n<p>强制使用 application/json 类型，尽量为字符串类型。</p>\n<p>避免返回Long。</p>\n</li>\n<li>\n<p>返回码</p>\n<p>业务异常、系统异常要分开。<br>业务异常保证无歧义，系统异常返回码为99999，降级使用。<br>确保多重状态，有不同的返回码，<br>例如，有一个接口叫&quot;收单接口&quot;，其内部调用&quot;下单&quot;接口。<br>收单服务正常的时候，下单接口可能返回失败。<br>设计接口结构时，状态码不能有歧义，“收单正常，下单失败” 与 “收单失败”  返回不同的状态码</p>\n</li>\n<li>\n<p>包装结构</p>\n<p>错误返回：<code>&#123; code, msg, trace_id &#125;</code><br>正常返回：<code>&#123; code, msg, result: &#123;&#125; &#125;</code> <br>分页返回：<code>&#123; code, msg, result: &#123; recordList:[], page_info:&#123;&#125; &#125; &#125;</code><br><strong>result 不允许为数组，默认为 空 {}，在java中使用 emptyMap 常量</strong></p>\n</li>\n</ul>\n<h3><span id=\"实现幂等的策略\"> 实现幂等的策略</span></h3>\n<ul>\n<li>\n<p>唯一id + 时间字段。通过时间过滤后，使用trans_id 避免重复 （最通用的实现）</p>\n<p>可以加前置 缓存队列 ，进行专门的去重。</p>\n</li>\n<li>\n<p>新增类接口，加唯一索引。（低并发下，实现最简单）</p>\n</li>\n<li>\n<p>乐观锁字段。（效率最高，但大量并发时需要避免）</p>\n</li>\n<li>\n<p>服务端发放提交票据，（两次交互，费时费力，不推荐）</p>\n</li>\n<li>\n<p>状态机幂等， <code>set order_status = [done]</code> 天生幂等</p>\n</li>\n</ul>\n<p>效率优先：乐观锁 &gt; 唯一约束 &gt; 唯一索引</p>\n<h3><span id=\"异步策略\"> 异步策略</span></h3>\n<p>例如<strong>上传接口</strong></p>\n<ul>\n<li>同步</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SyncUploadResponse <span class=\"hljs-title\">syncUpload</span><span class=\"hljs-params\">(SyncUploadRequest request)</span> </span>&#123;<br>  SyncUploadResponse response = <span class=\"hljs-keyword\">new</span> SyncUploadResponse();<br>  response.setDownloadUrl(uploadFile(request.getFile()));<br>  response.setThumbnailDownloadUrl(uploadThumbnailFile(request.getFile()));<br>  <span class=\"hljs-keyword\">return</span> response;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>异步上传，立即返回一个任务id，客户端根据任务id轮询结果。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//在接口实现上，我们同样把上传任务提交到线程池处理，但是并不会同步等待任务完成，而是完成后把结果写入一个 HashMap，任务查询接口通过查询这个 HashMap 来获得文件 的 URL</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">asyncDemo</span> </span>&#123;<br><br>    <span class=\"hljs-comment\">//计数器，作为上传任务的ID</span><br>    <span class=\"hljs-keyword\">private</span> AtomicInteger atomicInteger = <span class=\"hljs-keyword\">new</span> AtomicInteger(<span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-comment\">//暂存上传操作的结果，生产代码需要考虑数据持久化</span><br>    <span class=\"hljs-keyword\">private</span> ConcurrentHashMap&lt;String, SyncQueryUploadTaskResponse&gt; downloadUrl = <span class=\"hljs-keyword\">new</span> ConcurrentHashMap&lt;&gt;();<br><br>    <span class=\"hljs-comment\">// 立即返回任务id</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> AsyncUploadResponse <span class=\"hljs-title\">asyncUpload</span><span class=\"hljs-params\">(AsyncUploadRequest request)</span> </span>&#123;<br>        AsyncUploadResponse response = <span class=\"hljs-keyword\">new</span> AsyncUploadResponse();<br>        <span class=\"hljs-comment\">//生成唯一的上传任务ID</span><br>        String taskId = <span class=\"hljs-string\">&quot;upload&quot;</span> + atomicInteger.incrementAndGet<br>        <span class=\"hljs-comment\">//异步上传操作只返回任务ID</span><br>        response.setTaskId(taskId);<br>        <span class=\"hljs-comment\">//提交上传原始文件操作到线程池异步处理</span><br>        threadPool.execute(() -&gt; &#123;<br>            String url = uploadFile(request.getFile());<br>            <span class=\"hljs-comment\">//如果ConcurrentHashMap不包含Key，则初始化一个SyncQueryUploadTaskResponse</span><br>            downloadUrl.computeIfAbsent(taskId,<br>                    id -&gt; <span class=\"hljs-keyword\">new</span> SyncQueryUploadTaskResponse(id)).setDownloadUrl(url);<br>        &#125;);<br><br>        <span class=\"hljs-comment\">//提交上传缩略图操作到线程池异步处理</span><br>        threadPool.execute(() -&gt; &#123;<br>            String url = uploadThumbnailFile(request.getFile());<br>            downloadUrl.computeIfAbsent(taskId,<br>                    id -&gt; <span class=\"hljs-keyword\">new</span> SyncQueryUploadTaskResponse(id)).setThumbnailDownloadUrl(url);<br>        &#125;);<br>        <span class=\"hljs-keyword\">return</span> response;<br>    &#125;<br><br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>http设计规范，设计接口后，可以对照自查表自省一下。</p>","more":"<hr />\n<h2 id=\"api设计自查表\"><a class=\"markdownIt-Anchor\" href=\"#api设计自查表\"></a> API设计自查表</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">考虑点</th>\n<th>结论</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">接口命名</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">入参</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">出参</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">header</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">包装结构体</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">版本</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">保障级别 （对内服务 or 对外服务 ｜ 使用人群）</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">是否需要黑白名单，哪个位置加</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">是否需要幂等，以及实现方案</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">是否需要异步，以及实现方案</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h2 id=\"详细解释\"><a class=\"markdownIt-Anchor\" href=\"#详细解释\"></a> 详细解释</h2>\n<h3 id=\"标准接口命名\"><a class=\"markdownIt-Anchor\" href=\"#标准接口命名\"></a> 标准接口命名</h3>\n<ul>\n<li>\n<p>范例：<br><code>xxx/user/p0/v1/getuserInfo</code><br>业务线 / 所属服务 / 保护级别 / 版本 / getuserInfo</p>\n</li>\n<li>\n<p>禁止，PathVariable，不好管理，性能也有点问题<br>例如：/user/{user_id}</p>\n</li>\n<li>\n<p>禁止，除了 get、post 以外的method，网关不好管理</p>\n</li>\n<li>\n<p><strong>保护级别</strong></p>\n<ul>\n<li>p0: 主流程接口，对外服务核心流程，一般此类接口挂了，用户就会发现系统有问题。<br>需要全力保障的接口</li>\n<li>p1: 非必要业务接口，一般是非核心查询接口，这类接口挂了，用户不容易察觉，<br>网关可以进行接口限流，根据user level 接口限流，也可以拿这类接口开刀。</li>\n<li>p2: 信息采集类接口，可以不用保证可用性，后端也永远返回成功，<br>服务资源不足时候，网关可以直接下掉他们。</li>\n</ul>\n</li>\n<li>\n<p>版本号</p>\n<ul>\n<li>使用v1、v2即可</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"header\"><a class=\"markdownIt-Anchor\" href=\"#header\"></a> header</h3>\n<ul>\n<li>\n<p>jwt</p>\n</li>\n<li>\n<p>业务上下文，采集使用</p>\n<p>如 user_id，client_id，client_type，biz，version，user_level，addr 等</p>\n<p>按需添加</p>\n</li>\n<li>\n<p>调用链，trace_id，span_id，</p>\n<p>一般由工具生成。</p>\n</li>\n</ul>\n<h3 id=\"入参\"><a class=\"markdownIt-Anchor\" href=\"#入参\"></a> 入参</h3>\n<ul>\n<li>\n<p>对外服务公共参数</p>\n<ul>\n<li>防篡改签名</li>\n<li>加token</li>\n</ul>\n</li>\n<li>\n<p>对内服务公共参数</p>\n<ul>\n<li>user_id</li>\n<li>biz_id</li>\n<li>service_id</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"出参\"><a class=\"markdownIt-Anchor\" href=\"#出参\"></a> 出参</h3>\n<ul>\n<li>\n<p>类型</p>\n<p>强制使用 application/json 类型，尽量为字符串类型。</p>\n<p>避免返回Long。</p>\n</li>\n<li>\n<p>返回码</p>\n<p>业务异常、系统异常要分开。<br>业务异常保证无歧义，系统异常返回码为99999，降级使用。<br>确保多重状态，有不同的返回码，<br>例如，有一个接口叫&quot;收单接口&quot;，其内部调用&quot;下单&quot;接口。<br>收单服务正常的时候，下单接口可能返回失败。<br>设计接口结构时，状态码不能有歧义，“收单正常，下单失败” 与 “收单失败”  返回不同的状态码</p>\n</li>\n<li>\n<p>包装结构</p>\n<p>错误返回：<code>&#123; code, msg, trace_id &#125;</code><br>正常返回：<code>&#123; code, msg, result: &#123;&#125; &#125;</code> <br>分页返回：<code>&#123; code, msg, result: &#123; recordList:[], page_info:&#123;&#125; &#125; &#125;</code><br><strong>result 不允许为数组，默认为 空 {}，在java中使用 emptyMap 常量</strong></p>\n</li>\n</ul>\n<h3 id=\"实现幂等的策略\"><a class=\"markdownIt-Anchor\" href=\"#实现幂等的策略\"></a> 实现幂等的策略</h3>\n<ul>\n<li>\n<p>唯一id + 时间字段。通过时间过滤后，使用trans_id 避免重复 （最通用的实现）</p>\n<p>可以加前置 缓存队列 ，进行专门的去重。</p>\n</li>\n<li>\n<p>新增类接口，加唯一索引。（低并发下，实现最简单）</p>\n</li>\n<li>\n<p>乐观锁字段。（效率最高，但大量并发时需要避免）</p>\n</li>\n<li>\n<p>服务端发放提交票据，（两次交互，费时费力，不推荐）</p>\n</li>\n<li>\n<p>状态机幂等， <code>set order_status = [done]</code> 天生幂等</p>\n</li>\n</ul>\n<p>效率优先：乐观锁 &gt; 唯一约束 &gt; 唯一索引</p>\n<h3 id=\"异步策略\"><a class=\"markdownIt-Anchor\" href=\"#异步策略\"></a> 异步策略</h3>\n<p>例如<strong>上传接口</strong></p>\n<ul>\n<li>同步</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SyncUploadResponse <span class=\"hljs-title\">syncUpload</span><span class=\"hljs-params\">(SyncUploadRequest request)</span> </span>&#123;<br>  SyncUploadResponse response = <span class=\"hljs-keyword\">new</span> SyncUploadResponse();<br>  response.setDownloadUrl(uploadFile(request.getFile()));<br>  response.setThumbnailDownloadUrl(uploadThumbnailFile(request.getFile()));<br>  <span class=\"hljs-keyword\">return</span> response;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>异步上传，立即返回一个任务id，客户端根据任务id轮询结果。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//在接口实现上，我们同样把上传任务提交到线程池处理，但是并不会同步等待任务完成，而是完成后把结果写入一个 HashMap，任务查询接口通过查询这个 HashMap 来获得文件 的 URL</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">asyncDemo</span> </span>&#123;<br><br>    <span class=\"hljs-comment\">//计数器，作为上传任务的ID</span><br>    <span class=\"hljs-keyword\">private</span> AtomicInteger atomicInteger = <span class=\"hljs-keyword\">new</span> AtomicInteger(<span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-comment\">//暂存上传操作的结果，生产代码需要考虑数据持久化</span><br>    <span class=\"hljs-keyword\">private</span> ConcurrentHashMap&lt;String, SyncQueryUploadTaskResponse&gt; downloadUrl = <span class=\"hljs-keyword\">new</span> ConcurrentHashMap&lt;&gt;();<br><br>    <span class=\"hljs-comment\">// 立即返回任务id</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> AsyncUploadResponse <span class=\"hljs-title\">asyncUpload</span><span class=\"hljs-params\">(AsyncUploadRequest request)</span> </span>&#123;<br>        AsyncUploadResponse response = <span class=\"hljs-keyword\">new</span> AsyncUploadResponse();<br>        <span class=\"hljs-comment\">//生成唯一的上传任务ID</span><br>        String taskId = <span class=\"hljs-string\">&quot;upload&quot;</span> + atomicInteger.incrementAndGet<br>        <span class=\"hljs-comment\">//异步上传操作只返回任务ID</span><br>        response.setTaskId(taskId);<br>        <span class=\"hljs-comment\">//提交上传原始文件操作到线程池异步处理</span><br>        threadPool.execute(() -&gt; &#123;<br>            String url = uploadFile(request.getFile());<br>            <span class=\"hljs-comment\">//如果ConcurrentHashMap不包含Key，则初始化一个SyncQueryUploadTaskResponse</span><br>            downloadUrl.computeIfAbsent(taskId,<br>                    id -&gt; <span class=\"hljs-keyword\">new</span> SyncQueryUploadTaskResponse(id)).setDownloadUrl(url);<br>        &#125;);<br><br>        <span class=\"hljs-comment\">//提交上传缩略图操作到线程池异步处理</span><br>        threadPool.execute(() -&gt; &#123;<br>            String url = uploadThumbnailFile(request.getFile());<br>            downloadUrl.computeIfAbsent(taskId,<br>                    id -&gt; <span class=\"hljs-keyword\">new</span> SyncQueryUploadTaskResponse(id)).setThumbnailDownloadUrl(url);<br>        &#125;);<br>        <span class=\"hljs-keyword\">return</span> response;<br>    &#125;<br><br></code></pre></td></tr></table></figure>"},{"title":"mysql开发规范","date":"2021-07-27T14:53:44.000Z","toc":true,"hide":false,"_content":"\n\n\nhttp设计规范，设计接口后，可以对照自查表自省一下。\n\n<!-- more -->\n\n------\n\n\n\n## **建表规范**\n\n\n\n1. 默认使用使用innoDB 引擎，字符集 utf8mb4\n2. 表名称规范<br>`[biz]_xxxx_[app|mis]_conf` : 在线、离线服务配置。 <br>`[biz]_xxxx_record` : 数据表，最高优先级。<br>`[biz]_xxxx_[app|mis]log` : 日志表，低优先级\n3. 所有字段 NOT NULL ，优先设置 unsigned，小数设置为decimal，金额存成分，时间设置为datatime\n4. 字段最大长度，保存克制，防止建索引时空间不够。\n5. 字段长度大于1024需要拆分表，使用text， 主表上存拆分表id。\n6. 表示 “是否” 字段，一律使用 if_xxx 的方式命名，数据类型是unsigned tinyint\n7. 日增10万，年增5000万，id使用bigint，雪花算法。其余情况使用integer自增主键\n8. 字段顺序依次为：主键、业务主键、状态、各种外键、各种分类、具体props、base属性… <br>正确示例：id，order_id，order_status，product_id，user_id，order_time\n9. 保留名称，show、update、desc、status、range、match、delayed\n10. 推荐：单表最大长度小于2000万，单行长度小于16Kb，单表小于2g\n\n\n\n\n\n## **索引规范**\n\n1. 联合索引的字段数目不能超过5，单表索引数量也不能超过5，索引设计遵循B+ Tree最左前匹配原则\n2. 对一个VARCHAR(N)列创建索引时，通常取其50%（甚至更小）左右长度创建前缀索引就足以满足80%以上的查询需求了，没必要创建整列的全长度索引  \n3. 根据业务命名空间的顺序构造联合索引，比如 productId/userId/serviceId/time/xxx\n4. order by ， group by 的字段需要建立索引，尽量不使用groupby，orderby 使用java进程完成此操作\n5. 业务上的全局唯一字段，需要建立唯一索引\n6. 事物中，如 SELECT * FROM yes WHERE name ='yes' FOR UPDATE; <br>通过等普通条件判断【name = xxx】进行筛选加锁时，则该列（name）需要加索引。否则容易锁表。\n7. 索引是要建在尽量不改动的字段上，频繁的变动索引列，对系统压力较大\n\n\n\n\n\n\n## **SQL开发规范**\n\n1. 对于 java 程序，只能使用 sql 模板查询，不允许使用各类动态sql生成器。\n\n2. 强烈推荐：只使用 mybatis_code_helper_pro 生成 xml sql 语句。\n\n3. 对外在线接口：<br>使用短sql，禁止三个表 join，禁止 where 子句，禁止 sql 函数。<br>对外接口尽量避免复杂查询，查询首先保证拓展性。\n\n4. 推荐：使用mysql执行计划验收sql语句，注意索引的有序性，尽量使用覆盖索引。\n\n5. 事务避免本类调用，使用hutool，SpringUtil获取事务方法。<br>直接使用传统 commit 指令也是不错的选择。\n\n6. 超过10万行数据，首先确定分页的必要性；能否转换为下拉查询，或时间查询。<br>必须精确分页的话，查询使用 inner join\n\n   ```sql\n   select * from tables inner join\n   ( select id from tables where [条件]  order by xxx limie 10000,10 )\n   using id;\n   ```\n\n\n\n\n\n##  **分库分表后查询规范**\n\n- 禁用语句\n\n\n1. 分表后尽量只查询，或者根据 id update，避免范围修改，严禁莽撞的跨区修改。\n2. 禁止，子查询，group by，order by\n3. 禁止，悲观锁，使用Redisson替代数据库悲观锁（尽量使用无锁方法处理业务逻辑）。\n4. 禁止，update sharding-key。update 分片键后可能会导致后面的查询找不到数据。\n5. 禁止，跨区 update 、delete [order by] limit 。 mycat会在多个节点执行 limit语句，造成过多删除。\n\n","source":"_posts/技术规范/mysql开发规范.md","raw":"---\ntitle: mysql开发规范\ndate: 2021-07-27 22:53:44\ntoc: true \n\ncategories:\n- 后端\n\ntags:\n- mysql\n- 技术规范\n- 设计\n\nhide: false\n---\n\n\n\nhttp设计规范，设计接口后，可以对照自查表自省一下。\n\n<!-- more -->\n\n------\n\n\n\n## **建表规范**\n\n\n\n1. 默认使用使用innoDB 引擎，字符集 utf8mb4\n2. 表名称规范<br>`[biz]_xxxx_[app|mis]_conf` : 在线、离线服务配置。 <br>`[biz]_xxxx_record` : 数据表，最高优先级。<br>`[biz]_xxxx_[app|mis]log` : 日志表，低优先级\n3. 所有字段 NOT NULL ，优先设置 unsigned，小数设置为decimal，金额存成分，时间设置为datatime\n4. 字段最大长度，保存克制，防止建索引时空间不够。\n5. 字段长度大于1024需要拆分表，使用text， 主表上存拆分表id。\n6. 表示 “是否” 字段，一律使用 if_xxx 的方式命名，数据类型是unsigned tinyint\n7. 日增10万，年增5000万，id使用bigint，雪花算法。其余情况使用integer自增主键\n8. 字段顺序依次为：主键、业务主键、状态、各种外键、各种分类、具体props、base属性… <br>正确示例：id，order_id，order_status，product_id，user_id，order_time\n9. 保留名称，show、update、desc、status、range、match、delayed\n10. 推荐：单表最大长度小于2000万，单行长度小于16Kb，单表小于2g\n\n\n\n\n\n## **索引规范**\n\n1. 联合索引的字段数目不能超过5，单表索引数量也不能超过5，索引设计遵循B+ Tree最左前匹配原则\n2. 对一个VARCHAR(N)列创建索引时，通常取其50%（甚至更小）左右长度创建前缀索引就足以满足80%以上的查询需求了，没必要创建整列的全长度索引  \n3. 根据业务命名空间的顺序构造联合索引，比如 productId/userId/serviceId/time/xxx\n4. order by ， group by 的字段需要建立索引，尽量不使用groupby，orderby 使用java进程完成此操作\n5. 业务上的全局唯一字段，需要建立唯一索引\n6. 事物中，如 SELECT * FROM yes WHERE name ='yes' FOR UPDATE; <br>通过等普通条件判断【name = xxx】进行筛选加锁时，则该列（name）需要加索引。否则容易锁表。\n7. 索引是要建在尽量不改动的字段上，频繁的变动索引列，对系统压力较大\n\n\n\n\n\n\n## **SQL开发规范**\n\n1. 对于 java 程序，只能使用 sql 模板查询，不允许使用各类动态sql生成器。\n\n2. 强烈推荐：只使用 mybatis_code_helper_pro 生成 xml sql 语句。\n\n3. 对外在线接口：<br>使用短sql，禁止三个表 join，禁止 where 子句，禁止 sql 函数。<br>对外接口尽量避免复杂查询，查询首先保证拓展性。\n\n4. 推荐：使用mysql执行计划验收sql语句，注意索引的有序性，尽量使用覆盖索引。\n\n5. 事务避免本类调用，使用hutool，SpringUtil获取事务方法。<br>直接使用传统 commit 指令也是不错的选择。\n\n6. 超过10万行数据，首先确定分页的必要性；能否转换为下拉查询，或时间查询。<br>必须精确分页的话，查询使用 inner join\n\n   ```sql\n   select * from tables inner join\n   ( select id from tables where [条件]  order by xxx limie 10000,10 )\n   using id;\n   ```\n\n\n\n\n\n##  **分库分表后查询规范**\n\n- 禁用语句\n\n\n1. 分表后尽量只查询，或者根据 id update，避免范围修改，严禁莽撞的跨区修改。\n2. 禁止，子查询，group by，order by\n3. 禁止，悲观锁，使用Redisson替代数据库悲观锁（尽量使用无锁方法处理业务逻辑）。\n4. 禁止，update sharding-key。update 分片键后可能会导致后面的查询找不到数据。\n5. 禁止，跨区 update 、delete [order by] limit 。 mycat会在多个节点执行 limit语句，造成过多删除。\n\n","slug":"技术规范/mysql开发规范","published":1,"updated":"2021-07-27T14:53:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrs2dsdy000bhufy933ffiz8","content":"<p>http设计规范，设计接口后，可以对照自查表自省一下。</p>\n<span id=\"more\"></span>\n<hr>\n<h2><span id=\"建表规范\"> <strong>建表规范</strong></span></h2>\n<ol>\n<li>默认使用使用innoDB 引擎，字符集 utf8mb4</li>\n<li>表名称规范<br><code>[biz]_xxxx_[app|mis]_conf</code> : 在线、离线服务配置。 <br><code>[biz]_xxxx_record</code> : 数据表，最高优先级。<br><code>[biz]_xxxx_[app|mis]log</code> : 日志表，低优先级</li>\n<li>所有字段 NOT NULL ，优先设置 unsigned，小数设置为decimal，金额存成分，时间设置为datatime</li>\n<li>字段最大长度，保存克制，防止建索引时空间不够。</li>\n<li>字段长度大于1024需要拆分表，使用text， 主表上存拆分表id。</li>\n<li>表示 “是否” 字段，一律使用 if_xxx 的方式命名，数据类型是unsigned tinyint</li>\n<li>日增10万，年增5000万，id使用bigint，雪花算法。其余情况使用integer自增主键</li>\n<li>字段顺序依次为：主键、业务主键、状态、各种外键、各种分类、具体props、base属性… <br>正确示例：id，order_id，order_status，product_id，user_id，order_time</li>\n<li>保留名称，show、update、desc、status、range、match、delayed</li>\n<li>推荐：单表最大长度小于2000万，单行长度小于16Kb，单表小于2g</li>\n</ol>\n<h2><span id=\"索引规范\"> <strong>索引规范</strong></span></h2>\n<ol>\n<li>联合索引的字段数目不能超过5，单表索引数量也不能超过5，索引设计遵循B+ Tree最左前匹配原则</li>\n<li>对一个VARCHAR(N)列创建索引时，通常取其50%（甚至更小）左右长度创建前缀索引就足以满足80%以上的查询需求了，没必要创建整列的全长度索引</li>\n<li>根据业务命名空间的顺序构造联合索引，比如 productId/userId/serviceId/time/xxx</li>\n<li>order by ， group by 的字段需要建立索引，尽量不使用groupby，orderby 使用java进程完成此操作</li>\n<li>业务上的全局唯一字段，需要建立唯一索引</li>\n<li>事物中，如 SELECT * FROM yes WHERE name =‘yes’ FOR UPDATE; <br>通过等普通条件判断【name = xxx】进行筛选加锁时，则该列（name）需要加索引。否则容易锁表。</li>\n<li>索引是要建在尽量不改动的字段上，频繁的变动索引列，对系统压力较大</li>\n</ol>\n<h2><span id=\"sql开发规范\"> <strong>SQL开发规范</strong></span></h2>\n<ol>\n<li>\n<p>对于 java 程序，只能使用 sql 模板查询，不允许使用各类动态sql生成器。</p>\n</li>\n<li>\n<p>强烈推荐：只使用 mybatis_code_helper_pro 生成 xml sql 语句。</p>\n</li>\n<li>\n<p>对外在线接口：<br>使用短sql，禁止三个表 join，禁止 where 子句，禁止 sql 函数。<br>对外接口尽量避免复杂查询，查询首先保证拓展性。</p>\n</li>\n<li>\n<p>推荐：使用mysql执行计划验收sql语句，注意索引的有序性，尽量使用覆盖索引。</p>\n</li>\n<li>\n<p>事务避免本类调用，使用hutool，SpringUtil获取事务方法。<br>直接使用传统 commit 指令也是不错的选择。</p>\n</li>\n<li>\n<p>超过10万行数据，首先确定分页的必要性；能否转换为下拉查询，或时间查询。<br>必须精确分页的话，查询使用 inner join</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> tables <span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span><br>( <span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> tables <span class=\"hljs-keyword\">where</span> [条件]  <span class=\"hljs-keyword\">order</span> <span class=\"hljs-keyword\">by</span> xxx limie <span class=\"hljs-number\">10000</span>,<span class=\"hljs-number\">10</span> )<br><span class=\"hljs-keyword\">using</span> id;<br></code></pre></div></td></tr></table></figure>\n</li>\n</ol>\n<h2><span id=\"分库分表后查询规范\"> <strong>分库分表后查询规范</strong></span></h2>\n<ul>\n<li>禁用语句</li>\n</ul>\n<ol>\n<li>分表后尽量只查询，或者根据 id update，避免范围修改，严禁莽撞的跨区修改。</li>\n<li>禁止，子查询，group by，order by</li>\n<li>禁止，悲观锁，使用Redisson替代数据库悲观锁（尽量使用无锁方法处理业务逻辑）。</li>\n<li>禁止，update sharding-key。update 分片键后可能会导致后面的查询找不到数据。</li>\n<li>禁止，跨区 update 、delete [order by] limit 。 mycat会在多个节点执行 limit语句，造成过多删除。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>http设计规范，设计接口后，可以对照自查表自省一下。</p>","more":"<hr />\n<h2 id=\"建表规范\"><a class=\"markdownIt-Anchor\" href=\"#建表规范\"></a> <strong>建表规范</strong></h2>\n<ol>\n<li>默认使用使用innoDB 引擎，字符集 utf8mb4</li>\n<li>表名称规范<br><code>[biz]_xxxx_[app|mis]_conf</code> : 在线、离线服务配置。 <br><code>[biz]_xxxx_record</code> : 数据表，最高优先级。<br><code>[biz]_xxxx_[app|mis]log</code> : 日志表，低优先级</li>\n<li>所有字段 NOT NULL ，优先设置 unsigned，小数设置为decimal，金额存成分，时间设置为datatime</li>\n<li>字段最大长度，保存克制，防止建索引时空间不够。</li>\n<li>字段长度大于1024需要拆分表，使用text， 主表上存拆分表id。</li>\n<li>表示 “是否” 字段，一律使用 if_xxx 的方式命名，数据类型是unsigned tinyint</li>\n<li>日增10万，年增5000万，id使用bigint，雪花算法。其余情况使用integer自增主键</li>\n<li>字段顺序依次为：主键、业务主键、状态、各种外键、各种分类、具体props、base属性… <br>正确示例：id，order_id，order_status，product_id，user_id，order_time</li>\n<li>保留名称，show、update、desc、status、range、match、delayed</li>\n<li>推荐：单表最大长度小于2000万，单行长度小于16Kb，单表小于2g</li>\n</ol>\n<h2 id=\"索引规范\"><a class=\"markdownIt-Anchor\" href=\"#索引规范\"></a> <strong>索引规范</strong></h2>\n<ol>\n<li>联合索引的字段数目不能超过5，单表索引数量也不能超过5，索引设计遵循B+ Tree最左前匹配原则</li>\n<li>对一个VARCHAR(N)列创建索引时，通常取其50%（甚至更小）左右长度创建前缀索引就足以满足80%以上的查询需求了，没必要创建整列的全长度索引</li>\n<li>根据业务命名空间的顺序构造联合索引，比如 productId/userId/serviceId/time/xxx</li>\n<li>order by ， group by 的字段需要建立索引，尽量不使用groupby，orderby 使用java进程完成此操作</li>\n<li>业务上的全局唯一字段，需要建立唯一索引</li>\n<li>事物中，如 SELECT * FROM yes WHERE name =‘yes’ FOR UPDATE; <br>通过等普通条件判断【name = xxx】进行筛选加锁时，则该列（name）需要加索引。否则容易锁表。</li>\n<li>索引是要建在尽量不改动的字段上，频繁的变动索引列，对系统压力较大</li>\n</ol>\n<h2 id=\"sql开发规范\"><a class=\"markdownIt-Anchor\" href=\"#sql开发规范\"></a> <strong>SQL开发规范</strong></h2>\n<ol>\n<li>\n<p>对于 java 程序，只能使用 sql 模板查询，不允许使用各类动态sql生成器。</p>\n</li>\n<li>\n<p>强烈推荐：只使用 mybatis_code_helper_pro 生成 xml sql 语句。</p>\n</li>\n<li>\n<p>对外在线接口：<br>使用短sql，禁止三个表 join，禁止 where 子句，禁止 sql 函数。<br>对外接口尽量避免复杂查询，查询首先保证拓展性。</p>\n</li>\n<li>\n<p>推荐：使用mysql执行计划验收sql语句，注意索引的有序性，尽量使用覆盖索引。</p>\n</li>\n<li>\n<p>事务避免本类调用，使用hutool，SpringUtil获取事务方法。<br>直接使用传统 commit 指令也是不错的选择。</p>\n</li>\n<li>\n<p>超过10万行数据，首先确定分页的必要性；能否转换为下拉查询，或时间查询。<br>必须精确分页的话，查询使用 inner join</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> tables <span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span><br>( <span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> tables <span class=\"hljs-keyword\">where</span> [条件]  <span class=\"hljs-keyword\">order</span> <span class=\"hljs-keyword\">by</span> xxx limie <span class=\"hljs-number\">10000</span>,<span class=\"hljs-number\">10</span> )<br><span class=\"hljs-keyword\">using</span> id;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"分库分表后查询规范\"><a class=\"markdownIt-Anchor\" href=\"#分库分表后查询规范\"></a> <strong>分库分表后查询规范</strong></h2>\n<ul>\n<li>禁用语句</li>\n</ul>\n<ol>\n<li>分表后尽量只查询，或者根据 id update，避免范围修改，严禁莽撞的跨区修改。</li>\n<li>禁止，子查询，group by，order by</li>\n<li>禁止，悲观锁，使用Redisson替代数据库悲观锁（尽量使用无锁方法处理业务逻辑）。</li>\n<li>禁止，update sharding-key。update 分片键后可能会导致后面的查询找不到数据。</li>\n<li>禁止，跨区 update 、delete [order by] limit 。 mycat会在多个节点执行 limit语句，造成过多删除。</li>\n</ol>"},{"title":"分支规范","date":"2021-07-29T19:06:46.000Z","toc":true,"hide":false,"_content":"\n\n\n介绍一个分支模型 - AoneFlow。<br>已经使用1年，目前没遇到坑，用起来也比较舒服，优雅。\n<!-- more -->\n\n------\n\n\n\n## 分支规范\nAoneFlow：一种 TrunkBased 与 GitFlow  的折衷方案\n\n\n\n#### 三种分支类型\n- 主干分支 master tag: v1.2、 v1.3 <br>对应线上的当前代码，需要只读保护。\n- 发布分支 release/qa1、release/qa2… 、release/ prod <br>对应测试环境、预发环境上的代码（测试环境可能有很多个，有时候需要并行测试）<br>禁止直接push，仅支持merge request 后push\n- 特性分支 feature/001、feature/002<br>对应功能点分支。\n\n\n\n#### 组成\n一个master + N个 feature 分支 + N个 release 分支\n\n\n\n#### 工作流程\n1. 开始工作前，从master 创建特性分支 feature/001，开始开发。\n2. 开发完毕后，feature/001 提交 PR 到 release/qa， 此时开发者相互CR 其他人的 PR。\n3. CR完成后，合并所有PR，如果有冲突，重新提交无冲突的 PR，开始测试。\n4. 测试完毕后\n   1. 检查master 是否有更新，比如开发新特性的时候，master分支发生了hotfix。<br>如果有更新，则需要对 release/prod 进行回归测试。\n   2. 根据master 创新新分支 release/prod , 将 release/qa 合并到 release/prod\n5. 使用 release/prod merge 到 master <br>此时墙裂建议使用idea diff code 功能，整体看一下本次的合并，有没有额外的脏代码<br>合并后，添加 tag ，开始上线流程。\n6. 上线后，删除相关的 feature 分支，清理半年以前的tag，看日志，观察程序运行情况。\n\n\n\n#### 核心逻辑\n任何代码的改动，只能在feature 上push，其他分支的代码，如果需要响应改动<br>则通过 merge request 将变动传进来。\n\n\n\n#### 小痛点\n- 提交改动有点麻烦，每次都要在feature分支上提交后，在release分支上进行merge request\n- 这个模式的一个痛点，当n个f分支，n个release分支的时候<br>需要记住，n个feature分支，与release 分支间的对应关系。\n\n\n\n#### 工具\n- 阿里巴巴内部使用aone平台管理，对外发布的产品叫 [云效平台](https://help.aliyun.com/document_detail/153762.html?spm=5176.168087.J_7469444330.4.91376942pV1EvU)\n- 有赞qa平台，公交车发布系统，也借鉴了aoneFlow的思路[3.4 公交车系统](https://tech.youzan.com/team/)\n\n\n\n#### 参考介绍：\n- [项目版本管理的最佳实践：飞流Flow（阿里AoneFlow）篇](https://blog.csdn.net/bbcckkl/article/details/111087267)\n- [Git-flow分支管理与Aone-flow分支管理对比](https://blog.csdn.net/liumingzhe1/article/details/105287150)\n- [阿里巴巴如何管理代码分支？ ](https://www.infoq.cn/article/EaC4c6yiJrzZ_Gtaf9Ne)\n- [阿里巴巴在DevOps实践中的创新和思考-ppt ](http://bos.itdks.com/7b7b1baa2f1244b8b3c2b3ae26de3eea.pdf)\n\n","source":"_posts/技术规范/分支规范.md","raw":"---\ntitle: 分支规范\ndate: 2021-07-30 03:06:46\ntoc: true\n\ncategories:\n  - 后端\n\ntags:\n  - 设计\n  - 技术规范\n\n\nhide: false\n---\n\n\n\n介绍一个分支模型 - AoneFlow。<br>已经使用1年，目前没遇到坑，用起来也比较舒服，优雅。\n<!-- more -->\n\n------\n\n\n\n## 分支规范\nAoneFlow：一种 TrunkBased 与 GitFlow  的折衷方案\n\n\n\n#### 三种分支类型\n- 主干分支 master tag: v1.2、 v1.3 <br>对应线上的当前代码，需要只读保护。\n- 发布分支 release/qa1、release/qa2… 、release/ prod <br>对应测试环境、预发环境上的代码（测试环境可能有很多个，有时候需要并行测试）<br>禁止直接push，仅支持merge request 后push\n- 特性分支 feature/001、feature/002<br>对应功能点分支。\n\n\n\n#### 组成\n一个master + N个 feature 分支 + N个 release 分支\n\n\n\n#### 工作流程\n1. 开始工作前，从master 创建特性分支 feature/001，开始开发。\n2. 开发完毕后，feature/001 提交 PR 到 release/qa， 此时开发者相互CR 其他人的 PR。\n3. CR完成后，合并所有PR，如果有冲突，重新提交无冲突的 PR，开始测试。\n4. 测试完毕后\n   1. 检查master 是否有更新，比如开发新特性的时候，master分支发生了hotfix。<br>如果有更新，则需要对 release/prod 进行回归测试。\n   2. 根据master 创新新分支 release/prod , 将 release/qa 合并到 release/prod\n5. 使用 release/prod merge 到 master <br>此时墙裂建议使用idea diff code 功能，整体看一下本次的合并，有没有额外的脏代码<br>合并后，添加 tag ，开始上线流程。\n6. 上线后，删除相关的 feature 分支，清理半年以前的tag，看日志，观察程序运行情况。\n\n\n\n#### 核心逻辑\n任何代码的改动，只能在feature 上push，其他分支的代码，如果需要响应改动<br>则通过 merge request 将变动传进来。\n\n\n\n#### 小痛点\n- 提交改动有点麻烦，每次都要在feature分支上提交后，在release分支上进行merge request\n- 这个模式的一个痛点，当n个f分支，n个release分支的时候<br>需要记住，n个feature分支，与release 分支间的对应关系。\n\n\n\n#### 工具\n- 阿里巴巴内部使用aone平台管理，对外发布的产品叫 [云效平台](https://help.aliyun.com/document_detail/153762.html?spm=5176.168087.J_7469444330.4.91376942pV1EvU)\n- 有赞qa平台，公交车发布系统，也借鉴了aoneFlow的思路[3.4 公交车系统](https://tech.youzan.com/team/)\n\n\n\n#### 参考介绍：\n- [项目版本管理的最佳实践：飞流Flow（阿里AoneFlow）篇](https://blog.csdn.net/bbcckkl/article/details/111087267)\n- [Git-flow分支管理与Aone-flow分支管理对比](https://blog.csdn.net/liumingzhe1/article/details/105287150)\n- [阿里巴巴如何管理代码分支？ ](https://www.infoq.cn/article/EaC4c6yiJrzZ_Gtaf9Ne)\n- [阿里巴巴在DevOps实践中的创新和思考-ppt ](http://bos.itdks.com/7b7b1baa2f1244b8b3c2b3ae26de3eea.pdf)\n\n","slug":"技术规范/分支规范","published":1,"updated":"2021-07-29T19:06:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrs2dsdz000chufy30y0huc1","content":"<p>介绍一个分支模型 - AoneFlow。<br>已经使用1年，目前没遇到坑，用起来也比较舒服，优雅。</p>\n<span id=\"more\"></span>\n<hr>\n<h2><span id=\"分支规范\"> 分支规范</span></h2>\n<p>AoneFlow：一种 TrunkBased 与 GitFlow  的折衷方案</p>\n<h4><span id=\"三种分支类型\"> 三种分支类型</span></h4>\n<ul>\n<li>主干分支 master tag: v1.2、 v1.3 <br>对应线上的当前代码，需要只读保护。</li>\n<li>发布分支 release/qa1、release/qa2… 、release/ prod <br>对应测试环境、预发环境上的代码（测试环境可能有很多个，有时候需要并行测试）<br>禁止直接push，仅支持merge request 后push</li>\n<li>特性分支 feature/001、feature/002<br>对应功能点分支。</li>\n</ul>\n<h4><span id=\"组成\"> 组成</span></h4>\n<p>一个master + N个 feature 分支 + N个 release 分支</p>\n<h4><span id=\"工作流程\"> 工作流程</span></h4>\n<ol>\n<li>开始工作前，从master 创建特性分支 feature/001，开始开发。</li>\n<li>开发完毕后，feature/001 提交 PR 到 release/qa， 此时开发者相互CR 其他人的 PR。</li>\n<li>CR完成后，合并所有PR，如果有冲突，重新提交无冲突的 PR，开始测试。</li>\n<li>测试完毕后\n<ol>\n<li>检查master 是否有更新，比如开发新特性的时候，master分支发生了hotfix。<br>如果有更新，则需要对 release/prod 进行回归测试。</li>\n<li>根据master 创新新分支 release/prod , 将 release/qa 合并到 release/prod</li>\n</ol>\n</li>\n<li>使用 release/prod merge 到 master <br>此时墙裂建议使用idea diff code 功能，整体看一下本次的合并，有没有额外的脏代码<br>合并后，添加 tag ，开始上线流程。</li>\n<li>上线后，删除相关的 feature 分支，清理半年以前的tag，看日志，观察程序运行情况。</li>\n</ol>\n<h4><span id=\"核心逻辑\"> 核心逻辑</span></h4>\n<p>任何代码的改动，只能在feature 上push，其他分支的代码，如果需要响应改动<br>则通过 merge request 将变动传进来。</p>\n<h4><span id=\"小痛点\"> 小痛点</span></h4>\n<ul>\n<li>提交改动有点麻烦，每次都要在feature分支上提交后，在release分支上进行merge request</li>\n<li>这个模式的一个痛点，当n个f分支，n个release分支的时候<br>需要记住，n个feature分支，与release 分支间的对应关系。</li>\n</ul>\n<h4><span id=\"工具\"> 工具</span></h4>\n<ul>\n<li>阿里巴巴内部使用aone平台管理，对外发布的产品叫 <a href=\"https://help.aliyun.com/document_detail/153762.html?spm=5176.168087.J_7469444330.4.91376942pV1EvU\">云效平台</a></li>\n<li>有赞qa平台，公交车发布系统，也借鉴了aoneFlow的思路<a href=\"https://tech.youzan.com/team/\">3.4 公交车系统</a></li>\n</ul>\n<h4><span id=\"参考介绍\"> 参考介绍：</span></h4>\n<ul>\n<li><a href=\"https://blog.csdn.net/bbcckkl/article/details/111087267\">项目版本管理的最佳实践：飞流Flow（阿里AoneFlow）篇</a></li>\n<li><a href=\"https://blog.csdn.net/liumingzhe1/article/details/105287150\">Git-flow分支管理与Aone-flow分支管理对比</a></li>\n<li><a href=\"https://www.infoq.cn/article/EaC4c6yiJrzZ_Gtaf9Ne\">阿里巴巴如何管理代码分支？ </a></li>\n<li><a href=\"http://bos.itdks.com/7b7b1baa2f1244b8b3c2b3ae26de3eea.pdf\">阿里巴巴在DevOps实践中的创新和思考-ppt </a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>介绍一个分支模型 - AoneFlow。<br>已经使用1年，目前没遇到坑，用起来也比较舒服，优雅。</p>","more":"<hr />\n<h2 id=\"分支规范\"><a class=\"markdownIt-Anchor\" href=\"#分支规范\"></a> 分支规范</h2>\n<p>AoneFlow：一种 TrunkBased 与 GitFlow  的折衷方案</p>\n<h4 id=\"三种分支类型\"><a class=\"markdownIt-Anchor\" href=\"#三种分支类型\"></a> 三种分支类型</h4>\n<ul>\n<li>主干分支 master tag: v1.2、 v1.3 <br>对应线上的当前代码，需要只读保护。</li>\n<li>发布分支 release/qa1、release/qa2… 、release/ prod <br>对应测试环境、预发环境上的代码（测试环境可能有很多个，有时候需要并行测试）<br>禁止直接push，仅支持merge request 后push</li>\n<li>特性分支 feature/001、feature/002<br>对应功能点分支。</li>\n</ul>\n<h4 id=\"组成\"><a class=\"markdownIt-Anchor\" href=\"#组成\"></a> 组成</h4>\n<p>一个master + N个 feature 分支 + N个 release 分支</p>\n<h4 id=\"工作流程\"><a class=\"markdownIt-Anchor\" href=\"#工作流程\"></a> 工作流程</h4>\n<ol>\n<li>开始工作前，从master 创建特性分支 feature/001，开始开发。</li>\n<li>开发完毕后，feature/001 提交 PR 到 release/qa， 此时开发者相互CR 其他人的 PR。</li>\n<li>CR完成后，合并所有PR，如果有冲突，重新提交无冲突的 PR，开始测试。</li>\n<li>测试完毕后\n<ol>\n<li>检查master 是否有更新，比如开发新特性的时候，master分支发生了hotfix。<br>如果有更新，则需要对 release/prod 进行回归测试。</li>\n<li>根据master 创新新分支 release/prod , 将 release/qa 合并到 release/prod</li>\n</ol>\n</li>\n<li>使用 release/prod merge 到 master <br>此时墙裂建议使用idea diff code 功能，整体看一下本次的合并，有没有额外的脏代码<br>合并后，添加 tag ，开始上线流程。</li>\n<li>上线后，删除相关的 feature 分支，清理半年以前的tag，看日志，观察程序运行情况。</li>\n</ol>\n<h4 id=\"核心逻辑\"><a class=\"markdownIt-Anchor\" href=\"#核心逻辑\"></a> 核心逻辑</h4>\n<p>任何代码的改动，只能在feature 上push，其他分支的代码，如果需要响应改动<br>则通过 merge request 将变动传进来。</p>\n<h4 id=\"小痛点\"><a class=\"markdownIt-Anchor\" href=\"#小痛点\"></a> 小痛点</h4>\n<ul>\n<li>提交改动有点麻烦，每次都要在feature分支上提交后，在release分支上进行merge request</li>\n<li>这个模式的一个痛点，当n个f分支，n个release分支的时候<br>需要记住，n个feature分支，与release 分支间的对应关系。</li>\n</ul>\n<h4 id=\"工具\"><a class=\"markdownIt-Anchor\" href=\"#工具\"></a> 工具</h4>\n<ul>\n<li>阿里巴巴内部使用aone平台管理，对外发布的产品叫 <a href=\"https://help.aliyun.com/document_detail/153762.html?spm=5176.168087.J_7469444330.4.91376942pV1EvU\">云效平台</a></li>\n<li>有赞qa平台，公交车发布系统，也借鉴了aoneFlow的思路<a href=\"https://tech.youzan.com/team/\">3.4 公交车系统</a></li>\n</ul>\n<h4 id=\"参考介绍\"><a class=\"markdownIt-Anchor\" href=\"#参考介绍\"></a> 参考介绍：</h4>\n<ul>\n<li><a href=\"https://blog.csdn.net/bbcckkl/article/details/111087267\">项目版本管理的最佳实践：飞流Flow（阿里AoneFlow）篇</a></li>\n<li><a href=\"https://blog.csdn.net/liumingzhe1/article/details/105287150\">Git-flow分支管理与Aone-flow分支管理对比</a></li>\n<li><a href=\"https://www.infoq.cn/article/EaC4c6yiJrzZ_Gtaf9Ne\">阿里巴巴如何管理代码分支？ </a></li>\n<li><a href=\"http://bos.itdks.com/7b7b1baa2f1244b8b3c2b3ae26de3eea.pdf\">阿里巴巴在DevOps实践中的创新和思考-ppt </a></li>\n</ul>"},{"title":"生产就绪备忘清单","toc":true,"hide":false,"date":"2021-07-30T07:37:15.000Z","_content":"\n\n\n功能完备只是起点，服务总要经过线上的打磨与历练； <br>这里有份清单标志着生产的就绪； <br>在街头，口口相传，哥哥来告诉弟弟\n\n<!-- more -->\n\n------\n\n\n\n## 生产就绪备忘清单\n\n\n\n\n\n| 要求         | 自查套路                                                     | 是否完成 | 备注 |\n| ------------ | ------------------------------------------------------------ | -------- | ---- |\n| 功能完备     | 对照产品文档；<br />对照接口文档回顾一遍<br />大约20分钟即可 |          |      |\n| 性能完备     | 预期流量是多少<br />是否需要压测，其实很多服务不需要压测<br />如果有点压力的话，可以与运维沟通加点机器<br />或者与组长提前沟通一下，说一下压力点 |          |      |\n| 容量规划     | 日志产物<br />IO上传、现在产物<br />产物留存时间<br />清理计划 |          |      |\n| 中间件迭代   | 中间件Schema<br />mysql、mq topic、es、hbase 是否准备完毕<br />不只要建好，更要确定此版本schema已经备份 |          |      |\n| 数据迭代     | 是否需要数据迁移<br />数据迁移功能是否经过测试<br />是否有线上验证逻辑 |          |      |\n| 兼容性考量   | 中间件：是否可以提前准备中间件环境<br />接口：与外部接口的交互，新旧版本支持情况<br />内部接口，是否有依赖关系，是否可以乱序上线 |          |      |\n| 配置文件     | 是否是prod 配置文件，是否完备                                |          |      |\n| 日志管理     | 走读代码<br />关键条件分支是否添加日志<br>日志量评估，3天，10天，90天分别多大。<br/>日志分级 |          |      |\n| 健康检查接口 | 是否具备<br />是否与监控组件调试通过<br />是否联通容器的Heathcheck |          |      |\n| 调用链监控   | 是否接入tracer <br />traceId 是否已经打通日志                |          |      |\n| 部署数量     | 多少流量，<br/>多少数据量，<br/>多少机器，<br/>是否可以快速扩容新节点 |          |      |\n| 高可用       | 是否是多节点，<br/>是否需要多集群，<br />如果部分节点宕机是否继续可用 |          |      |\n| 拓展性       | 是否是无状态应用<br />是否支持服务漂移<br/>有状态应用需要主备同步，副本机制 |          |      |\n| 回滚策略     | 确定上一个版本的tag<br>中间件schema 回滚语句准备完成<br />是否需要回滚数据 |          |      |\n\n","source":"_posts/技术规范/生产就绪备忘清单.md","raw":"---\ntitle: 生产就绪备忘清单\ntoc: true\ncategories:\n  - 后端\n\ntags:\n  - devOps\n  - 技术规范\nhide: false\ndate: 2021-07-30 15:37:15\n---\n\n\n\n功能完备只是起点，服务总要经过线上的打磨与历练； <br>这里有份清单标志着生产的就绪； <br>在街头，口口相传，哥哥来告诉弟弟\n\n<!-- more -->\n\n------\n\n\n\n## 生产就绪备忘清单\n\n\n\n\n\n| 要求         | 自查套路                                                     | 是否完成 | 备注 |\n| ------------ | ------------------------------------------------------------ | -------- | ---- |\n| 功能完备     | 对照产品文档；<br />对照接口文档回顾一遍<br />大约20分钟即可 |          |      |\n| 性能完备     | 预期流量是多少<br />是否需要压测，其实很多服务不需要压测<br />如果有点压力的话，可以与运维沟通加点机器<br />或者与组长提前沟通一下，说一下压力点 |          |      |\n| 容量规划     | 日志产物<br />IO上传、现在产物<br />产物留存时间<br />清理计划 |          |      |\n| 中间件迭代   | 中间件Schema<br />mysql、mq topic、es、hbase 是否准备完毕<br />不只要建好，更要确定此版本schema已经备份 |          |      |\n| 数据迭代     | 是否需要数据迁移<br />数据迁移功能是否经过测试<br />是否有线上验证逻辑 |          |      |\n| 兼容性考量   | 中间件：是否可以提前准备中间件环境<br />接口：与外部接口的交互，新旧版本支持情况<br />内部接口，是否有依赖关系，是否可以乱序上线 |          |      |\n| 配置文件     | 是否是prod 配置文件，是否完备                                |          |      |\n| 日志管理     | 走读代码<br />关键条件分支是否添加日志<br>日志量评估，3天，10天，90天分别多大。<br/>日志分级 |          |      |\n| 健康检查接口 | 是否具备<br />是否与监控组件调试通过<br />是否联通容器的Heathcheck |          |      |\n| 调用链监控   | 是否接入tracer <br />traceId 是否已经打通日志                |          |      |\n| 部署数量     | 多少流量，<br/>多少数据量，<br/>多少机器，<br/>是否可以快速扩容新节点 |          |      |\n| 高可用       | 是否是多节点，<br/>是否需要多集群，<br />如果部分节点宕机是否继续可用 |          |      |\n| 拓展性       | 是否是无状态应用<br />是否支持服务漂移<br/>有状态应用需要主备同步，副本机制 |          |      |\n| 回滚策略     | 确定上一个版本的tag<br>中间件schema 回滚语句准备完成<br />是否需要回滚数据 |          |      |\n\n","slug":"技术规范/生产就绪备忘清单","published":1,"updated":"2021-07-30T07:37:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrs2dse0000ghufyhba18emb","content":"<p>功能完备只是起点，服务总要经过线上的打磨与历练； <br>这里有份清单标志着生产的就绪； <br>在街头，口口相传，哥哥来告诉弟弟</p>\n<span id=\"more\"></span>\n<hr>\n<h2><span id=\"生产就绪备忘清单\"> 生产就绪备忘清单</span></h2>\n<table>\n<thead>\n<tr>\n<th>要求</th>\n<th>自查套路</th>\n<th>是否完成</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>功能完备</td>\n<td>对照产品文档；<br>对照接口文档回顾一遍<br>大约20分钟即可</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>性能完备</td>\n<td>预期流量是多少<br>是否需要压测，其实很多服务不需要压测<br>如果有点压力的话，可以与运维沟通加点机器<br>或者与组长提前沟通一下，说一下压力点</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>容量规划</td>\n<td>日志产物<br>IO上传、现在产物<br>产物留存时间<br>清理计划</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>中间件迭代</td>\n<td>中间件Schema<br>mysql、mq topic、es、hbase 是否准备完毕<br>不只要建好，更要确定此版本schema已经备份</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>数据迭代</td>\n<td>是否需要数据迁移<br>数据迁移功能是否经过测试<br>是否有线上验证逻辑</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>兼容性考量</td>\n<td>中间件：是否可以提前准备中间件环境<br>接口：与外部接口的交互，新旧版本支持情况<br>内部接口，是否有依赖关系，是否可以乱序上线</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>配置文件</td>\n<td>是否是prod 配置文件，是否完备</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>日志管理</td>\n<td>走读代码<br>关键条件分支是否添加日志<br>日志量评估，3天，10天，90天分别多大。<br>日志分级</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>健康检查接口</td>\n<td>是否具备<br>是否与监控组件调试通过<br>是否联通容器的Heathcheck</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>调用链监控</td>\n<td>是否接入tracer <br>traceId 是否已经打通日志</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>部署数量</td>\n<td>多少流量，<br>多少数据量，<br>多少机器，<br>是否可以快速扩容新节点</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>高可用</td>\n<td>是否是多节点，<br>是否需要多集群，<br>如果部分节点宕机是否继续可用</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>拓展性</td>\n<td>是否是无状态应用<br>是否支持服务漂移<br>有状态应用需要主备同步，副本机制</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>回滚策略</td>\n<td>确定上一个版本的tag<br>中间件schema 回滚语句准备完成<br>是否需要回滚数据</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p>功能完备只是起点，服务总要经过线上的打磨与历练； <br>这里有份清单标志着生产的就绪； <br>在街头，口口相传，哥哥来告诉弟弟</p>","more":"<hr />\n<h2 id=\"生产就绪备忘清单\"><a class=\"markdownIt-Anchor\" href=\"#生产就绪备忘清单\"></a> 生产就绪备忘清单</h2>\n<table>\n<thead>\n<tr>\n<th>要求</th>\n<th>自查套路</th>\n<th>是否完成</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>功能完备</td>\n<td>对照产品文档；<br />对照接口文档回顾一遍<br />大约20分钟即可</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>性能完备</td>\n<td>预期流量是多少<br />是否需要压测，其实很多服务不需要压测<br />如果有点压力的话，可以与运维沟通加点机器<br />或者与组长提前沟通一下，说一下压力点</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>容量规划</td>\n<td>日志产物<br />IO上传、现在产物<br />产物留存时间<br />清理计划</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>中间件迭代</td>\n<td>中间件Schema<br />mysql、mq topic、es、hbase 是否准备完毕<br />不只要建好，更要确定此版本schema已经备份</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>数据迭代</td>\n<td>是否需要数据迁移<br />数据迁移功能是否经过测试<br />是否有线上验证逻辑</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>兼容性考量</td>\n<td>中间件：是否可以提前准备中间件环境<br />接口：与外部接口的交互，新旧版本支持情况<br />内部接口，是否有依赖关系，是否可以乱序上线</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>配置文件</td>\n<td>是否是prod 配置文件，是否完备</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>日志管理</td>\n<td>走读代码<br />关键条件分支是否添加日志<br>日志量评估，3天，10天，90天分别多大。<br/>日志分级</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>健康检查接口</td>\n<td>是否具备<br />是否与监控组件调试通过<br />是否联通容器的Heathcheck</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>调用链监控</td>\n<td>是否接入tracer <br />traceId 是否已经打通日志</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>部署数量</td>\n<td>多少流量，<br/>多少数据量，<br/>多少机器，<br/>是否可以快速扩容新节点</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>高可用</td>\n<td>是否是多节点，<br/>是否需要多集群，<br />如果部分节点宕机是否继续可用</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>拓展性</td>\n<td>是否是无状态应用<br />是否支持服务漂移<br/>有状态应用需要主备同步，副本机制</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>回滚策略</td>\n<td>确定上一个版本的tag<br>中间件schema 回滚语句准备完成<br />是否需要回滚数据</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>"},{"title":"监控规范","toc":true,"hide":false,"date":"2021-07-30T09:27:14.000Z","_content":"\n\n\n去吧，把服务照明\n\n<!-- more -->\n\n------\n\n\n\n## 常见监控点\n\n\n\n### 系统层\n\n\n\n|            | 监控点 | 常用监控方案及工具 | 常见指标 | 报警点 |\n| ---------- | ------ | ------------------ | -------- | ------ |\n| 虚拟机监控 |        |                    |          |        |\n| 容器监控   |        |                    |          |        |\n|            |        |                    |          |        |\n\n\n\n### 网络层\n\n|                | 监控点 | 常用监控方案及工具 | 常见指标 | 报警点 |\n| -------------- | ------ | ------------------ | -------- | ------ |\n| 监控专线带宽   |        |                    |          |        |\n| 交换机基本情况 |        |                    |          |        |\n| 网络延迟       |        |                    |          |        |\n\n\n\n\n\n### 中间件\n\n|          | 监控点 | 常用监控方案及工具 | 常见指标 | 报警点 |\n| -------- | ------ | ------------------ | -------- | ------ |\n| 注册中心 |        |                    |          |        |\n|          |        |                    |          |        |\n| mysql    |        |                    |          |        |\n|          |        |                    |          |        |\n| redis    |        |                    |          |        |\n|          |        |                    |          |        |\n| es       |        |                    |          |        |\n|          |        |                    |          |        |\n\n\n\n### 应用程序本身\n\n|            | 监控点 | 常用监控方案及工具 | 常见指标 | 报警点 |\n| ---------- | ------ | ------------------ | -------- | ------ |\n| jvm        |        |                    |          |        |\n|            |        |                    |          |        |\n| GC         |        |                    |          |        |\n|            |        |                    |          |        |\n| 内存       |        |                    |          |        |\n|            |        |                    |          |        |\n| 线程       |        |                    |          |        |\n|            |        |                    |          |        |\n| 队列       |        |                    |          |        |\n|            |        |                    |          |        |\n| 缓存       |        |                    |          |        |\n|            |        |                    |          |        |\n| 可用性     |        |                    |          |        |\n|            |        |                    |          |        |\n| 业务正确性 |        |                    |          |        |\n\n\n\n\n\n## 日志规范\n\n#### 日志规范\n\n1. 对外服务接口，所有if分支需要打印日志\n2. 使用日志异步配置\n3. 禁止打印全部实体，打印实体id即可，实体关键属性即可\n4. 打印traceId\n\n\n\n#### 日志分级\n\n- DEBUG 用于开发调试；敏感信息一律使用debug。\n- INFO 用于重要流程信息；if 各种分支\n- WARN 用于需要关注但无需报警的问题；一般是为了方便排查的日志。\n- ERROR 需要报警的异常；一般是系统异常、需要人工介入的业务异常\n\n\n\n#### 日志分割\n\n近期（7天内）日志，根据日期&大小分割，保存日志原文。<br>如果有日志平台，则不需要保存长期日志<br>没有日志平台的话，需要保存30天日志，根据日期分割，使用压缩格式，文件中要体现时间。\n\n\n\n#### 日志中的信息\n\n- \n\n","source":"_posts/技术规范/监控规范.md","raw":"---\ntitle: 监控规范\ntoc: true\ncategories:\n  - 后端\n\ntags:\n  - devOps\n  - 技术规范\nhide: false\ndate: 2021-07-30 17:27:14\n---\n\n\n\n去吧，把服务照明\n\n<!-- more -->\n\n------\n\n\n\n## 常见监控点\n\n\n\n### 系统层\n\n\n\n|            | 监控点 | 常用监控方案及工具 | 常见指标 | 报警点 |\n| ---------- | ------ | ------------------ | -------- | ------ |\n| 虚拟机监控 |        |                    |          |        |\n| 容器监控   |        |                    |          |        |\n|            |        |                    |          |        |\n\n\n\n### 网络层\n\n|                | 监控点 | 常用监控方案及工具 | 常见指标 | 报警点 |\n| -------------- | ------ | ------------------ | -------- | ------ |\n| 监控专线带宽   |        |                    |          |        |\n| 交换机基本情况 |        |                    |          |        |\n| 网络延迟       |        |                    |          |        |\n\n\n\n\n\n### 中间件\n\n|          | 监控点 | 常用监控方案及工具 | 常见指标 | 报警点 |\n| -------- | ------ | ------------------ | -------- | ------ |\n| 注册中心 |        |                    |          |        |\n|          |        |                    |          |        |\n| mysql    |        |                    |          |        |\n|          |        |                    |          |        |\n| redis    |        |                    |          |        |\n|          |        |                    |          |        |\n| es       |        |                    |          |        |\n|          |        |                    |          |        |\n\n\n\n### 应用程序本身\n\n|            | 监控点 | 常用监控方案及工具 | 常见指标 | 报警点 |\n| ---------- | ------ | ------------------ | -------- | ------ |\n| jvm        |        |                    |          |        |\n|            |        |                    |          |        |\n| GC         |        |                    |          |        |\n|            |        |                    |          |        |\n| 内存       |        |                    |          |        |\n|            |        |                    |          |        |\n| 线程       |        |                    |          |        |\n|            |        |                    |          |        |\n| 队列       |        |                    |          |        |\n|            |        |                    |          |        |\n| 缓存       |        |                    |          |        |\n|            |        |                    |          |        |\n| 可用性     |        |                    |          |        |\n|            |        |                    |          |        |\n| 业务正确性 |        |                    |          |        |\n\n\n\n\n\n## 日志规范\n\n#### 日志规范\n\n1. 对外服务接口，所有if分支需要打印日志\n2. 使用日志异步配置\n3. 禁止打印全部实体，打印实体id即可，实体关键属性即可\n4. 打印traceId\n\n\n\n#### 日志分级\n\n- DEBUG 用于开发调试；敏感信息一律使用debug。\n- INFO 用于重要流程信息；if 各种分支\n- WARN 用于需要关注但无需报警的问题；一般是为了方便排查的日志。\n- ERROR 需要报警的异常；一般是系统异常、需要人工介入的业务异常\n\n\n\n#### 日志分割\n\n近期（7天内）日志，根据日期&大小分割，保存日志原文。<br>如果有日志平台，则不需要保存长期日志<br>没有日志平台的话，需要保存30天日志，根据日期分割，使用压缩格式，文件中要体现时间。\n\n\n\n#### 日志中的信息\n\n- \n\n","slug":"技术规范/监控规范","published":1,"updated":"2021-07-30T09:27:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrs2dse1000hhufyh4j7fmoe","content":"<p>去吧，把服务照明</p>\n<span id=\"more\"></span>\n<hr>\n<h2><span id=\"常见监控点\"> 常见监控点</span></h2>\n<h3><span id=\"系统层\"> 系统层</span></h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>监控点</th>\n<th>常用监控方案及工具</th>\n<th>常见指标</th>\n<th>报警点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>虚拟机监控</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>容器监控</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3><span id=\"网络层\"> 网络层</span></h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>监控点</th>\n<th>常用监控方案及工具</th>\n<th>常见指标</th>\n<th>报警点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>监控专线带宽</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>交换机基本情况</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>网络延迟</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3><span id=\"中间件\"> 中间件</span></h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>监控点</th>\n<th>常用监控方案及工具</th>\n<th>常见指标</th>\n<th>报警点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>注册中心</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>mysql</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>redis</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>es</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3><span id=\"应用程序本身\"> 应用程序本身</span></h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>监控点</th>\n<th>常用监控方案及工具</th>\n<th>常见指标</th>\n<th>报警点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>jvm</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>GC</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>内存</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>线程</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>队列</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>缓存</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>可用性</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>业务正确性</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2><span id=\"日志规范\"> 日志规范</span></h2>\n<h4><span id=\"日志规范\"> 日志规范</span></h4>\n<ol>\n<li>对外服务接口，所有if分支需要打印日志</li>\n<li>使用日志异步配置</li>\n<li>禁止打印全部实体，打印实体id即可，实体关键属性即可</li>\n<li>打印traceId</li>\n</ol>\n<h4><span id=\"日志分级\"> 日志分级</span></h4>\n<ul>\n<li>DEBUG 用于开发调试；敏感信息一律使用debug。</li>\n<li>INFO 用于重要流程信息；if 各种分支</li>\n<li>WARN 用于需要关注但无需报警的问题；一般是为了方便排查的日志。</li>\n<li>ERROR 需要报警的异常；一般是系统异常、需要人工介入的业务异常</li>\n</ul>\n<h4><span id=\"日志分割\"> 日志分割</span></h4>\n<p>近期（7天内）日志，根据日期&amp;大小分割，保存日志原文。<br>如果有日志平台，则不需要保存长期日志<br>没有日志平台的话，需要保存30天日志，根据日期分割，使用压缩格式，文件中要体现时间。</p>\n<h4><span id=\"日志中的信息\"> 日志中的信息</span></h4>\n<ul>\n<li></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>去吧，把服务照明</p>","more":"<hr />\n<h2 id=\"常见监控点\"><a class=\"markdownIt-Anchor\" href=\"#常见监控点\"></a> 常见监控点</h2>\n<h3 id=\"系统层\"><a class=\"markdownIt-Anchor\" href=\"#系统层\"></a> 系统层</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>监控点</th>\n<th>常用监控方案及工具</th>\n<th>常见指标</th>\n<th>报警点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>虚拟机监控</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>容器监控</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"网络层\"><a class=\"markdownIt-Anchor\" href=\"#网络层\"></a> 网络层</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>监控点</th>\n<th>常用监控方案及工具</th>\n<th>常见指标</th>\n<th>报警点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>监控专线带宽</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>交换机基本情况</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>网络延迟</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"中间件\"><a class=\"markdownIt-Anchor\" href=\"#中间件\"></a> 中间件</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>监控点</th>\n<th>常用监控方案及工具</th>\n<th>常见指标</th>\n<th>报警点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>注册中心</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>mysql</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>redis</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>es</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"应用程序本身\"><a class=\"markdownIt-Anchor\" href=\"#应用程序本身\"></a> 应用程序本身</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>监控点</th>\n<th>常用监控方案及工具</th>\n<th>常见指标</th>\n<th>报警点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>jvm</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>GC</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>内存</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>线程</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>队列</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>缓存</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>可用性</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>业务正确性</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"日志规范\"><a class=\"markdownIt-Anchor\" href=\"#日志规范\"></a> 日志规范</h2>\n<h4 id=\"日志规范-2\"><a class=\"markdownIt-Anchor\" href=\"#日志规范-2\"></a> 日志规范</h4>\n<ol>\n<li>对外服务接口，所有if分支需要打印日志</li>\n<li>使用日志异步配置</li>\n<li>禁止打印全部实体，打印实体id即可，实体关键属性即可</li>\n<li>打印traceId</li>\n</ol>\n<h4 id=\"日志分级\"><a class=\"markdownIt-Anchor\" href=\"#日志分级\"></a> 日志分级</h4>\n<ul>\n<li>DEBUG 用于开发调试；敏感信息一律使用debug。</li>\n<li>INFO 用于重要流程信息；if 各种分支</li>\n<li>WARN 用于需要关注但无需报警的问题；一般是为了方便排查的日志。</li>\n<li>ERROR 需要报警的异常；一般是系统异常、需要人工介入的业务异常</li>\n</ul>\n<h4 id=\"日志分割\"><a class=\"markdownIt-Anchor\" href=\"#日志分割\"></a> 日志分割</h4>\n<p>近期（7天内）日志，根据日期&amp;大小分割，保存日志原文。<br>如果有日志平台，则不需要保存长期日志<br>没有日志平台的话，需要保存30天日志，根据日期分割，使用压缩格式，文件中要体现时间。</p>\n<h4 id=\"日志中的信息\"><a class=\"markdownIt-Anchor\" href=\"#日志中的信息\"></a> 日志中的信息</h4>\n<ul>\n<li></li>\n</ul>"},{"title":"注册中心的选型与设计","toc":true,"hide":false,"date":"2021-07-31T15:47:39.000Z","_content":"\n这是摘要\n<!-- more -->\n\n------\n\n\n\n# 注册中心的选型与设计\n\n\n\n## 注册中心的作用设计分析\n\n\n\n### 没有注册中心的解决方案\n\n- 通过全局配置文件，来规定服务ip的调用关系。<br>迁移、扩容的时候非常痛苦。\n\n  \n\n### 注册中心的主要功能\n\n- 获取服务信息比如：\n  - 路由信息，服务注册节点的IP，端口。\n  - 服务元数据信息，序列化协议，负载均衡规则，节点权重等\n\n\n\n- 服务发现，节点刷新的方案：\n\n  - 启动时拉：消费方启动后，先从注册中心获取提供方的节点列表\n\n  - 通知回调：提供方的节点变更时，主动调用消费方，让消费方重新拉取节点数据\n\n  - 轮询拉取：回调不一定总是成功，所以需要兜底策略：轮询，分钟级别。\n\n    \n\n- 主动通知调用方，服务节点发生变更\n\n\n\n### 健康检查\n\n- 一般情况下的服务失效原因\n\n  1. 部署重启，正常下线，可以主动通知注册中心\n  2. 服务异常终止，比如机器掉电，无法主动通知下线事件\n  3. 服务假死（注册中心线程可用，但工作线程不可用，表现起来就是依然可用向注册中心发心跳，但业务接口已经卡死不可用。）\n\n  \n\n- 注册中心监控不健康节点的方案\n\n  - 主动下线，能解决1 \n  - 心跳上报，能解决 1，2\n  - 注册中心，主动探活，探测工作线程是否可用。能解决 1，2，3\n  - consumer 通过正常调用，也可以感知到对方服务是否假死。<br>也通过consumer上报异常，解决  1，2，3\n\n  \n\n### 注册中心的设计\n\n- 业务模型\n\n  - 消费者视角，主要关心的是服务的提供者的ip地址。\n  - 提供者的角度，主要关系的是，本服务被哪些消费者注册消费了，方便提供者节点上下线的时候，主动通知消费者\n\n  ```json\n  {\n      \"providerList\": [\n          {\n              \"serverName\": \"orderSvr\",\n              \"consumerList\": \"userSvr,addrSvr,productSvr\"\n          },\n          {\n              \"serverName\": \"addrSvr\",\n              \"consumerList\": \"userSvr,addrSvr,productSvr\"\n          }\n      ],\n      \"consumerList\": [\n          {\n              \"serverName\": \"userSvr\",\n              \"providerList\": \"orderSvr,addrSvr,productSvr\"\n          },\n          {\n              \"serverName\": \"orderSvr\",\n              \"providerList\": \"userSvr,addrSvr,productSvr\"\n  \n          }\n      ],\n      \"ipList\": [\n          {\n              \"serverName\": \"orderSvr\",\n              \"ipList\": \"xxxx,xxxx,xxxx\",\n              \"port\": \"8081\"\n          },\n          {\n              \"serverName\": \"userSvr\",\n              \"ipList\": \"xxxx,xxxx,xxxx\",\n              \"port\": \"8082\"\n          }\n      ]\n  }\n  ```\n\n- 超时处理\n\n  - 遍历扫描，以前的微服务注册中心，使用该方法即可，因为节点不多。\n\n  - 动态分组算法，节点数量较多时使用，一般应用在 IM 中 长连接 keepalive 超时主动清理的扫描机制， 节点以10万为单位。遍历肯定不行\n\n    <img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210801012443.png\" alt=\"image-20210801012442966\" style=\"zoom:33%;\" />\n\n  \n\n  1. 该数据模型，如果n秒超时，有n个bucket。比如1分钟超时，就有60个bucket。\n  2. 这样每一个连接的超时时间，就能确定的放到某一个bucket里面，比如现在是\n  3. 有一个游标一直轮询bucket，\n\n  \n\n\n\n## 开源注册中心选型\n\n\n\n\n\n## Nacos注册中心深入分析\n\n\n\n\n\n## Zookeeper实现深入剖析\n","source":"_posts/注册中心/注册中心的选型与设计.md","raw":"---\ntitle: 注册中心的选型与设计\ntoc: true\ncategories:\n  - 后端\ntags:\n  - 注册中心\n  - 设计\nhide: false\ndate: 2021-07-31 23:47:39\n---\n\n这是摘要\n<!-- more -->\n\n------\n\n\n\n# 注册中心的选型与设计\n\n\n\n## 注册中心的作用设计分析\n\n\n\n### 没有注册中心的解决方案\n\n- 通过全局配置文件，来规定服务ip的调用关系。<br>迁移、扩容的时候非常痛苦。\n\n  \n\n### 注册中心的主要功能\n\n- 获取服务信息比如：\n  - 路由信息，服务注册节点的IP，端口。\n  - 服务元数据信息，序列化协议，负载均衡规则，节点权重等\n\n\n\n- 服务发现，节点刷新的方案：\n\n  - 启动时拉：消费方启动后，先从注册中心获取提供方的节点列表\n\n  - 通知回调：提供方的节点变更时，主动调用消费方，让消费方重新拉取节点数据\n\n  - 轮询拉取：回调不一定总是成功，所以需要兜底策略：轮询，分钟级别。\n\n    \n\n- 主动通知调用方，服务节点发生变更\n\n\n\n### 健康检查\n\n- 一般情况下的服务失效原因\n\n  1. 部署重启，正常下线，可以主动通知注册中心\n  2. 服务异常终止，比如机器掉电，无法主动通知下线事件\n  3. 服务假死（注册中心线程可用，但工作线程不可用，表现起来就是依然可用向注册中心发心跳，但业务接口已经卡死不可用。）\n\n  \n\n- 注册中心监控不健康节点的方案\n\n  - 主动下线，能解决1 \n  - 心跳上报，能解决 1，2\n  - 注册中心，主动探活，探测工作线程是否可用。能解决 1，2，3\n  - consumer 通过正常调用，也可以感知到对方服务是否假死。<br>也通过consumer上报异常，解决  1，2，3\n\n  \n\n### 注册中心的设计\n\n- 业务模型\n\n  - 消费者视角，主要关心的是服务的提供者的ip地址。\n  - 提供者的角度，主要关系的是，本服务被哪些消费者注册消费了，方便提供者节点上下线的时候，主动通知消费者\n\n  ```json\n  {\n      \"providerList\": [\n          {\n              \"serverName\": \"orderSvr\",\n              \"consumerList\": \"userSvr,addrSvr,productSvr\"\n          },\n          {\n              \"serverName\": \"addrSvr\",\n              \"consumerList\": \"userSvr,addrSvr,productSvr\"\n          }\n      ],\n      \"consumerList\": [\n          {\n              \"serverName\": \"userSvr\",\n              \"providerList\": \"orderSvr,addrSvr,productSvr\"\n          },\n          {\n              \"serverName\": \"orderSvr\",\n              \"providerList\": \"userSvr,addrSvr,productSvr\"\n  \n          }\n      ],\n      \"ipList\": [\n          {\n              \"serverName\": \"orderSvr\",\n              \"ipList\": \"xxxx,xxxx,xxxx\",\n              \"port\": \"8081\"\n          },\n          {\n              \"serverName\": \"userSvr\",\n              \"ipList\": \"xxxx,xxxx,xxxx\",\n              \"port\": \"8082\"\n          }\n      ]\n  }\n  ```\n\n- 超时处理\n\n  - 遍历扫描，以前的微服务注册中心，使用该方法即可，因为节点不多。\n\n  - 动态分组算法，节点数量较多时使用，一般应用在 IM 中 长连接 keepalive 超时主动清理的扫描机制， 节点以10万为单位。遍历肯定不行\n\n    <img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210801012443.png\" alt=\"image-20210801012442966\" style=\"zoom:33%;\" />\n\n  \n\n  1. 该数据模型，如果n秒超时，有n个bucket。比如1分钟超时，就有60个bucket。\n  2. 这样每一个连接的超时时间，就能确定的放到某一个bucket里面，比如现在是\n  3. 有一个游标一直轮询bucket，\n\n  \n\n\n\n## 开源注册中心选型\n\n\n\n\n\n## Nacos注册中心深入分析\n\n\n\n\n\n## Zookeeper实现深入剖析\n","slug":"注册中心/注册中心的选型与设计","published":1,"updated":"2021-07-31T15:47:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrs2dse4000khufy0112hk7p","content":"<p>这是摘要</p>\n<span id=\"more\"></span>\n<hr>\n<h1><span id=\"注册中心的选型与设计\"> 注册中心的选型与设计</span></h1>\n<h2><span id=\"注册中心的作用设计分析\"> 注册中心的作用设计分析</span></h2>\n<h3><span id=\"没有注册中心的解决方案\"> 没有注册中心的解决方案</span></h3>\n<ul>\n<li>通过全局配置文件，来规定服务ip的调用关系。<br>迁移、扩容的时候非常痛苦。</li>\n</ul>\n<h3><span id=\"注册中心的主要功能\"> 注册中心的主要功能</span></h3>\n<ul>\n<li>\n<p>获取服务信息比如：</p>\n<ul>\n<li>路由信息，服务注册节点的IP，端口。</li>\n<li>服务元数据信息，序列化协议，负载均衡规则，节点权重等</li>\n</ul>\n</li>\n<li>\n<p>服务发现，节点刷新的方案：</p>\n<ul>\n<li>\n<p>启动时拉：消费方启动后，先从注册中心获取提供方的节点列表</p>\n</li>\n<li>\n<p>通知回调：提供方的节点变更时，主动调用消费方，让消费方重新拉取节点数据</p>\n</li>\n<li>\n<p>轮询拉取：回调不一定总是成功，所以需要兜底策略：轮询，分钟级别。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>主动通知调用方，服务节点发生变更</p>\n</li>\n</ul>\n<h3><span id=\"健康检查\"> 健康检查</span></h3>\n<ul>\n<li>\n<p>一般情况下的服务失效原因</p>\n<ol>\n<li>部署重启，正常下线，可以主动通知注册中心</li>\n<li>服务异常终止，比如机器掉电，无法主动通知下线事件</li>\n<li>服务假死（注册中心线程可用，但工作线程不可用，表现起来就是依然可用向注册中心发心跳，但业务接口已经卡死不可用。）</li>\n</ol>\n</li>\n<li>\n<p>注册中心监控不健康节点的方案</p>\n<ul>\n<li>主动下线，能解决1</li>\n<li>心跳上报，能解决 1，2</li>\n<li>注册中心，主动探活，探测工作线程是否可用。能解决 1，2，3</li>\n<li>consumer 通过正常调用，也可以感知到对方服务是否假死。<br>也通过consumer上报异常，解决  1，2，3</li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"注册中心的设计\"> 注册中心的设计</span></h3>\n<ul>\n<li>\n<p>业务模型</p>\n<ul>\n<li>消费者视角，主要关心的是服务的提供者的ip地址。</li>\n<li>提供者的角度，主要关系的是，本服务被哪些消费者注册消费了，方便提供者节点上下线的时候，主动通知消费者</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs json\">&#123;<br>    <span class=\"hljs-attr\">&quot;providerList&quot;</span>: [<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;serverName&quot;</span>: <span class=\"hljs-string\">&quot;orderSvr&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;consumerList&quot;</span>: <span class=\"hljs-string\">&quot;userSvr,addrSvr,productSvr&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;serverName&quot;</span>: <span class=\"hljs-string\">&quot;addrSvr&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;consumerList&quot;</span>: <span class=\"hljs-string\">&quot;userSvr,addrSvr,productSvr&quot;</span><br>        &#125;<br>    ],<br>    <span class=\"hljs-attr\">&quot;consumerList&quot;</span>: [<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;serverName&quot;</span>: <span class=\"hljs-string\">&quot;userSvr&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;providerList&quot;</span>: <span class=\"hljs-string\">&quot;orderSvr,addrSvr,productSvr&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;serverName&quot;</span>: <span class=\"hljs-string\">&quot;orderSvr&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;providerList&quot;</span>: <span class=\"hljs-string\">&quot;userSvr,addrSvr,productSvr&quot;</span><br><br>        &#125;<br>    ],<br>    <span class=\"hljs-attr\">&quot;ipList&quot;</span>: [<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;serverName&quot;</span>: <span class=\"hljs-string\">&quot;orderSvr&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;ipList&quot;</span>: <span class=\"hljs-string\">&quot;xxxx,xxxx,xxxx&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;port&quot;</span>: <span class=\"hljs-string\">&quot;8081&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;serverName&quot;</span>: <span class=\"hljs-string\">&quot;userSvr&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;ipList&quot;</span>: <span class=\"hljs-string\">&quot;xxxx,xxxx,xxxx&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;port&quot;</span>: <span class=\"hljs-string\">&quot;8082&quot;</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></div></td></tr></table></figure>\n</li>\n<li>\n<p>超时处理</p>\n<ul>\n<li>\n<p>遍历扫描，以前的微服务注册中心，使用该方法即可，因为节点不多。</p>\n</li>\n<li>\n<p>动态分组算法，节点数量较多时使用，一般应用在 IM 中 长连接 keepalive 超时主动清理的扫描机制， 节点以10万为单位。遍历肯定不行</p>\n<img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210801012443.png\" alt=\"image-20210801012442966\" style=\"zoom:33%;\">\n</li>\n</ul>\n<ol>\n<li>该数据模型，如果n秒超时，有n个bucket。比如1分钟超时，就有60个bucket。</li>\n<li>这样每一个连接的超时时间，就能确定的放到某一个bucket里面，比如现在是</li>\n<li>有一个游标一直轮询bucket，</li>\n</ol>\n</li>\n</ul>\n<h2><span id=\"开源注册中心选型\"> 开源注册中心选型</span></h2>\n<h2><span id=\"nacos注册中心深入分析\"> Nacos注册中心深入分析</span></h2>\n<h2><span id=\"zookeeper实现深入剖析\"> Zookeeper实现深入剖析</span></h2>\n","site":{"data":{}},"excerpt":"<p>这是摘要</p>","more":"<hr />\n<h1 id=\"注册中心的选型与设计\"><a class=\"markdownIt-Anchor\" href=\"#注册中心的选型与设计\"></a> 注册中心的选型与设计</h1>\n<h2 id=\"注册中心的作用设计分析\"><a class=\"markdownIt-Anchor\" href=\"#注册中心的作用设计分析\"></a> 注册中心的作用设计分析</h2>\n<h3 id=\"没有注册中心的解决方案\"><a class=\"markdownIt-Anchor\" href=\"#没有注册中心的解决方案\"></a> 没有注册中心的解决方案</h3>\n<ul>\n<li>通过全局配置文件，来规定服务ip的调用关系。<br>迁移、扩容的时候非常痛苦。</li>\n</ul>\n<h3 id=\"注册中心的主要功能\"><a class=\"markdownIt-Anchor\" href=\"#注册中心的主要功能\"></a> 注册中心的主要功能</h3>\n<ul>\n<li>\n<p>获取服务信息比如：</p>\n<ul>\n<li>路由信息，服务注册节点的IP，端口。</li>\n<li>服务元数据信息，序列化协议，负载均衡规则，节点权重等</li>\n</ul>\n</li>\n<li>\n<p>服务发现，节点刷新的方案：</p>\n<ul>\n<li>\n<p>启动时拉：消费方启动后，先从注册中心获取提供方的节点列表</p>\n</li>\n<li>\n<p>通知回调：提供方的节点变更时，主动调用消费方，让消费方重新拉取节点数据</p>\n</li>\n<li>\n<p>轮询拉取：回调不一定总是成功，所以需要兜底策略：轮询，分钟级别。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>主动通知调用方，服务节点发生变更</p>\n</li>\n</ul>\n<h3 id=\"健康检查\"><a class=\"markdownIt-Anchor\" href=\"#健康检查\"></a> 健康检查</h3>\n<ul>\n<li>\n<p>一般情况下的服务失效原因</p>\n<ol>\n<li>部署重启，正常下线，可以主动通知注册中心</li>\n<li>服务异常终止，比如机器掉电，无法主动通知下线事件</li>\n<li>服务假死（注册中心线程可用，但工作线程不可用，表现起来就是依然可用向注册中心发心跳，但业务接口已经卡死不可用。）</li>\n</ol>\n</li>\n<li>\n<p>注册中心监控不健康节点的方案</p>\n<ul>\n<li>主动下线，能解决1</li>\n<li>心跳上报，能解决 1，2</li>\n<li>注册中心，主动探活，探测工作线程是否可用。能解决 1，2，3</li>\n<li>consumer 通过正常调用，也可以感知到对方服务是否假死。<br>也通过consumer上报异常，解决  1，2，3</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"注册中心的设计\"><a class=\"markdownIt-Anchor\" href=\"#注册中心的设计\"></a> 注册中心的设计</h3>\n<ul>\n<li>\n<p>业务模型</p>\n<ul>\n<li>消费者视角，主要关心的是服务的提供者的ip地址。</li>\n<li>提供者的角度，主要关系的是，本服务被哪些消费者注册消费了，方便提供者节点上下线的时候，主动通知消费者</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&#123;<br>    <span class=\"hljs-attr\">&quot;providerList&quot;</span>: [<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;serverName&quot;</span>: <span class=\"hljs-string\">&quot;orderSvr&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;consumerList&quot;</span>: <span class=\"hljs-string\">&quot;userSvr,addrSvr,productSvr&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;serverName&quot;</span>: <span class=\"hljs-string\">&quot;addrSvr&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;consumerList&quot;</span>: <span class=\"hljs-string\">&quot;userSvr,addrSvr,productSvr&quot;</span><br>        &#125;<br>    ],<br>    <span class=\"hljs-attr\">&quot;consumerList&quot;</span>: [<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;serverName&quot;</span>: <span class=\"hljs-string\">&quot;userSvr&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;providerList&quot;</span>: <span class=\"hljs-string\">&quot;orderSvr,addrSvr,productSvr&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;serverName&quot;</span>: <span class=\"hljs-string\">&quot;orderSvr&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;providerList&quot;</span>: <span class=\"hljs-string\">&quot;userSvr,addrSvr,productSvr&quot;</span><br><br>        &#125;<br>    ],<br>    <span class=\"hljs-attr\">&quot;ipList&quot;</span>: [<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;serverName&quot;</span>: <span class=\"hljs-string\">&quot;orderSvr&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;ipList&quot;</span>: <span class=\"hljs-string\">&quot;xxxx,xxxx,xxxx&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;port&quot;</span>: <span class=\"hljs-string\">&quot;8081&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;serverName&quot;</span>: <span class=\"hljs-string\">&quot;userSvr&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;ipList&quot;</span>: <span class=\"hljs-string\">&quot;xxxx,xxxx,xxxx&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;port&quot;</span>: <span class=\"hljs-string\">&quot;8082&quot;</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>超时处理</p>\n<ul>\n<li>\n<p>遍历扫描，以前的微服务注册中心，使用该方法即可，因为节点不多。</p>\n</li>\n<li>\n<p>动态分组算法，节点数量较多时使用，一般应用在 IM 中 长连接 keepalive 超时主动清理的扫描机制， 节点以10万为单位。遍历肯定不行</p>\n<img src=\"https://cdn.jsdelivr.net/gh/coolflameSLZ/img/img20210801012443.png\" alt=\"image-20210801012442966\" style=\"zoom:33%;\" />\n</li>\n</ul>\n<ol>\n<li>该数据模型，如果n秒超时，有n个bucket。比如1分钟超时，就有60个bucket。</li>\n<li>这样每一个连接的超时时间，就能确定的放到某一个bucket里面，比如现在是</li>\n<li>有一个游标一直轮询bucket，</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"开源注册中心选型\"><a class=\"markdownIt-Anchor\" href=\"#开源注册中心选型\"></a> 开源注册中心选型</h2>\n<h2 id=\"nacos注册中心深入分析\"><a class=\"markdownIt-Anchor\" href=\"#nacos注册中心深入分析\"></a> Nacos注册中心深入分析</h2>\n<h2 id=\"zookeeper实现深入剖析\"><a class=\"markdownIt-Anchor\" href=\"#zookeeper实现深入剖析\"></a> Zookeeper实现深入剖析</h2>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckrs2dsdu0006hufyc6d0ecox","category_id":"ckrs2dsds0003hufy6sot4hs4","_id":"ckrs2dse5000phufyfj1s9e34"},{"post_id":"ckrs2dsdu0006hufyc6d0ecox","category_id":"ckrs2dse2000ihufyf2l3buq7","_id":"ckrs2dse6000shufya2b5f3xb"},{"post_id":"ckrs2dsdo0001hufy5izb8k1m","category_id":"ckrs2dsds0003hufy6sot4hs4","_id":"ckrs2dse6000uhufyczeachs9"},{"post_id":"ckrs2dsdo0001hufy5izb8k1m","category_id":"ckrs2dse2000ihufyf2l3buq7","_id":"ckrs2dse7000xhufycouv80f9"},{"post_id":"ckrs2dsdv0007hufya3hmbv6h","category_id":"ckrs2dse5000ohufy7bh576s5","_id":"ckrs2dse8000zhufyfykf12ua"},{"post_id":"ckrs2dsdy000bhufy933ffiz8","category_id":"ckrs2dse5000ohufy7bh576s5","_id":"ckrs2dse90013hufyc1dg4gga"},{"post_id":"ckrs2dsdq0002hufy81l77epo","category_id":"ckrs2dsds0003hufy6sot4hs4","_id":"ckrs2dse90017hufyhqaa6aew"},{"post_id":"ckrs2dsdq0002hufy81l77epo","category_id":"ckrs2dse2000ihufyf2l3buq7","_id":"ckrs2dsea0019hufy2aw45r23"},{"post_id":"ckrs2dsdz000chufy30y0huc1","category_id":"ckrs2dse5000ohufy7bh576s5","_id":"ckrs2dsea001bhufyfygp7v48"},{"post_id":"ckrs2dse0000ghufyhba18emb","category_id":"ckrs2dse5000ohufy7bh576s5","_id":"ckrs2dseb001fhufy6boo96y2"},{"post_id":"ckrs2dsdu0005hufy2qne757q","category_id":"ckrs2dsds0003hufy6sot4hs4","_id":"ckrs2dsec001khufyej2hbz0d"},{"post_id":"ckrs2dsdu0005hufy2qne757q","category_id":"ckrs2dse2000ihufyf2l3buq7","_id":"ckrs2dsed001mhufyaetdf6dd"},{"post_id":"ckrs2dse1000hhufyh4j7fmoe","category_id":"ckrs2dse5000ohufy7bh576s5","_id":"ckrs2dsed001ohufy8wcy28di"},{"post_id":"ckrs2dse4000khufy0112hk7p","category_id":"ckrs2dse5000ohufy7bh576s5","_id":"ckrs2dsed001rhufyfhjo039n"}],"PostTag":[{"post_id":"ckrs2dsdo0001hufy5izb8k1m","tag_id":"ckrs2dsdt0004hufyadn2cg64","_id":"ckrs2dsdy000ahufybm4ce803"},{"post_id":"ckrs2dsdq0002hufy81l77epo","tag_id":"ckrs2dsdt0004hufyadn2cg64","_id":"ckrs2dse0000fhufy4t9je24s"},{"post_id":"ckrs2dsdu0005hufy2qne757q","tag_id":"ckrs2dsdz000ehufy76m55nr9","_id":"ckrs2dse5000nhufy0elo11w7"},{"post_id":"ckrs2dsdu0005hufy2qne757q","tag_id":"ckrs2dse3000jhufybtm780ug","_id":"ckrs2dse6000qhufy076x2ta7"},{"post_id":"ckrs2dsdu0006hufyc6d0ecox","tag_id":"ckrs2dsdz000ehufy76m55nr9","_id":"ckrs2dse6000thufy9lql6sf7"},{"post_id":"ckrs2dsdv0007hufya3hmbv6h","tag_id":"ckrs2dse6000rhufygd590wac","_id":"ckrs2dse80011hufy69z17mpk"},{"post_id":"ckrs2dsdv0007hufya3hmbv6h","tag_id":"ckrs2dse7000whufyazinghpy","_id":"ckrs2dse90014hufyer89dz3y"},{"post_id":"ckrs2dsdy000bhufy933ffiz8","tag_id":"ckrs2dse80010hufyeogu5awl","_id":"ckrs2dseb001dhufy4uxvd8rd"},{"post_id":"ckrs2dsdy000bhufy933ffiz8","tag_id":"ckrs2dse7000whufyazinghpy","_id":"ckrs2dseb001ghufy04wvcshw"},{"post_id":"ckrs2dsdy000bhufy933ffiz8","tag_id":"ckrs2dse6000rhufygd590wac","_id":"ckrs2dsec001ihufy73bf8uqx"},{"post_id":"ckrs2dsdz000chufy30y0huc1","tag_id":"ckrs2dse6000rhufygd590wac","_id":"ckrs2dsed001nhufydcghf2y0"},{"post_id":"ckrs2dsdz000chufy30y0huc1","tag_id":"ckrs2dse7000whufyazinghpy","_id":"ckrs2dsed001phufy8ivkgybs"},{"post_id":"ckrs2dse0000ghufyhba18emb","tag_id":"ckrs2dsec001lhufyb5acc4db","_id":"ckrs2dsee001thufy393045cg"},{"post_id":"ckrs2dse0000ghufyhba18emb","tag_id":"ckrs2dse7000whufyazinghpy","_id":"ckrs2dsee001uhufycsf06yok"},{"post_id":"ckrs2dse1000hhufyh4j7fmoe","tag_id":"ckrs2dsec001lhufyb5acc4db","_id":"ckrs2dsee001xhufy45rs983u"},{"post_id":"ckrs2dse1000hhufyh4j7fmoe","tag_id":"ckrs2dse7000whufyazinghpy","_id":"ckrs2dsee001yhufy1bws77wp"},{"post_id":"ckrs2dse4000khufy0112hk7p","tag_id":"ckrs2dsee001whufy8657awdl","_id":"ckrs2dsef0020hufycy72892s"},{"post_id":"ckrs2dse4000khufy0112hk7p","tag_id":"ckrs2dse6000rhufygd590wac","_id":"ckrs2dsef0021hufy5qom2dvu"}],"Tag":[{"name":"innodb","_id":"ckrs2dsdt0004hufyadn2cg64"},{"name":"分库分表","_id":"ckrs2dsdz000ehufy76m55nr9"},{"name":"分布式事务","_id":"ckrs2dse3000jhufybtm780ug"},{"name":"设计","_id":"ckrs2dse6000rhufygd590wac"},{"name":"技术规范","_id":"ckrs2dse7000whufyazinghpy"},{"name":"mysql","_id":"ckrs2dse80010hufyeogu5awl"},{"name":"devOps","_id":"ckrs2dsec001lhufyb5acc4db"},{"name":"注册中心","_id":"ckrs2dsee001whufy8657awdl"}]}}