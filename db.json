{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/img/home_banner.png","path":"img/home_banner.png","modified":1,"renderable":0},{"_id":"source/img/other_banner.png","path":"img/other_banner.png","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"dfe6e6e5065fdea76d7e472bc354b6907b78d81b","modified":1627568393246},{"_id":"source/_posts/技术规范/API设计规范.md","hash":"62e1c0a6d5dd84e2ac86afd0ebf5b82f0ef65761","modified":1627587741353},{"_id":"source/_posts/技术规范/mysql开发规范.md","hash":"a34ad2e845d98a894172078066613ed2958c3030","modified":1627587716054},{"_id":"source/_posts/技术规范/分支规范.md","hash":"c2cfc067da1d18c4f90a51dca46a18cdd141f492","modified":1627587949047},{"_id":"source/img/home_banner.png","hash":"8a9101638183360cef533ef0d0f32d65860d0293","modified":1627587234995},{"_id":"source/img/other_banner.png","hash":"ce4d76c8c04723bfe171903d3c1650513a3d8e5d","modified":1627587616837},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"523b9db3801ca892124502c17d72864457cc4b21","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"dac9d10d95b9e179e8cd7c439300b450db51f0c2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/gulpfile.js","hash":"a7c87a83becf7080bddd14e81a6f09ce8c3df109","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"45b68110fcaf5819452f45ecd77282f97d1386f5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"6cbd88a2ef9dd2198d72ccc1899c4966ac5f49f9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"a154785aef120988d29409847977f24069d3a3d5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"9d6ff8772bf54d7458ae4e846e5a2d1f2921b8a7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"19c6db0ccebc8f59fa4ef9567a066b33223eccd6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/lint.yaml","hash":"64d521c9c5b61d3a4852c74894fb574082dc7009","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/archive-list.ejs","hash":"8723aa57f61134a2c1dc84cc7ea88ea366f4fda3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/beian.ejs","hash":"6ec30a9dd56341590af07f4227324f619025c109","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/css.ejs","hash":"cdcb607f1104543a42beda647f3c9cf0f3d11623","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/footer.ejs","hash":"39e63b3e1502803c9e8ea0c44ea662a7bbe15744","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/head.ejs","hash":"248ecd01aead6e07ac1904a7b7c45395a922bcc7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/nav.ejs","hash":"245f49aad0e4124b52aa82d981281ad9c871f1f8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/post-meta.ejs","hash":"3e0fa1731b6e54dbcf52ccf8e200e83dc4549bfa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/scripts.ejs","hash":"b3d93135d9ae74f006da31ec54343308bbd77cb5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"606131cb807846bf43776a9073fcc1473d359ec9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/changyan.ejs","hash":"725a1fe23c672fca87edc57739b748c3adf705da","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/disqus.ejs","hash":"fb4502fc9204284f8b4e8dabde8477d478e826e5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/twikoo.ejs","hash":"ffe08e76c9ebd4fc27715b8a60f385b3f10d0348","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/valine.ejs","hash":"9238063c5e2928bb6fce2b99cd25ad85e78c4d1c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/waline.ejs","hash":"5b61661fbc65752f54f99402077dbb03044149a1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/typed.ejs","hash":"ab71df2e56b60e8e193ff827e81704e5b358a977","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"a2d08e3b9f98b6371b2e64d664f079c99571494b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"26d29403d8ecb0b533e63bde3ca73b2c91f171ff","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"dabd87267d60240c0daea0f35a46f30ee1b2337a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl","hash":"4c6fffc6d4a3b8830931800ee7da99dccf1be36e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"ad7dcc8a060d94d3c44ca5e0788a24ca38be0f79","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/tag_plugin.styl","hash":"766fcf017deb4c8b0c260ac4c8d2e3489407ad89","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"35539a1ce8476e75515015a06d01ec66e4af6834","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"461d609a802a4f9aa9f492411ed8074813a956b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":499162500000},{"_id":"public/search.xml","hash":"44d70c7247da9b6af8b0850045a9c0a2f14c5ef4","modified":1627588571335},{"_id":"public/local-search.xml","hash":"4c1cfb3209a3251272b2546bfcbe170c9494b30c","modified":1627588571335},{"_id":"public/about/index.html","hash":"d9d0ed47ed0f6b7e69d8d5cbb0aba5549aa9cbef","modified":1627588571335},{"_id":"public/2021/07/30/技术规范/分支规范/index.html","hash":"ea66a26173650404c62a44523d9eec034f76ade8","modified":1627588571335},{"_id":"public/archives/index.html","hash":"86d4067a5747eaf34440579fa19d71549970acba","modified":1627588571335},{"_id":"public/archives/2021/index.html","hash":"86d4067a5747eaf34440579fa19d71549970acba","modified":1627588571335},{"_id":"public/archives/2021/07/index.html","hash":"86d4067a5747eaf34440579fa19d71549970acba","modified":1627588571335},{"_id":"public/categories/后端/index.html","hash":"cc114cb5c920563a55da6bcf066a66af10873677","modified":1627588571335},{"_id":"public/index.html","hash":"86126dec85cb56c07b6e20bfdcdf1f24a11498f6","modified":1627588571335},{"_id":"public/tags/设计/index.html","hash":"82718add31de826108abfe1c0f872487052c7cd2","modified":1627588571335},{"_id":"public/tags/技术规范/index.html","hash":"cedf6b67db345ebf0b2d903d10e25adbbe1a6b04","modified":1627588571335},{"_id":"public/tags/mysql/index.html","hash":"3b376b4eb391dcfa87ce3a441a5baa4b19b0ada9","modified":1627588571335},{"_id":"public/tags/index.html","hash":"42f2804c82226561cc430ece8b6f4ff3a16759f5","modified":1627588571335},{"_id":"public/404.html","hash":"a9ea440d5abc44ceffc6c7e094211963362bb042","modified":1627588571335},{"_id":"public/categories/index.html","hash":"06b1af6be6f15e46b615f040d5d6178221f9d885","modified":1627588571335},{"_id":"public/2021/07/30/技术规范/API设计规范/index.html","hash":"1322684c6b8df4889e01d8f00aadb3b957527d8f","modified":1627588571335},{"_id":"public/2021/07/27/技术规范/mysql开发规范/index.html","hash":"b33818c005252468fb40b8c2a9c4ca6e3dc3bb10","modified":1627588571335},{"_id":"public/links/index.html","hash":"5368ad57fb147ce3a35707272f7b355d8b798b2c","modified":1627588571335},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1627588571335},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1627588571335},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1627588571335},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1627588571335},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1627588571335},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1627588571335},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1627588571335},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1627588571335},{"_id":"public/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":1627588571335},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1627588571335},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1627588571335},{"_id":"public/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":1627588571335},{"_id":"public/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":1627588571335},{"_id":"public/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":1627588571335},{"_id":"public/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":1627588571335},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1627588571335},{"_id":"public/css/main.css","hash":"03119a9e68966f190a3f2b30b99553423267ad30","modified":1627588571335},{"_id":"public/img/other_banner.png","hash":"ce4d76c8c04723bfe171903d3c1650513a3d8e5d","modified":1627588571335},{"_id":"public/img/home_banner.png","hash":"8a9101638183360cef533ef0d0f32d65860d0293","modified":1627588571335}],"Category":[{"name":"后端","_id":"ckrpc7nje000359fy57pr29zx"}],"Data":[],"Page":[{"title":"about","date":"2021-07-29T05:45:33.000Z","_content":"\nheihei\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-07-29 13:45:33\n---\n\nheihei\n\n","updated":"2021-07-29T14:19:53.246Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckrpc7nj6000059fy9kk69bja","content":"<p>heihei</p>\n","site":{"data":{}},"excerpt":"","more":"<p>heihei</p>\n"}],"Post":[{"title":"API设计规范","toc":true,"excerpt":"http设计规范，无脑遵守就好","date":"2021-07-29T19:05:15.000Z","_content":"\n\n\n------\n\n\n\n\n\n------\n\n\n\n## API设计自查表\n\n\n\n| 考虑点                                        | 结论 |\n| :-------------------------------------------- | ---- |\n| 接口命名                                      |      |\n| 入参                                          |      |\n| 出参                                          |      |\n| header                                        |      |\n| 包装结构体                                    |      |\n| 版本                                          |      |\n| 保障级别 （对内服务 or 对外服务 ｜ 使用人群） |      |\n| 是否需要黑白名单，哪个位置加                  |      |\n| 是否需要幂等，以及实现方案                    |      |\n| 是否需要异步，以及实现方案                    |      |\n\n\n\n\n\n------\n\n\n\n## 详细解释\n\n\n\n### 标准接口命名\n\n- 范例：<br>`xxx/user/p0/v1/getuserInfo`<br>业务线 / 所属服务 / 保护级别 / 版本 / getuserInfo\n\n- 禁止，PathVariable，不好管理，性能也有点问题<br>例如：/user/{user_id}\n\n- 禁止，除了 get、post 以外的method，网关不好管理\n\n- **保护级别**\n\n  - p0: 主流程接口，对外服务核心流程，一般此类接口挂了，用户就会发现系统有问题。<br>需要全力保障的接口\n  - p1: 非必要业务接口，一般是非核心查询接口，这类接口挂了，用户不容易察觉，<br>网关可以进行接口限流，根据user level 接口限流，也可以拿这类接口开刀。\n  - p2: 信息采集类接口，可以不用保证可用性，后端也永远返回成功，<br>服务资源不足时候，网关可以直接下掉他们。\n\n- 版本号\n\n  - 使用v1、v2即可\n\n  \n\n### header\n\n- jwt\n\n- 业务上下文，采集使用\n\n  如 user_id，client_id，client_type，biz，version，user_level，addr 等\n\n  按需添加\n\n- 调用链，trace_id，span_id，\n\n  一般由工具生成。\n\n\n\n### 入参\n\n- 对外服务公共参数\n\n  - 防篡改签名\n  - 加token\n\n  \n\n- 对内服务公共参数\n\n  - user_id\n  - biz_id\n  - service_id\n\n\n\n### 出参\n\n- 类型\n\n  强制使用 application/json 类型，尽量为字符串类型。\n\n  避免返回Long。\n\n  \n\n- 返回码\n\n  业务异常、系统异常要分开。<br>业务异常保证无歧义，系统异常返回码为99999，降级使用。<br>确保多重状态，有不同的返回码，<br>例如，有一个接口叫\"收单接口\"，其内部调用\"下单\"接口。<br>收单服务正常的时候，下单接口可能返回失败。<br>设计接口结构时，状态码不能有歧义，\"收单正常，下单失败\" 与 \"收单失败\"  返回不同的状态码\n\n  \n\n- 包装结构\n\n  错误返回：`{ code, msg, trace_id }`<br>正常返回：`{ code, msg, result: {} }` <br>分页返回：`{ code, msg, result: { recordList:[], page_info:{} } }`<br>**result 不允许为数组，默认为 空 {}，在java中使用 emptyMap 常量**\n\n  \n\n### 实现幂等的策略\n\n- 唯一id + 时间字段。通过时间过滤后，使用trans_id 避免重复 （最通用的实现）\n\n  可以加前置 缓存队列 ，进行专门的去重。\n\n- 新增类接口，加唯一索引。（低并发下，实现最简单）\n\n- 乐观锁字段。（效率最高，但大量并发时需要避免）\n\n- 服务端发放提交票据，（两次交互，费时费力，不推荐）\n\n- 状态机幂等， `set order_status = [done] ` 天生幂等 \n\n效率优先：乐观锁 > 唯一约束 > 唯一索引\n\n\n\n### 异步策略\n\n例如**上传接口**\n\n- 同步\n\n```java\npublic SyncUploadResponse syncUpload(SyncUploadRequest request) {\n  SyncUploadResponse response = new SyncUploadResponse();\n  response.setDownloadUrl(uploadFile(request.getFile()));\n  response.setThumbnailDownloadUrl(uploadThumbnailFile(request.getFile()));\n  return response;\n}\n```\n\n- 异步上传，立即返回一个任务id，客户端根据任务id轮询结果。\n\n  \n\n```java\n//在接口实现上，我们同样把上传任务提交到线程池处理，但是并不会同步等待任务完成，而是完成后把结果写入一个 HashMap，任务查询接口通过查询这个 HashMap 来获得文件 的 URL\npublic class asyncDemo {\n\n    //计数器，作为上传任务的ID\n    private AtomicInteger atomicInteger = new AtomicInteger(0);\n    //暂存上传操作的结果，生产代码需要考虑数据持久化\n    private ConcurrentHashMap<String, SyncQueryUploadTaskResponse> downloadUrl = new ConcurrentHashMap<>();\n\n    // 立即返回任务id\n    public AsyncUploadResponse asyncUpload(AsyncUploadRequest request) {\n        AsyncUploadResponse response = new AsyncUploadResponse();\n        //生成唯一的上传任务ID\n        String taskId = \"upload\" + atomicInteger.incrementAndGet\n        //异步上传操作只返回任务ID\n        response.setTaskId(taskId);\n        //提交上传原始文件操作到线程池异步处理\n        threadPool.execute(() -> {\n            String url = uploadFile(request.getFile());\n            //如果ConcurrentHashMap不包含Key，则初始化一个SyncQueryUploadTaskResponse\n            downloadUrl.computeIfAbsent(taskId,\n                    id -> new SyncQueryUploadTaskResponse(id)).setDownloadUrl(url);\n        });\n\n        //提交上传缩略图操作到线程池异步处理\n        threadPool.execute(() -> {\n            String url = uploadThumbnailFile(request.getFile());\n            downloadUrl.computeIfAbsent(taskId,\n                    id -> new SyncQueryUploadTaskResponse(id)).setThumbnailDownloadUrl(url);\n        });\n        return response;\n    }\n\n```\n\n","source":"_posts/技术规范/API设计规范.md","raw":"---\ntitle: API设计规范\ntoc: true\n\nexcerpt: http设计规范，无脑遵守就好\n\ncategories:\n  - 后端\n\ntags:\n  - 设计\n  - 技术规范\n\ndate: 2021-07-30 03:05:15\n---\n\n\n\n------\n\n\n\n\n\n------\n\n\n\n## API设计自查表\n\n\n\n| 考虑点                                        | 结论 |\n| :-------------------------------------------- | ---- |\n| 接口命名                                      |      |\n| 入参                                          |      |\n| 出参                                          |      |\n| header                                        |      |\n| 包装结构体                                    |      |\n| 版本                                          |      |\n| 保障级别 （对内服务 or 对外服务 ｜ 使用人群） |      |\n| 是否需要黑白名单，哪个位置加                  |      |\n| 是否需要幂等，以及实现方案                    |      |\n| 是否需要异步，以及实现方案                    |      |\n\n\n\n\n\n------\n\n\n\n## 详细解释\n\n\n\n### 标准接口命名\n\n- 范例：<br>`xxx/user/p0/v1/getuserInfo`<br>业务线 / 所属服务 / 保护级别 / 版本 / getuserInfo\n\n- 禁止，PathVariable，不好管理，性能也有点问题<br>例如：/user/{user_id}\n\n- 禁止，除了 get、post 以外的method，网关不好管理\n\n- **保护级别**\n\n  - p0: 主流程接口，对外服务核心流程，一般此类接口挂了，用户就会发现系统有问题。<br>需要全力保障的接口\n  - p1: 非必要业务接口，一般是非核心查询接口，这类接口挂了，用户不容易察觉，<br>网关可以进行接口限流，根据user level 接口限流，也可以拿这类接口开刀。\n  - p2: 信息采集类接口，可以不用保证可用性，后端也永远返回成功，<br>服务资源不足时候，网关可以直接下掉他们。\n\n- 版本号\n\n  - 使用v1、v2即可\n\n  \n\n### header\n\n- jwt\n\n- 业务上下文，采集使用\n\n  如 user_id，client_id，client_type，biz，version，user_level，addr 等\n\n  按需添加\n\n- 调用链，trace_id，span_id，\n\n  一般由工具生成。\n\n\n\n### 入参\n\n- 对外服务公共参数\n\n  - 防篡改签名\n  - 加token\n\n  \n\n- 对内服务公共参数\n\n  - user_id\n  - biz_id\n  - service_id\n\n\n\n### 出参\n\n- 类型\n\n  强制使用 application/json 类型，尽量为字符串类型。\n\n  避免返回Long。\n\n  \n\n- 返回码\n\n  业务异常、系统异常要分开。<br>业务异常保证无歧义，系统异常返回码为99999，降级使用。<br>确保多重状态，有不同的返回码，<br>例如，有一个接口叫\"收单接口\"，其内部调用\"下单\"接口。<br>收单服务正常的时候，下单接口可能返回失败。<br>设计接口结构时，状态码不能有歧义，\"收单正常，下单失败\" 与 \"收单失败\"  返回不同的状态码\n\n  \n\n- 包装结构\n\n  错误返回：`{ code, msg, trace_id }`<br>正常返回：`{ code, msg, result: {} }` <br>分页返回：`{ code, msg, result: { recordList:[], page_info:{} } }`<br>**result 不允许为数组，默认为 空 {}，在java中使用 emptyMap 常量**\n\n  \n\n### 实现幂等的策略\n\n- 唯一id + 时间字段。通过时间过滤后，使用trans_id 避免重复 （最通用的实现）\n\n  可以加前置 缓存队列 ，进行专门的去重。\n\n- 新增类接口，加唯一索引。（低并发下，实现最简单）\n\n- 乐观锁字段。（效率最高，但大量并发时需要避免）\n\n- 服务端发放提交票据，（两次交互，费时费力，不推荐）\n\n- 状态机幂等， `set order_status = [done] ` 天生幂等 \n\n效率优先：乐观锁 > 唯一约束 > 唯一索引\n\n\n\n### 异步策略\n\n例如**上传接口**\n\n- 同步\n\n```java\npublic SyncUploadResponse syncUpload(SyncUploadRequest request) {\n  SyncUploadResponse response = new SyncUploadResponse();\n  response.setDownloadUrl(uploadFile(request.getFile()));\n  response.setThumbnailDownloadUrl(uploadThumbnailFile(request.getFile()));\n  return response;\n}\n```\n\n- 异步上传，立即返回一个任务id，客户端根据任务id轮询结果。\n\n  \n\n```java\n//在接口实现上，我们同样把上传任务提交到线程池处理，但是并不会同步等待任务完成，而是完成后把结果写入一个 HashMap，任务查询接口通过查询这个 HashMap 来获得文件 的 URL\npublic class asyncDemo {\n\n    //计数器，作为上传任务的ID\n    private AtomicInteger atomicInteger = new AtomicInteger(0);\n    //暂存上传操作的结果，生产代码需要考虑数据持久化\n    private ConcurrentHashMap<String, SyncQueryUploadTaskResponse> downloadUrl = new ConcurrentHashMap<>();\n\n    // 立即返回任务id\n    public AsyncUploadResponse asyncUpload(AsyncUploadRequest request) {\n        AsyncUploadResponse response = new AsyncUploadResponse();\n        //生成唯一的上传任务ID\n        String taskId = \"upload\" + atomicInteger.incrementAndGet\n        //异步上传操作只返回任务ID\n        response.setTaskId(taskId);\n        //提交上传原始文件操作到线程池异步处理\n        threadPool.execute(() -> {\n            String url = uploadFile(request.getFile());\n            //如果ConcurrentHashMap不包含Key，则初始化一个SyncQueryUploadTaskResponse\n            downloadUrl.computeIfAbsent(taskId,\n                    id -> new SyncQueryUploadTaskResponse(id)).setDownloadUrl(url);\n        });\n\n        //提交上传缩略图操作到线程池异步处理\n        threadPool.execute(() -> {\n            String url = uploadThumbnailFile(request.getFile());\n            downloadUrl.computeIfAbsent(taskId,\n                    id -> new SyncQueryUploadTaskResponse(id)).setThumbnailDownloadUrl(url);\n        });\n        return response;\n    }\n\n```\n\n","slug":"技术规范/API设计规范","published":1,"updated":"2021-07-29T19:42:21.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpc7nj9000159fyc6izhzzc","content":"<hr>\n<hr>\n<h2><span id=\"api设计自查表\"> API设计自查表</span></h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">考虑点</th>\n<th>结论</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">接口命名</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">入参</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">出参</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">header</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">包装结构体</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">版本</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">保障级别 （对内服务 or 对外服务 ｜ 使用人群）</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">是否需要黑白名单，哪个位置加</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">是否需要幂等，以及实现方案</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">是否需要异步，以及实现方案</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2><span id=\"详细解释\"> 详细解释</span></h2>\n<h3><span id=\"标准接口命名\"> 标准接口命名</span></h3>\n<ul>\n<li>\n<p>范例：<br><code>xxx/user/p0/v1/getuserInfo</code><br>业务线 / 所属服务 / 保护级别 / 版本 / getuserInfo</p>\n</li>\n<li>\n<p>禁止，PathVariable，不好管理，性能也有点问题<br>例如：/user/{user_id}</p>\n</li>\n<li>\n<p>禁止，除了 get、post 以外的method，网关不好管理</p>\n</li>\n<li>\n<p><strong>保护级别</strong></p>\n<ul>\n<li>p0: 主流程接口，对外服务核心流程，一般此类接口挂了，用户就会发现系统有问题。<br>需要全力保障的接口</li>\n<li>p1: 非必要业务接口，一般是非核心查询接口，这类接口挂了，用户不容易察觉，<br>网关可以进行接口限流，根据user level 接口限流，也可以拿这类接口开刀。</li>\n<li>p2: 信息采集类接口，可以不用保证可用性，后端也永远返回成功，<br>服务资源不足时候，网关可以直接下掉他们。</li>\n</ul>\n</li>\n<li>\n<p>版本号</p>\n<ul>\n<li>使用v1、v2即可</li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"header\"> header</span></h3>\n<ul>\n<li>\n<p>jwt</p>\n</li>\n<li>\n<p>业务上下文，采集使用</p>\n<p>如 user_id，client_id，client_type，biz，version，user_level，addr 等</p>\n<p>按需添加</p>\n</li>\n<li>\n<p>调用链，trace_id，span_id，</p>\n<p>一般由工具生成。</p>\n</li>\n</ul>\n<h3><span id=\"入参\"> 入参</span></h3>\n<ul>\n<li>\n<p>对外服务公共参数</p>\n<ul>\n<li>防篡改签名</li>\n<li>加token</li>\n</ul>\n</li>\n<li>\n<p>对内服务公共参数</p>\n<ul>\n<li>user_id</li>\n<li>biz_id</li>\n<li>service_id</li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"出参\"> 出参</span></h3>\n<ul>\n<li>\n<p>类型</p>\n<p>强制使用 application/json 类型，尽量为字符串类型。</p>\n<p>避免返回Long。</p>\n</li>\n<li>\n<p>返回码</p>\n<p>业务异常、系统异常要分开。<br>业务异常保证无歧义，系统异常返回码为99999，降级使用。<br>确保多重状态，有不同的返回码，<br>例如，有一个接口叫&quot;收单接口&quot;，其内部调用&quot;下单&quot;接口。<br>收单服务正常的时候，下单接口可能返回失败。<br>设计接口结构时，状态码不能有歧义，“收单正常，下单失败” 与 “收单失败”  返回不同的状态码</p>\n</li>\n<li>\n<p>包装结构</p>\n<p>错误返回：<code>&#123; code, msg, trace_id &#125;</code><br>正常返回：<code>&#123; code, msg, result: &#123;&#125; &#125;</code> <br>分页返回：<code>&#123; code, msg, result: &#123; recordList:[], page_info:&#123;&#125; &#125; &#125;</code><br><strong>result 不允许为数组，默认为 空 {}，在java中使用 emptyMap 常量</strong></p>\n</li>\n</ul>\n<h3><span id=\"实现幂等的策略\"> 实现幂等的策略</span></h3>\n<ul>\n<li>\n<p>唯一id + 时间字段。通过时间过滤后，使用trans_id 避免重复 （最通用的实现）</p>\n<p>可以加前置 缓存队列 ，进行专门的去重。</p>\n</li>\n<li>\n<p>新增类接口，加唯一索引。（低并发下，实现最简单）</p>\n</li>\n<li>\n<p>乐观锁字段。（效率最高，但大量并发时需要避免）</p>\n</li>\n<li>\n<p>服务端发放提交票据，（两次交互，费时费力，不推荐）</p>\n</li>\n<li>\n<p>状态机幂等， <code>set order_status = [done]</code> 天生幂等</p>\n</li>\n</ul>\n<p>效率优先：乐观锁 &gt; 唯一约束 &gt; 唯一索引</p>\n<h3><span id=\"异步策略\"> 异步策略</span></h3>\n<p>例如<strong>上传接口</strong></p>\n<ul>\n<li>同步</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SyncUploadResponse <span class=\"hljs-title\">syncUpload</span><span class=\"hljs-params\">(SyncUploadRequest request)</span> </span>&#123;<br>  SyncUploadResponse response = <span class=\"hljs-keyword\">new</span> SyncUploadResponse();<br>  response.setDownloadUrl(uploadFile(request.getFile()));<br>  response.setThumbnailDownloadUrl(uploadThumbnailFile(request.getFile()));<br>  <span class=\"hljs-keyword\">return</span> response;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<ul>\n<li>异步上传，立即返回一个任务id，客户端根据任务id轮询结果。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//在接口实现上，我们同样把上传任务提交到线程池处理，但是并不会同步等待任务完成，而是完成后把结果写入一个 HashMap，任务查询接口通过查询这个 HashMap 来获得文件 的 URL</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">asyncDemo</span> </span>&#123;<br><br>    <span class=\"hljs-comment\">//计数器，作为上传任务的ID</span><br>    <span class=\"hljs-keyword\">private</span> AtomicInteger atomicInteger = <span class=\"hljs-keyword\">new</span> AtomicInteger(<span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-comment\">//暂存上传操作的结果，生产代码需要考虑数据持久化</span><br>    <span class=\"hljs-keyword\">private</span> ConcurrentHashMap&lt;String, SyncQueryUploadTaskResponse&gt; downloadUrl = <span class=\"hljs-keyword\">new</span> ConcurrentHashMap&lt;&gt;();<br><br>    <span class=\"hljs-comment\">// 立即返回任务id</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> AsyncUploadResponse <span class=\"hljs-title\">asyncUpload</span><span class=\"hljs-params\">(AsyncUploadRequest request)</span> </span>&#123;<br>        AsyncUploadResponse response = <span class=\"hljs-keyword\">new</span> AsyncUploadResponse();<br>        <span class=\"hljs-comment\">//生成唯一的上传任务ID</span><br>        String taskId = <span class=\"hljs-string\">&quot;upload&quot;</span> + atomicInteger.incrementAndGet<br>        <span class=\"hljs-comment\">//异步上传操作只返回任务ID</span><br>        response.setTaskId(taskId);<br>        <span class=\"hljs-comment\">//提交上传原始文件操作到线程池异步处理</span><br>        threadPool.execute(() -&gt; &#123;<br>            String url = uploadFile(request.getFile());<br>            <span class=\"hljs-comment\">//如果ConcurrentHashMap不包含Key，则初始化一个SyncQueryUploadTaskResponse</span><br>            downloadUrl.computeIfAbsent(taskId,<br>                    id -&gt; <span class=\"hljs-keyword\">new</span> SyncQueryUploadTaskResponse(id)).setDownloadUrl(url);<br>        &#125;);<br><br>        <span class=\"hljs-comment\">//提交上传缩略图操作到线程池异步处理</span><br>        threadPool.execute(() -&gt; &#123;<br>            String url = uploadThumbnailFile(request.getFile());<br>            downloadUrl.computeIfAbsent(taskId,<br>                    id -&gt; <span class=\"hljs-keyword\">new</span> SyncQueryUploadTaskResponse(id)).setThumbnailDownloadUrl(url);<br>        &#125;);<br>        <span class=\"hljs-keyword\">return</span> response;<br>    &#125;<br><br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"more":"<hr />\n<hr />\n<h2 id=\"api设计自查表\"><a class=\"markdownIt-Anchor\" href=\"#api设计自查表\"></a> API设计自查表</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">考虑点</th>\n<th>结论</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">接口命名</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">入参</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">出参</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">header</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">包装结构体</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">版本</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">保障级别 （对内服务 or 对外服务 ｜ 使用人群）</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">是否需要黑白名单，哪个位置加</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">是否需要幂等，以及实现方案</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">是否需要异步，以及实现方案</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h2 id=\"详细解释\"><a class=\"markdownIt-Anchor\" href=\"#详细解释\"></a> 详细解释</h2>\n<h3 id=\"标准接口命名\"><a class=\"markdownIt-Anchor\" href=\"#标准接口命名\"></a> 标准接口命名</h3>\n<ul>\n<li>\n<p>范例：<br><code>xxx/user/p0/v1/getuserInfo</code><br>业务线 / 所属服务 / 保护级别 / 版本 / getuserInfo</p>\n</li>\n<li>\n<p>禁止，PathVariable，不好管理，性能也有点问题<br>例如：/user/{user_id}</p>\n</li>\n<li>\n<p>禁止，除了 get、post 以外的method，网关不好管理</p>\n</li>\n<li>\n<p><strong>保护级别</strong></p>\n<ul>\n<li>p0: 主流程接口，对外服务核心流程，一般此类接口挂了，用户就会发现系统有问题。<br>需要全力保障的接口</li>\n<li>p1: 非必要业务接口，一般是非核心查询接口，这类接口挂了，用户不容易察觉，<br>网关可以进行接口限流，根据user level 接口限流，也可以拿这类接口开刀。</li>\n<li>p2: 信息采集类接口，可以不用保证可用性，后端也永远返回成功，<br>服务资源不足时候，网关可以直接下掉他们。</li>\n</ul>\n</li>\n<li>\n<p>版本号</p>\n<ul>\n<li>使用v1、v2即可</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"header\"><a class=\"markdownIt-Anchor\" href=\"#header\"></a> header</h3>\n<ul>\n<li>\n<p>jwt</p>\n</li>\n<li>\n<p>业务上下文，采集使用</p>\n<p>如 user_id，client_id，client_type，biz，version，user_level，addr 等</p>\n<p>按需添加</p>\n</li>\n<li>\n<p>调用链，trace_id，span_id，</p>\n<p>一般由工具生成。</p>\n</li>\n</ul>\n<h3 id=\"入参\"><a class=\"markdownIt-Anchor\" href=\"#入参\"></a> 入参</h3>\n<ul>\n<li>\n<p>对外服务公共参数</p>\n<ul>\n<li>防篡改签名</li>\n<li>加token</li>\n</ul>\n</li>\n<li>\n<p>对内服务公共参数</p>\n<ul>\n<li>user_id</li>\n<li>biz_id</li>\n<li>service_id</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"出参\"><a class=\"markdownIt-Anchor\" href=\"#出参\"></a> 出参</h3>\n<ul>\n<li>\n<p>类型</p>\n<p>强制使用 application/json 类型，尽量为字符串类型。</p>\n<p>避免返回Long。</p>\n</li>\n<li>\n<p>返回码</p>\n<p>业务异常、系统异常要分开。<br>业务异常保证无歧义，系统异常返回码为99999，降级使用。<br>确保多重状态，有不同的返回码，<br>例如，有一个接口叫&quot;收单接口&quot;，其内部调用&quot;下单&quot;接口。<br>收单服务正常的时候，下单接口可能返回失败。<br>设计接口结构时，状态码不能有歧义，“收单正常，下单失败” 与 “收单失败”  返回不同的状态码</p>\n</li>\n<li>\n<p>包装结构</p>\n<p>错误返回：<code>&#123; code, msg, trace_id &#125;</code><br>正常返回：<code>&#123; code, msg, result: &#123;&#125; &#125;</code> <br>分页返回：<code>&#123; code, msg, result: &#123; recordList:[], page_info:&#123;&#125; &#125; &#125;</code><br><strong>result 不允许为数组，默认为 空 {}，在java中使用 emptyMap 常量</strong></p>\n</li>\n</ul>\n<h3 id=\"实现幂等的策略\"><a class=\"markdownIt-Anchor\" href=\"#实现幂等的策略\"></a> 实现幂等的策略</h3>\n<ul>\n<li>\n<p>唯一id + 时间字段。通过时间过滤后，使用trans_id 避免重复 （最通用的实现）</p>\n<p>可以加前置 缓存队列 ，进行专门的去重。</p>\n</li>\n<li>\n<p>新增类接口，加唯一索引。（低并发下，实现最简单）</p>\n</li>\n<li>\n<p>乐观锁字段。（效率最高，但大量并发时需要避免）</p>\n</li>\n<li>\n<p>服务端发放提交票据，（两次交互，费时费力，不推荐）</p>\n</li>\n<li>\n<p>状态机幂等， <code>set order_status = [done]</code> 天生幂等</p>\n</li>\n</ul>\n<p>效率优先：乐观锁 &gt; 唯一约束 &gt; 唯一索引</p>\n<h3 id=\"异步策略\"><a class=\"markdownIt-Anchor\" href=\"#异步策略\"></a> 异步策略</h3>\n<p>例如<strong>上传接口</strong></p>\n<ul>\n<li>同步</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SyncUploadResponse <span class=\"hljs-title\">syncUpload</span><span class=\"hljs-params\">(SyncUploadRequest request)</span> </span>&#123;<br>  SyncUploadResponse response = <span class=\"hljs-keyword\">new</span> SyncUploadResponse();<br>  response.setDownloadUrl(uploadFile(request.getFile()));<br>  response.setThumbnailDownloadUrl(uploadThumbnailFile(request.getFile()));<br>  <span class=\"hljs-keyword\">return</span> response;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>异步上传，立即返回一个任务id，客户端根据任务id轮询结果。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//在接口实现上，我们同样把上传任务提交到线程池处理，但是并不会同步等待任务完成，而是完成后把结果写入一个 HashMap，任务查询接口通过查询这个 HashMap 来获得文件 的 URL</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">asyncDemo</span> </span>&#123;<br><br>    <span class=\"hljs-comment\">//计数器，作为上传任务的ID</span><br>    <span class=\"hljs-keyword\">private</span> AtomicInteger atomicInteger = <span class=\"hljs-keyword\">new</span> AtomicInteger(<span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-comment\">//暂存上传操作的结果，生产代码需要考虑数据持久化</span><br>    <span class=\"hljs-keyword\">private</span> ConcurrentHashMap&lt;String, SyncQueryUploadTaskResponse&gt; downloadUrl = <span class=\"hljs-keyword\">new</span> ConcurrentHashMap&lt;&gt;();<br><br>    <span class=\"hljs-comment\">// 立即返回任务id</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> AsyncUploadResponse <span class=\"hljs-title\">asyncUpload</span><span class=\"hljs-params\">(AsyncUploadRequest request)</span> </span>&#123;<br>        AsyncUploadResponse response = <span class=\"hljs-keyword\">new</span> AsyncUploadResponse();<br>        <span class=\"hljs-comment\">//生成唯一的上传任务ID</span><br>        String taskId = <span class=\"hljs-string\">&quot;upload&quot;</span> + atomicInteger.incrementAndGet<br>        <span class=\"hljs-comment\">//异步上传操作只返回任务ID</span><br>        response.setTaskId(taskId);<br>        <span class=\"hljs-comment\">//提交上传原始文件操作到线程池异步处理</span><br>        threadPool.execute(() -&gt; &#123;<br>            String url = uploadFile(request.getFile());<br>            <span class=\"hljs-comment\">//如果ConcurrentHashMap不包含Key，则初始化一个SyncQueryUploadTaskResponse</span><br>            downloadUrl.computeIfAbsent(taskId,<br>                    id -&gt; <span class=\"hljs-keyword\">new</span> SyncQueryUploadTaskResponse(id)).setDownloadUrl(url);<br>        &#125;);<br><br>        <span class=\"hljs-comment\">//提交上传缩略图操作到线程池异步处理</span><br>        threadPool.execute(() -&gt; &#123;<br>            String url = uploadThumbnailFile(request.getFile());<br>            downloadUrl.computeIfAbsent(taskId,<br>                    id -&gt; <span class=\"hljs-keyword\">new</span> SyncQueryUploadTaskResponse(id)).setThumbnailDownloadUrl(url);<br>        &#125;);<br>        <span class=\"hljs-keyword\">return</span> response;<br>    &#125;<br><br></code></pre></td></tr></table></figure>\n"},{"title":"mysql开发规范","date":"2021-07-27T14:53:44.000Z","toc":true,"excerpt":"不会出大问题的mysql开发规范，一般情况下。无脑遵守就好","_content":"\n------\n\n\n\n[TOC]\n\n\n\n## **建表规范**\n\n\n\n1. 默认使用使用innoDB 引擎，字符集 utf8mb4\n2. 表名称规范<br>`[biz]_xxxx_[app|mis]_conf` : 在线、离线服务配置。 <br>`[biz]_xxxx_record` : 数据表，最高优先级。<br>`[biz]_xxxx_[app|mis]log` : 日志表，低优先级\n3. 所有字段 NOT NULL ，优先设置 unsigned，小数设置为decimal，金额存成分，时间设置为datatime\n4. 字段最大长度，保存克制，防止建索引时空间不够。\n5. 字段长度大于1024需要拆分表，使用text， 主表上存拆分表id。\n6. 表示 “是否” 字段，一律使用 if_xxx 的方式命名，数据类型是unsigned tinyint\n7. 日增10万，年增5000万，id使用bigint，雪花算法。其余情况使用integer自增主键\n8. 字段顺序依次为：主键、业务主键、状态、各种外键、各种分类、具体props、base属性… <br>正确示例：id，order_id，order_status，product_id，user_id，order_time\n9. 保留名称，show、update、desc、status、range、match、delayed\n10. 推荐：单表最大长度小于2000万，单行长度小于16Kb，单表小于2g\n\n\n\n\n\n## **索引规范**\n\n1. 联合索引的字段数目不能超过5，单表索引数量也不能超过5，索引设计遵循B+ Tree最左前匹配原则\n\n2. 对一个VARCHAR(N)列创建索引时，通常取其50%（甚至更小）左右长度创建前缀索引就足以满足80%以上的查询需求了，没必要创建整列的全长度索引  \n\n3. 根据业务命名空间的顺序构造联合索引，比如 productId/userId/serviceId/time/xxx\n\n4. order by ， group by 的字段需要建立索引，尽量不使用groupby，orderby 使用java进程完成此操作\n\n5. 业务上的全局唯一字段，需要建立唯一索引\n\n6. 事物中，如 SELECT * FROM yes WHERE name ='yes' FOR UPDATE; <br>通过等普通条件判断【name = xxx】进行筛选加锁时，则该列（name）需要加索引。否则容易锁表。\n\n\n\n\n\n\n## **SQL开发规范**\n\n1. 对于 java 程序，只能使用 sql 模板查询，不允许使用各类动态sql生成器。\n\n2. 强烈推荐：只使用 mybatis_code_helper_pro 生成 xml sql 语句。\n\n3. 对外在线接口：<br>使用短sql，禁止三个表 join，禁止 where 子句，禁止 sql 函数。<br>对外接口尽量避免复杂查询，查询首先保证拓展性。\n\n4. 推荐：使用mysql执行计划验收sql语句，注意索引的有序性，尽量使用覆盖索引。\n\n5. 事务避免本类调用，使用hutool，SpringUtil获取事务方法。<br>直接使用传统 commit 指令也是不错的选择。\n\n6. 超过10万行数据，首先确定分页的必要性；能否转换为下拉查询，或时间查询。<br>必须精确分页的话，查询使用 inner join\n\n   ```sql\n   select * from tables inner join\n   ( select id from tables where [条件]  order by xxx limie 10000,10 )\n   using id;\n   ```\n\n\n\n\n\n##  **分库分表后查询规范**\n\n- 禁用语句\n\n\n1. 分表后尽量只查询，或者根据 id update，避免范围修改，严禁莽撞的跨区修改。\n2. 禁止，子查询，group by，order by\n3. 禁止，悲观锁，使用Redisson替代数据库悲观锁（尽量使用无锁方法处理业务逻辑）。\n4. 禁止，update sharding-key。update 分片键后可能会导致后面的查询找不到数据。\n5. 禁止，跨区 update 、delete [order by] limit 。 mycat会在多个节点执行 limit语句，造成过多删除。\n\n","source":"_posts/技术规范/mysql开发规范.md","raw":"---\ntitle: mysql开发规范\ndate: 2021-07-27 22:53:44\ntoc: true \n\nexcerpt: 不会出大问题的mysql开发规范，一般情况下。无脑遵守就好\n\ncategories:\n- 后端\n\ntags:\n- mysql\n- 技术规范\n- 设计\n---\n\n------\n\n\n\n[TOC]\n\n\n\n## **建表规范**\n\n\n\n1. 默认使用使用innoDB 引擎，字符集 utf8mb4\n2. 表名称规范<br>`[biz]_xxxx_[app|mis]_conf` : 在线、离线服务配置。 <br>`[biz]_xxxx_record` : 数据表，最高优先级。<br>`[biz]_xxxx_[app|mis]log` : 日志表，低优先级\n3. 所有字段 NOT NULL ，优先设置 unsigned，小数设置为decimal，金额存成分，时间设置为datatime\n4. 字段最大长度，保存克制，防止建索引时空间不够。\n5. 字段长度大于1024需要拆分表，使用text， 主表上存拆分表id。\n6. 表示 “是否” 字段，一律使用 if_xxx 的方式命名，数据类型是unsigned tinyint\n7. 日增10万，年增5000万，id使用bigint，雪花算法。其余情况使用integer自增主键\n8. 字段顺序依次为：主键、业务主键、状态、各种外键、各种分类、具体props、base属性… <br>正确示例：id，order_id，order_status，product_id，user_id，order_time\n9. 保留名称，show、update、desc、status、range、match、delayed\n10. 推荐：单表最大长度小于2000万，单行长度小于16Kb，单表小于2g\n\n\n\n\n\n## **索引规范**\n\n1. 联合索引的字段数目不能超过5，单表索引数量也不能超过5，索引设计遵循B+ Tree最左前匹配原则\n\n2. 对一个VARCHAR(N)列创建索引时，通常取其50%（甚至更小）左右长度创建前缀索引就足以满足80%以上的查询需求了，没必要创建整列的全长度索引  \n\n3. 根据业务命名空间的顺序构造联合索引，比如 productId/userId/serviceId/time/xxx\n\n4. order by ， group by 的字段需要建立索引，尽量不使用groupby，orderby 使用java进程完成此操作\n\n5. 业务上的全局唯一字段，需要建立唯一索引\n\n6. 事物中，如 SELECT * FROM yes WHERE name ='yes' FOR UPDATE; <br>通过等普通条件判断【name = xxx】进行筛选加锁时，则该列（name）需要加索引。否则容易锁表。\n\n\n\n\n\n\n## **SQL开发规范**\n\n1. 对于 java 程序，只能使用 sql 模板查询，不允许使用各类动态sql生成器。\n\n2. 强烈推荐：只使用 mybatis_code_helper_pro 生成 xml sql 语句。\n\n3. 对外在线接口：<br>使用短sql，禁止三个表 join，禁止 where 子句，禁止 sql 函数。<br>对外接口尽量避免复杂查询，查询首先保证拓展性。\n\n4. 推荐：使用mysql执行计划验收sql语句，注意索引的有序性，尽量使用覆盖索引。\n\n5. 事务避免本类调用，使用hutool，SpringUtil获取事务方法。<br>直接使用传统 commit 指令也是不错的选择。\n\n6. 超过10万行数据，首先确定分页的必要性；能否转换为下拉查询，或时间查询。<br>必须精确分页的话，查询使用 inner join\n\n   ```sql\n   select * from tables inner join\n   ( select id from tables where [条件]  order by xxx limie 10000,10 )\n   using id;\n   ```\n\n\n\n\n\n##  **分库分表后查询规范**\n\n- 禁用语句\n\n\n1. 分表后尽量只查询，或者根据 id update，避免范围修改，严禁莽撞的跨区修改。\n2. 禁止，子查询，group by，order by\n3. 禁止，悲观锁，使用Redisson替代数据库悲观锁（尽量使用无锁方法处理业务逻辑）。\n4. 禁止，update sharding-key。update 分片键后可能会导致后面的查询找不到数据。\n5. 禁止，跨区 update 、delete [order by] limit 。 mycat会在多个节点执行 limit语句，造成过多删除。\n\n","slug":"技术规范/mysql开发规范","published":1,"updated":"2021-07-29T19:41:56.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpc7njc000259fye73od906","content":"<hr>\n<p>[TOC]</p>\n<h2><span id=\"建表规范\"> <strong>建表规范</strong></span></h2>\n<ol>\n<li>默认使用使用innoDB 引擎，字符集 utf8mb4</li>\n<li>表名称规范<br><code>[biz]_xxxx_[app|mis]_conf</code> : 在线、离线服务配置。 <br><code>[biz]_xxxx_record</code> : 数据表，最高优先级。<br><code>[biz]_xxxx_[app|mis]log</code> : 日志表，低优先级</li>\n<li>所有字段 NOT NULL ，优先设置 unsigned，小数设置为decimal，金额存成分，时间设置为datatime</li>\n<li>字段最大长度，保存克制，防止建索引时空间不够。</li>\n<li>字段长度大于1024需要拆分表，使用text， 主表上存拆分表id。</li>\n<li>表示 “是否” 字段，一律使用 if_xxx 的方式命名，数据类型是unsigned tinyint</li>\n<li>日增10万，年增5000万，id使用bigint，雪花算法。其余情况使用integer自增主键</li>\n<li>字段顺序依次为：主键、业务主键、状态、各种外键、各种分类、具体props、base属性… <br>正确示例：id，order_id，order_status，product_id，user_id，order_time</li>\n<li>保留名称，show、update、desc、status、range、match、delayed</li>\n<li>推荐：单表最大长度小于2000万，单行长度小于16Kb，单表小于2g</li>\n</ol>\n<h2><span id=\"索引规范\"> <strong>索引规范</strong></span></h2>\n<ol>\n<li>\n<p>联合索引的字段数目不能超过5，单表索引数量也不能超过5，索引设计遵循B+ Tree最左前匹配原则</p>\n</li>\n<li>\n<p>对一个VARCHAR(N)列创建索引时，通常取其50%（甚至更小）左右长度创建前缀索引就足以满足80%以上的查询需求了，没必要创建整列的全长度索引</p>\n</li>\n<li>\n<p>根据业务命名空间的顺序构造联合索引，比如 productId/userId/serviceId/time/xxx</p>\n</li>\n<li>\n<p>order by ， group by 的字段需要建立索引，尽量不使用groupby，orderby 使用java进程完成此操作</p>\n</li>\n<li>\n<p>业务上的全局唯一字段，需要建立唯一索引</p>\n</li>\n<li>\n<p>事物中，如 SELECT * FROM yes WHERE name =‘yes’ FOR UPDATE; <br>通过等普通条件判断【name = xxx】进行筛选加锁时，则该列（name）需要加索引。否则容易锁表。</p>\n</li>\n</ol>\n<h2><span id=\"sql开发规范\"> <strong>SQL开发规范</strong></span></h2>\n<ol>\n<li>\n<p>对于 java 程序，只能使用 sql 模板查询，不允许使用各类动态sql生成器。</p>\n</li>\n<li>\n<p>强烈推荐：只使用 mybatis_code_helper_pro 生成 xml sql 语句。</p>\n</li>\n<li>\n<p>对外在线接口：<br>使用短sql，禁止三个表 join，禁止 where 子句，禁止 sql 函数。<br>对外接口尽量避免复杂查询，查询首先保证拓展性。</p>\n</li>\n<li>\n<p>推荐：使用mysql执行计划验收sql语句，注意索引的有序性，尽量使用覆盖索引。</p>\n</li>\n<li>\n<p>事务避免本类调用，使用hutool，SpringUtil获取事务方法。<br>直接使用传统 commit 指令也是不错的选择。</p>\n</li>\n<li>\n<p>超过10万行数据，首先确定分页的必要性；能否转换为下拉查询，或时间查询。<br>必须精确分页的话，查询使用 inner join</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> tables <span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span><br>( <span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> tables <span class=\"hljs-keyword\">where</span> [条件]  <span class=\"hljs-keyword\">order</span> <span class=\"hljs-keyword\">by</span> xxx limie <span class=\"hljs-number\">10000</span>,<span class=\"hljs-number\">10</span> )<br><span class=\"hljs-keyword\">using</span> id;<br></code></pre></div></td></tr></table></figure>\n</li>\n</ol>\n<h2><span id=\"分库分表后查询规范\"> <strong>分库分表后查询规范</strong></span></h2>\n<ul>\n<li>禁用语句</li>\n</ul>\n<ol>\n<li>分表后尽量只查询，或者根据 id update，避免范围修改，严禁莽撞的跨区修改。</li>\n<li>禁止，子查询，group by，order by</li>\n<li>禁止，悲观锁，使用Redisson替代数据库悲观锁（尽量使用无锁方法处理业务逻辑）。</li>\n<li>禁止，update sharding-key。update 分片键后可能会导致后面的查询找不到数据。</li>\n<li>禁止，跨区 update 、delete [order by] limit 。 mycat会在多个节点执行 limit语句，造成过多删除。</li>\n</ol>\n","site":{"data":{}},"more":"<hr />\n<p>[TOC]</p>\n<h2 id=\"建表规范\"><a class=\"markdownIt-Anchor\" href=\"#建表规范\"></a> <strong>建表规范</strong></h2>\n<ol>\n<li>默认使用使用innoDB 引擎，字符集 utf8mb4</li>\n<li>表名称规范<br><code>[biz]_xxxx_[app|mis]_conf</code> : 在线、离线服务配置。 <br><code>[biz]_xxxx_record</code> : 数据表，最高优先级。<br><code>[biz]_xxxx_[app|mis]log</code> : 日志表，低优先级</li>\n<li>所有字段 NOT NULL ，优先设置 unsigned，小数设置为decimal，金额存成分，时间设置为datatime</li>\n<li>字段最大长度，保存克制，防止建索引时空间不够。</li>\n<li>字段长度大于1024需要拆分表，使用text， 主表上存拆分表id。</li>\n<li>表示 “是否” 字段，一律使用 if_xxx 的方式命名，数据类型是unsigned tinyint</li>\n<li>日增10万，年增5000万，id使用bigint，雪花算法。其余情况使用integer自增主键</li>\n<li>字段顺序依次为：主键、业务主键、状态、各种外键、各种分类、具体props、base属性… <br>正确示例：id，order_id，order_status，product_id，user_id，order_time</li>\n<li>保留名称，show、update、desc、status、range、match、delayed</li>\n<li>推荐：单表最大长度小于2000万，单行长度小于16Kb，单表小于2g</li>\n</ol>\n<h2 id=\"索引规范\"><a class=\"markdownIt-Anchor\" href=\"#索引规范\"></a> <strong>索引规范</strong></h2>\n<ol>\n<li>\n<p>联合索引的字段数目不能超过5，单表索引数量也不能超过5，索引设计遵循B+ Tree最左前匹配原则</p>\n</li>\n<li>\n<p>对一个VARCHAR(N)列创建索引时，通常取其50%（甚至更小）左右长度创建前缀索引就足以满足80%以上的查询需求了，没必要创建整列的全长度索引</p>\n</li>\n<li>\n<p>根据业务命名空间的顺序构造联合索引，比如 productId/userId/serviceId/time/xxx</p>\n</li>\n<li>\n<p>order by ， group by 的字段需要建立索引，尽量不使用groupby，orderby 使用java进程完成此操作</p>\n</li>\n<li>\n<p>业务上的全局唯一字段，需要建立唯一索引</p>\n</li>\n<li>\n<p>事物中，如 SELECT * FROM yes WHERE name =‘yes’ FOR UPDATE; <br>通过等普通条件判断【name = xxx】进行筛选加锁时，则该列（name）需要加索引。否则容易锁表。</p>\n</li>\n</ol>\n<h2 id=\"sql开发规范\"><a class=\"markdownIt-Anchor\" href=\"#sql开发规范\"></a> <strong>SQL开发规范</strong></h2>\n<ol>\n<li>\n<p>对于 java 程序，只能使用 sql 模板查询，不允许使用各类动态sql生成器。</p>\n</li>\n<li>\n<p>强烈推荐：只使用 mybatis_code_helper_pro 生成 xml sql 语句。</p>\n</li>\n<li>\n<p>对外在线接口：<br>使用短sql，禁止三个表 join，禁止 where 子句，禁止 sql 函数。<br>对外接口尽量避免复杂查询，查询首先保证拓展性。</p>\n</li>\n<li>\n<p>推荐：使用mysql执行计划验收sql语句，注意索引的有序性，尽量使用覆盖索引。</p>\n</li>\n<li>\n<p>事务避免本类调用，使用hutool，SpringUtil获取事务方法。<br>直接使用传统 commit 指令也是不错的选择。</p>\n</li>\n<li>\n<p>超过10万行数据，首先确定分页的必要性；能否转换为下拉查询，或时间查询。<br>必须精确分页的话，查询使用 inner join</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> tables <span class=\"hljs-keyword\">inner</span> <span class=\"hljs-keyword\">join</span><br>( <span class=\"hljs-keyword\">select</span> id <span class=\"hljs-keyword\">from</span> tables <span class=\"hljs-keyword\">where</span> [条件]  <span class=\"hljs-keyword\">order</span> <span class=\"hljs-keyword\">by</span> xxx limie <span class=\"hljs-number\">10000</span>,<span class=\"hljs-number\">10</span> )<br><span class=\"hljs-keyword\">using</span> id;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"分库分表后查询规范\"><a class=\"markdownIt-Anchor\" href=\"#分库分表后查询规范\"></a> <strong>分库分表后查询规范</strong></h2>\n<ul>\n<li>禁用语句</li>\n</ul>\n<ol>\n<li>分表后尽量只查询，或者根据 id update，避免范围修改，严禁莽撞的跨区修改。</li>\n<li>禁止，子查询，group by，order by</li>\n<li>禁止，悲观锁，使用Redisson替代数据库悲观锁（尽量使用无锁方法处理业务逻辑）。</li>\n<li>禁止，update sharding-key。update 分片键后可能会导致后面的查询找不到数据。</li>\n<li>禁止，跨区 update 、delete [order by] limit 。 mycat会在多个节点执行 limit语句，造成过多删除。</li>\n</ol>\n"},{"title":"分支规范","toc":true,"excerpt":"目前我用着最舒服的分支管理","date":"2021-07-29T19:06:46.000Z","_content":"\n\n\n------\n\n\n\n## 分支规范\n\n\n\n#### AoneFlow：一种 TrunkBased 与 GitFlow  的折衷方案\n\n\n\n#### 三种分支类型\n\n- 主干分支 master tag: v1.2、 v1.3 <br>对应线上的当前代码，需要只读保护。\n- 发布分支 release/qa1、release/qa2… 、release/ prod <br>对应测试环境、预发环境上的代码（测试环境可能有很多个，有时候需要并行测试）<br>禁止直接push，仅支持merge request 后push\n- 特性分支 feature/001、feature/002<br>对应功能点分支。\n\n\n\n\n\n#### 组成\n\n一个master + N个 feature 分支 + N个 release 分支\n\n\n\n#### 工作流程\n\n1. 开始工作前，从master 创建特性分支 feature/001，开始开发。\n\n2. 开发完毕后，feature/001 提交 PR 到 release/qa， 此时开发者相互CR 其他人的 PR。\n\n3. CR完成后，合并所有PR，如果有冲突，重新提交无冲突的 PR，开始测试。\n\n4. 测试完毕后\n\n   1. 检查master 是否有更新，比如开发新特性的时候，master分支发生了hotfix。<br>如果有更新，则需要对 release/prod 进行回归测试。\n   2. 根据master 创新新分支 release/prod , 将 release/qa 合并到 release/prod\n\n5. 使用 release/prod merge 到 master <br>此时墙裂建议使用idea diff code 功能，整体看一下本次的合并，有没有额外的脏代码<br>合并后，添加 tag ，开始上线流程。\n\n6. 上线后，删除相关的 feature 分支，清理半年以前的tag，看日志，观察程序运行情况。\n\n\n\n#### 核心逻辑\n\n任何代码的改动，只能在feature 上push，其他分支的代码，如果需要响应改动<br>则通过 merge request 将变动传进来。\n\n\n\n#### 小痛点\n\n- 提交改动有点麻烦，每次都要在feature分支上提交后，在release分支上进行merge request\n- 这个模式的一个痛点，当n个f分支，n个release分支的时候<br>需要记住，n个feature分支，与release 分支间的对应关系。\n\n\n\n#### 工具\n\n- 阿里巴巴内部使用aone平台管理，对外发布的产品叫 [云效平台](https://help.aliyun.com/document_detail/153762.html?spm=5176.168087.J_7469444330.4.91376942pV1EvU)\n- 有赞qa平台，公交车发布系统，也借鉴了aoneFlow的思路<br> [3.4 公交车系统](https://tech.youzan.com/team/)\n\n\n\n#### 参考介绍：\n\n\n\n- [项目版本管理的最佳实践：飞流Flow（阿里AoneFlow）篇](https://blog.csdn.net/bbcckkl/article/details/111087267)\n- [Git-flow分支管理与Aone-flow分支管理对比](https://blog.csdn.net/liumingzhe1/article/details/105287150)\n- [阿里巴巴如何管理代码分支？ ](https://www.infoq.cn/article/EaC4c6yiJrzZ_Gtaf9Ne)\n- [阿里巴巴在DevOps实践中的创新和思考-ppt ](http://bos.itdks.com/7b7b1baa2f1244b8b3c2b3ae26de3eea.pdf)\n\n","source":"_posts/技术规范/分支规范.md","raw":"---\ntitle: 分支规范\ntoc: true\nexcerpt: 目前我用着最舒服的分支管理\ncategories:\n  - 后端\ntags:\n  - 设计\n  - 技术规范\ndate: 2021-07-30 03:06:46\n---\n\n\n\n------\n\n\n\n## 分支规范\n\n\n\n#### AoneFlow：一种 TrunkBased 与 GitFlow  的折衷方案\n\n\n\n#### 三种分支类型\n\n- 主干分支 master tag: v1.2、 v1.3 <br>对应线上的当前代码，需要只读保护。\n- 发布分支 release/qa1、release/qa2… 、release/ prod <br>对应测试环境、预发环境上的代码（测试环境可能有很多个，有时候需要并行测试）<br>禁止直接push，仅支持merge request 后push\n- 特性分支 feature/001、feature/002<br>对应功能点分支。\n\n\n\n\n\n#### 组成\n\n一个master + N个 feature 分支 + N个 release 分支\n\n\n\n#### 工作流程\n\n1. 开始工作前，从master 创建特性分支 feature/001，开始开发。\n\n2. 开发完毕后，feature/001 提交 PR 到 release/qa， 此时开发者相互CR 其他人的 PR。\n\n3. CR完成后，合并所有PR，如果有冲突，重新提交无冲突的 PR，开始测试。\n\n4. 测试完毕后\n\n   1. 检查master 是否有更新，比如开发新特性的时候，master分支发生了hotfix。<br>如果有更新，则需要对 release/prod 进行回归测试。\n   2. 根据master 创新新分支 release/prod , 将 release/qa 合并到 release/prod\n\n5. 使用 release/prod merge 到 master <br>此时墙裂建议使用idea diff code 功能，整体看一下本次的合并，有没有额外的脏代码<br>合并后，添加 tag ，开始上线流程。\n\n6. 上线后，删除相关的 feature 分支，清理半年以前的tag，看日志，观察程序运行情况。\n\n\n\n#### 核心逻辑\n\n任何代码的改动，只能在feature 上push，其他分支的代码，如果需要响应改动<br>则通过 merge request 将变动传进来。\n\n\n\n#### 小痛点\n\n- 提交改动有点麻烦，每次都要在feature分支上提交后，在release分支上进行merge request\n- 这个模式的一个痛点，当n个f分支，n个release分支的时候<br>需要记住，n个feature分支，与release 分支间的对应关系。\n\n\n\n#### 工具\n\n- 阿里巴巴内部使用aone平台管理，对外发布的产品叫 [云效平台](https://help.aliyun.com/document_detail/153762.html?spm=5176.168087.J_7469444330.4.91376942pV1EvU)\n- 有赞qa平台，公交车发布系统，也借鉴了aoneFlow的思路<br> [3.4 公交车系统](https://tech.youzan.com/team/)\n\n\n\n#### 参考介绍：\n\n\n\n- [项目版本管理的最佳实践：飞流Flow（阿里AoneFlow）篇](https://blog.csdn.net/bbcckkl/article/details/111087267)\n- [Git-flow分支管理与Aone-flow分支管理对比](https://blog.csdn.net/liumingzhe1/article/details/105287150)\n- [阿里巴巴如何管理代码分支？ ](https://www.infoq.cn/article/EaC4c6yiJrzZ_Gtaf9Ne)\n- [阿里巴巴在DevOps实践中的创新和思考-ppt ](http://bos.itdks.com/7b7b1baa2f1244b8b3c2b3ae26de3eea.pdf)\n\n","slug":"技术规范/分支规范","published":1,"updated":"2021-07-29T19:45:49.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrpc7njg000559fygv68abew","content":"<hr>\n<h2><span id=\"分支规范\"> 分支规范</span></h2>\n<h4><span id=\"aoneflow一种-trunkbased-与-gitflow-的折衷方案\"> AoneFlow：一种 TrunkBased 与 GitFlow  的折衷方案</span></h4>\n<h4><span id=\"三种分支类型\"> 三种分支类型</span></h4>\n<ul>\n<li>主干分支 master tag: v1.2、 v1.3 <br>对应线上的当前代码，需要只读保护。</li>\n<li>发布分支 release/qa1、release/qa2… 、release/ prod <br>对应测试环境、预发环境上的代码（测试环境可能有很多个，有时候需要并行测试）<br>禁止直接push，仅支持merge request 后push</li>\n<li>特性分支 feature/001、feature/002<br>对应功能点分支。</li>\n</ul>\n<h4><span id=\"组成\"> 组成</span></h4>\n<p>一个master + N个 feature 分支 + N个 release 分支</p>\n<h4><span id=\"工作流程\"> 工作流程</span></h4>\n<ol>\n<li>\n<p>开始工作前，从master 创建特性分支 feature/001，开始开发。</p>\n</li>\n<li>\n<p>开发完毕后，feature/001 提交 PR 到 release/qa， 此时开发者相互CR 其他人的 PR。</p>\n</li>\n<li>\n<p>CR完成后，合并所有PR，如果有冲突，重新提交无冲突的 PR，开始测试。</p>\n</li>\n<li>\n<p>测试完毕后</p>\n<ol>\n<li>检查master 是否有更新，比如开发新特性的时候，master分支发生了hotfix。<br>如果有更新，则需要对 release/prod 进行回归测试。</li>\n<li>根据master 创新新分支 release/prod , 将 release/qa 合并到 release/prod</li>\n</ol>\n</li>\n<li>\n<p>使用 release/prod merge 到 master <br>此时墙裂建议使用idea diff code 功能，整体看一下本次的合并，有没有额外的脏代码<br>合并后，添加 tag ，开始上线流程。</p>\n</li>\n<li>\n<p>上线后，删除相关的 feature 分支，清理半年以前的tag，看日志，观察程序运行情况。</p>\n</li>\n</ol>\n<h4><span id=\"核心逻辑\"> 核心逻辑</span></h4>\n<p>任何代码的改动，只能在feature 上push，其他分支的代码，如果需要响应改动<br>则通过 merge request 将变动传进来。</p>\n<h4><span id=\"小痛点\"> 小痛点</span></h4>\n<ul>\n<li>提交改动有点麻烦，每次都要在feature分支上提交后，在release分支上进行merge request</li>\n<li>这个模式的一个痛点，当n个f分支，n个release分支的时候<br>需要记住，n个feature分支，与release 分支间的对应关系。</li>\n</ul>\n<h4><span id=\"工具\"> 工具</span></h4>\n<ul>\n<li>阿里巴巴内部使用aone平台管理，对外发布的产品叫 <a href=\"https://help.aliyun.com/document_detail/153762.html?spm=5176.168087.J_7469444330.4.91376942pV1EvU\">云效平台</a></li>\n<li>有赞qa平台，公交车发布系统，也借鉴了aoneFlow的思路<br> <a href=\"https://tech.youzan.com/team/\">3.4 公交车系统</a></li>\n</ul>\n<h4><span id=\"参考介绍\"> 参考介绍：</span></h4>\n<ul>\n<li><a href=\"https://blog.csdn.net/bbcckkl/article/details/111087267\">项目版本管理的最佳实践：飞流Flow（阿里AoneFlow）篇</a></li>\n<li><a href=\"https://blog.csdn.net/liumingzhe1/article/details/105287150\">Git-flow分支管理与Aone-flow分支管理对比</a></li>\n<li><a href=\"https://www.infoq.cn/article/EaC4c6yiJrzZ_Gtaf9Ne\">阿里巴巴如何管理代码分支？ </a></li>\n<li><a href=\"http://bos.itdks.com/7b7b1baa2f1244b8b3c2b3ae26de3eea.pdf\">阿里巴巴在DevOps实践中的创新和思考-ppt </a></li>\n</ul>\n","site":{"data":{}},"more":"<hr />\n<h2 id=\"分支规范\"><a class=\"markdownIt-Anchor\" href=\"#分支规范\"></a> 分支规范</h2>\n<h4 id=\"aoneflow一种-trunkbased-与-gitflow-的折衷方案\"><a class=\"markdownIt-Anchor\" href=\"#aoneflow一种-trunkbased-与-gitflow-的折衷方案\"></a> AoneFlow：一种 TrunkBased 与 GitFlow  的折衷方案</h4>\n<h4 id=\"三种分支类型\"><a class=\"markdownIt-Anchor\" href=\"#三种分支类型\"></a> 三种分支类型</h4>\n<ul>\n<li>主干分支 master tag: v1.2、 v1.3 <br>对应线上的当前代码，需要只读保护。</li>\n<li>发布分支 release/qa1、release/qa2… 、release/ prod <br>对应测试环境、预发环境上的代码（测试环境可能有很多个，有时候需要并行测试）<br>禁止直接push，仅支持merge request 后push</li>\n<li>特性分支 feature/001、feature/002<br>对应功能点分支。</li>\n</ul>\n<h4 id=\"组成\"><a class=\"markdownIt-Anchor\" href=\"#组成\"></a> 组成</h4>\n<p>一个master + N个 feature 分支 + N个 release 分支</p>\n<h4 id=\"工作流程\"><a class=\"markdownIt-Anchor\" href=\"#工作流程\"></a> 工作流程</h4>\n<ol>\n<li>\n<p>开始工作前，从master 创建特性分支 feature/001，开始开发。</p>\n</li>\n<li>\n<p>开发完毕后，feature/001 提交 PR 到 release/qa， 此时开发者相互CR 其他人的 PR。</p>\n</li>\n<li>\n<p>CR完成后，合并所有PR，如果有冲突，重新提交无冲突的 PR，开始测试。</p>\n</li>\n<li>\n<p>测试完毕后</p>\n<ol>\n<li>检查master 是否有更新，比如开发新特性的时候，master分支发生了hotfix。<br>如果有更新，则需要对 release/prod 进行回归测试。</li>\n<li>根据master 创新新分支 release/prod , 将 release/qa 合并到 release/prod</li>\n</ol>\n</li>\n<li>\n<p>使用 release/prod merge 到 master <br>此时墙裂建议使用idea diff code 功能，整体看一下本次的合并，有没有额外的脏代码<br>合并后，添加 tag ，开始上线流程。</p>\n</li>\n<li>\n<p>上线后，删除相关的 feature 分支，清理半年以前的tag，看日志，观察程序运行情况。</p>\n</li>\n</ol>\n<h4 id=\"核心逻辑\"><a class=\"markdownIt-Anchor\" href=\"#核心逻辑\"></a> 核心逻辑</h4>\n<p>任何代码的改动，只能在feature 上push，其他分支的代码，如果需要响应改动<br>则通过 merge request 将变动传进来。</p>\n<h4 id=\"小痛点\"><a class=\"markdownIt-Anchor\" href=\"#小痛点\"></a> 小痛点</h4>\n<ul>\n<li>提交改动有点麻烦，每次都要在feature分支上提交后，在release分支上进行merge request</li>\n<li>这个模式的一个痛点，当n个f分支，n个release分支的时候<br>需要记住，n个feature分支，与release 分支间的对应关系。</li>\n</ul>\n<h4 id=\"工具\"><a class=\"markdownIt-Anchor\" href=\"#工具\"></a> 工具</h4>\n<ul>\n<li>阿里巴巴内部使用aone平台管理，对外发布的产品叫 <a href=\"https://help.aliyun.com/document_detail/153762.html?spm=5176.168087.J_7469444330.4.91376942pV1EvU\">云效平台</a></li>\n<li>有赞qa平台，公交车发布系统，也借鉴了aoneFlow的思路<br> <a href=\"https://tech.youzan.com/team/\">3.4 公交车系统</a></li>\n</ul>\n<h4 id=\"参考介绍\"><a class=\"markdownIt-Anchor\" href=\"#参考介绍\"></a> 参考介绍：</h4>\n<ul>\n<li><a href=\"https://blog.csdn.net/bbcckkl/article/details/111087267\">项目版本管理的最佳实践：飞流Flow（阿里AoneFlow）篇</a></li>\n<li><a href=\"https://blog.csdn.net/liumingzhe1/article/details/105287150\">Git-flow分支管理与Aone-flow分支管理对比</a></li>\n<li><a href=\"https://www.infoq.cn/article/EaC4c6yiJrzZ_Gtaf9Ne\">阿里巴巴如何管理代码分支？ </a></li>\n<li><a href=\"http://bos.itdks.com/7b7b1baa2f1244b8b3c2b3ae26de3eea.pdf\">阿里巴巴在DevOps实践中的创新和思考-ppt </a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckrpc7nj9000159fyc6izhzzc","category_id":"ckrpc7nje000359fy57pr29zx","_id":"ckrpc7njk000959fy4frkff8k"},{"post_id":"ckrpc7njc000259fye73od906","category_id":"ckrpc7nje000359fy57pr29zx","_id":"ckrpc7njl000c59fy8r2s9gkk"},{"post_id":"ckrpc7njg000559fygv68abew","category_id":"ckrpc7nje000359fy57pr29zx","_id":"ckrpc7njl000f59fyfs3i8hav"}],"PostTag":[{"post_id":"ckrpc7nj9000159fyc6izhzzc","tag_id":"ckrpc7njf000459fyes4q11kr","_id":"ckrpc7njl000b59fya3ys5ng8"},{"post_id":"ckrpc7nj9000159fyc6izhzzc","tag_id":"ckrpc7nji000759fy0q0aeg0b","_id":"ckrpc7njl000d59fy3o7lar6b"},{"post_id":"ckrpc7njc000259fye73od906","tag_id":"ckrpc7njk000a59fy6aetef7i","_id":"ckrpc7njm000i59fy6elc0xrp"},{"post_id":"ckrpc7njc000259fye73od906","tag_id":"ckrpc7nji000759fy0q0aeg0b","_id":"ckrpc7njm000j59fyawch6h1b"},{"post_id":"ckrpc7njc000259fye73od906","tag_id":"ckrpc7njf000459fyes4q11kr","_id":"ckrpc7njn000l59fyazs846yt"},{"post_id":"ckrpc7njg000559fygv68abew","tag_id":"ckrpc7njf000459fyes4q11kr","_id":"ckrpc7njn000m59fyhzs2161g"},{"post_id":"ckrpc7njg000559fygv68abew","tag_id":"ckrpc7nji000759fy0q0aeg0b","_id":"ckrpc7njn000n59fy45gr9iqh"}],"Tag":[{"name":"设计","_id":"ckrpc7njf000459fyes4q11kr"},{"name":"技术规范","_id":"ckrpc7nji000759fy0q0aeg0b"},{"name":"mysql","_id":"ckrpc7njk000a59fy6aetef7i"}]}}